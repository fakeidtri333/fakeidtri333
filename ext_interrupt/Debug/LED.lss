
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00000764  000007f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000f8  008000f8  00000890  2**0
                  ALLOC
  3 .stab         000016e0  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2b  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_1>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_2>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f7 e0       	ldi	r31, 0x07	; 7
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	a8 3f       	cpi	r26, 0xF8	; 248
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	a8 ef       	ldi	r26, 0xF8	; 248
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	aa 3f       	cpi	r26, 0xFA	; 250
  c2:	b1 07       	cpc	r27, r17
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  ca:	0c 94 b0 03 	jmp	0x760	; 0x760 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <__vector_2>:
	LCDstring(A,16);
	_delay_ms(100);
}


ISR(INT1_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	j++;
  f4:	80 91 f9 00 	lds	r24, 0x00F9
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 f9 00 	sts	0x00F9, r24
	if(j>4)j=0;
  fe:	85 30       	cpi	r24, 0x05	; 5
 100:	10 f0       	brcs	.+4      	; 0x106 <__vector_2+0x34>
 102:	10 92 f9 00 	sts	0x00F9, r1
	if(j==0)sprintf(A,"External Interrupt");
 106:	80 91 f9 00 	lds	r24, 0x00F9
 10a:	88 23       	and	r24, r24
 10c:	31 f4       	brne	.+12     	; 0x11a <__vector_2+0x48>
 10e:	84 ee       	ldi	r24, 0xE4	; 228
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	60 e6       	ldi	r22, 0x60	; 96
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(j==1)sprintf(A," bricsworld.com ");
 11a:	80 91 f9 00 	lds	r24, 0x00F9
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	31 f4       	brne	.+12     	; 0x12e <__vector_2+0x5c>
 122:	84 ee       	ldi	r24, 0xE4	; 228
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	63 e7       	ldi	r22, 0x73	; 115
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(j==2)sprintf(A,"www.simplifix.in");
 12e:	80 91 f9 00 	lds	r24, 0x00F9
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	31 f4       	brne	.+12     	; 0x142 <__vector_2+0x70>
 136:	84 ee       	ldi	r24, 0xE4	; 228
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	64 e8       	ldi	r22, 0x84	; 132
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(j==3)sprintf(A,"Embedded System ");
 142:	80 91 f9 00 	lds	r24, 0x00F9
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	31 f4       	brne	.+12     	; 0x156 <__vector_2+0x84>
 14a:	84 ee       	ldi	r24, 0xE4	; 228
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	65 e9       	ldi	r22, 0x95	; 149
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(j==4)sprintf(A," I.I.T.Kanpur ");
 156:	80 91 f9 00 	lds	r24, 0x00F9
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	31 f4       	brne	.+12     	; 0x16a <__vector_2+0x98>
 15e:	84 ee       	ldi	r24, 0xE4	; 228
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	66 ea       	ldi	r22, 0xA6	; 166
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	LCDGotoXY(0,1);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	0e 94 41 02 	call	0x482	; 0x482 <LCDGotoXY>
	LCDstring(A,16);
 172:	84 ee       	ldi	r24, 0xE4	; 228
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	60 e1       	ldi	r22, 0x10	; 16
 178:	0e 94 2c 02 	call	0x458	; 0x458 <LCDstring>
 17c:	88 ee       	ldi	r24, 0xE8	; 232
 17e:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 180:	24 e6       	ldi	r18, 0x64	; 100
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f9 01       	movw	r30, r18
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <__vector_2+0xb4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	d9 f7       	brne	.-10     	; 0x184 <__vector_2+0xb2>
	_delay_ms(100);
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_1>:
	while(1){
	}
	}


ISR(INT0_vect){
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
	i++;
 1d2:	80 91 f8 00 	lds	r24, 0x00F8
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 f8 00 	sts	0x00F8, r24
	if(i>4)i=0;
 1dc:	85 30       	cpi	r24, 0x05	; 5
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <__vector_1+0x34>
 1e0:	10 92 f8 00 	sts	0x00F8, r1
	if(i==0)sprintf(A," Rajiv Shankar ");
 1e4:	80 91 f8 00 	lds	r24, 0x00F8
 1e8:	88 23       	and	r24, r24
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <__vector_1+0x48>
 1ec:	84 ee       	ldi	r24, 0xE4	; 228
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	65 eb       	ldi	r22, 0xB5	; 181
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(i==1)sprintf(A," BRiCS world ");
 1f8:	80 91 f8 00 	lds	r24, 0x00F8
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	31 f4       	brne	.+12     	; 0x20c <__vector_1+0x5c>
 200:	84 ee       	ldi	r24, 0xE4	; 228
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	65 ec       	ldi	r22, 0xC5	; 197
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(i==2)sprintf(A,"Summer workshop ");
 20c:	80 91 f8 00 	lds	r24, 0x00F8
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	31 f4       	brne	.+12     	; 0x220 <__vector_1+0x70>
 214:	84 ee       	ldi	r24, 0xE4	; 228
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	63 ed       	ldi	r22, 0xD3	; 211
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(i==3)sprintf(A,"Embedded System ");
 220:	80 91 f8 00 	lds	r24, 0x00F8
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	31 f4       	brne	.+12     	; 0x234 <__vector_1+0x84>
 228:	84 ee       	ldi	r24, 0xE4	; 228
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	65 e9       	ldi	r22, 0x95	; 149
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	if(i==4)sprintf(A," I.I.T.Kanpur ");
 234:	80 91 f8 00 	lds	r24, 0x00F8
 238:	84 30       	cpi	r24, 0x04	; 4
 23a:	31 f4       	brne	.+12     	; 0x248 <__vector_1+0x98>
 23c:	84 ee       	ldi	r24, 0xE4	; 228
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	66 ea       	ldi	r22, 0xA6	; 166
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	LCDGotoXY(0,0);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	0e 94 41 02 	call	0x482	; 0x482 <LCDGotoXY>
	LCDstring(A,16);
 250:	84 ee       	ldi	r24, 0xE4	; 228
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	60 e1       	ldi	r22, 0x10	; 16
 256:	0e 94 2c 02 	call	0x458	; 0x458 <LCDstring>
 25a:	88 ee       	ldi	r24, 0xE8	; 232
 25c:	93 e0       	ldi	r25, 0x03	; 3
 25e:	24 e6       	ldi	r18, 0x64	; 100
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <__vector_1+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 268:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26a:	d9 f7       	brne	.-10     	; 0x262 <__vector_1+0xb2>
	_delay_ms(100);
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <main>:
#include "lcd_lib.h"
#include <ext_interrupt.h>
char i=0,j=0 ;
char A[20]="";
main(void){
	DDRD=0b11110011;
 28e:	83 ef       	ldi	r24, 0xF3	; 243
 290:	81 bb       	out	0x11, r24	; 17
	PORTD=0b00001100;
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	82 bb       	out	0x12, r24	; 18
	LCDinit();
 296:	0e 94 8b 02 	call	0x516	; 0x516 <LCDinit>
	LCDclr();
 29a:	0e 94 24 02 	call	0x448	; 0x448 <LCDclr>
	enable_INT0(2);
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <enable_INT0>
	enable_INT1(0);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 90 01 	call	0x320	; 0x320 <enable_INT1>
	sei();
 2ae:	78 94       	sei
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <main+0x22>

000002b2 <enable_INT0>:
#include<avr/io.h>
#include<ext_interrupt.h>

void enable_INT0(int i)
{
 2b2:	9c 01       	movw	r18, r24
	DDRD&=~(1<<2);	
 2b4:	8a 98       	cbi	0x11, 2	; 17
	PORTD|=(1<<2);
 2b6:	92 9a       	sbi	0x12, 2	; 18
	GICR|=(1<<INT0);
 2b8:	8b b7       	in	r24, 0x3b	; 59
 2ba:	80 64       	ori	r24, 0x40	; 64
 2bc:	8b bf       	out	0x3b, r24	; 59
	GIFR|=(1<<INTF0);
 2be:	8a b7       	in	r24, 0x3a	; 58
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	8a bf       	out	0x3a, r24	; 58
	switch(i)
 2c4:	21 30       	cpi	r18, 0x01	; 1
 2c6:	31 05       	cpc	r19, r1
 2c8:	81 f0       	breq	.+32     	; 0x2ea <enable_INT0+0x38>
 2ca:	22 30       	cpi	r18, 0x02	; 2
 2cc:	31 05       	cpc	r19, r1
 2ce:	1c f4       	brge	.+6      	; 0x2d6 <enable_INT0+0x24>
 2d0:	23 2b       	or	r18, r19
 2d2:	41 f0       	breq	.+16     	; 0x2e4 <enable_INT0+0x32>
 2d4:	08 95       	ret
 2d6:	22 30       	cpi	r18, 0x02	; 2
 2d8:	31 05       	cpc	r19, r1
 2da:	69 f0       	breq	.+26     	; 0x2f6 <enable_INT0+0x44>
 2dc:	23 30       	cpi	r18, 0x03	; 3
 2de:	31 05       	cpc	r19, r1
 2e0:	b9 f4       	brne	.+46     	; 0x310 <enable_INT0+0x5e>
 2e2:	10 c0       	rjmp	.+32     	; 0x304 <enable_INT0+0x52>
	{
		case 0:				//low level
			MCUCR&=~(1<<ISC00);
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	8e 7f       	andi	r24, 0xFE	; 254
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <enable_INT0+0x3c>
			MCUCR&=~(1<<ISC01);
			break;
		case 1:				//any logical change
			MCUCR|=(1<<ISC00);
 2ea:	85 b7       	in	r24, 0x35	; 53
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	85 bf       	out	0x35, r24	; 53
			MCUCR&=~(1<<ISC01);
 2f0:	85 b7       	in	r24, 0x35	; 53
 2f2:	8d 7f       	andi	r24, 0xFD	; 253
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <enable_INT0+0x4e>
			break;
		case 2:				//falling edge
			MCUCR&=~(1<<ISC00);
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	85 bf       	out	0x35, r24	; 53
			MCUCR|=(1<<ISC01);
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	85 bf       	out	0x35, r24	; 53
 302:	08 95       	ret
			break;
		case 3:				//rising edge
			MCUCR|=(1<<ISC00);
 304:	85 b7       	in	r24, 0x35	; 53
 306:	81 60       	ori	r24, 0x01	; 1
 308:	85 bf       	out	0x35, r24	; 53
			MCUCR|=(1<<ISC01);
 30a:	85 b7       	in	r24, 0x35	; 53
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	85 bf       	out	0x35, r24	; 53
 310:	08 95       	ret

00000312 <disable_INT0>:
	}		
}

void disable_INT0()
{
	GICR&=~(1<<INT0);
 312:	8b b7       	in	r24, 0x3b	; 59
 314:	8f 7b       	andi	r24, 0xBF	; 191
 316:	8b bf       	out	0x3b, r24	; 59
	GIFR&=~(1<<INTF0);
 318:	8a b7       	in	r24, 0x3a	; 58
 31a:	8f 7b       	andi	r24, 0xBF	; 191
 31c:	8a bf       	out	0x3a, r24	; 58
}
 31e:	08 95       	ret

00000320 <enable_INT1>:

void enable_INT1(int i)
{
 320:	9c 01       	movw	r18, r24
	DDRD&=~(1<<3);	
 322:	8b 98       	cbi	0x11, 3	; 17
	PORTD|=(1<<3);
 324:	93 9a       	sbi	0x12, 3	; 18
	GICR|=(1<<INT1);
 326:	8b b7       	in	r24, 0x3b	; 59
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	8b bf       	out	0x3b, r24	; 59
	GIFR|=(1<<INTF1);
 32c:	8a b7       	in	r24, 0x3a	; 58
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	8a bf       	out	0x3a, r24	; 58
	switch(i)
 332:	21 30       	cpi	r18, 0x01	; 1
 334:	31 05       	cpc	r19, r1
 336:	81 f0       	breq	.+32     	; 0x358 <enable_INT1+0x38>
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	1c f4       	brge	.+6      	; 0x344 <enable_INT1+0x24>
 33e:	23 2b       	or	r18, r19
 340:	41 f0       	breq	.+16     	; 0x352 <enable_INT1+0x32>
 342:	08 95       	ret
 344:	22 30       	cpi	r18, 0x02	; 2
 346:	31 05       	cpc	r19, r1
 348:	69 f0       	breq	.+26     	; 0x364 <enable_INT1+0x44>
 34a:	23 30       	cpi	r18, 0x03	; 3
 34c:	31 05       	cpc	r19, r1
 34e:	b9 f4       	brne	.+46     	; 0x37e <enable_INT1+0x5e>
 350:	10 c0       	rjmp	.+32     	; 0x372 <enable_INT1+0x52>
	{
		case 0:				//low level
			MCUCR&=~(1<<ISC10);
 352:	85 b7       	in	r24, 0x35	; 53
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	02 c0       	rjmp	.+4      	; 0x35c <enable_INT1+0x3c>
			MCUCR&=~(1<<ISC11);
			break;
		case 1:				//any logical change
			MCUCR|=(1<<ISC10);
 358:	85 b7       	in	r24, 0x35	; 53
 35a:	84 60       	ori	r24, 0x04	; 4
 35c:	85 bf       	out	0x35, r24	; 53
			MCUCR&=~(1<<ISC11);
 35e:	85 b7       	in	r24, 0x35	; 53
 360:	87 7f       	andi	r24, 0xF7	; 247
 362:	05 c0       	rjmp	.+10     	; 0x36e <enable_INT1+0x4e>
			break;
		case 2:				//falling edge
			MCUCR&=~(1<<ISC10);
 364:	85 b7       	in	r24, 0x35	; 53
 366:	8b 7f       	andi	r24, 0xFB	; 251
 368:	85 bf       	out	0x35, r24	; 53
			MCUCR|=(1<<ISC11);
 36a:	85 b7       	in	r24, 0x35	; 53
 36c:	88 60       	ori	r24, 0x08	; 8
 36e:	85 bf       	out	0x35, r24	; 53
 370:	08 95       	ret
			break;
		case 3:				//rising edge
			MCUCR|=(1<<ISC10);
 372:	85 b7       	in	r24, 0x35	; 53
 374:	84 60       	ori	r24, 0x04	; 4
 376:	85 bf       	out	0x35, r24	; 53
			MCUCR|=(1<<ISC11);
 378:	85 b7       	in	r24, 0x35	; 53
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	85 bf       	out	0x35, r24	; 53
 37e:	08 95       	ret

00000380 <disable_INT1>:
	}		
}

void disable_INT1()
{
	GICR&=~(1<<INT1);
 380:	8b b7       	in	r24, 0x3b	; 59
 382:	8f 77       	andi	r24, 0x7F	; 127
 384:	8b bf       	out	0x3b, r24	; 59
	GIFR&=~(1<<INTF1);
 386:	8a b7       	in	r24, 0x3a	; 58
 388:	8f 77       	andi	r24, 0x7F	; 127
 38a:	8a bf       	out	0x3a, r24	; 58
}
 38c:	08 95       	ret

0000038e <enable_INT2>:


void enable_INT2(int i)
{
 38e:	9c 01       	movw	r18, r24
	DDRB&=~(1<<2);
 390:	ba 98       	cbi	0x17, 2	; 23
	PORTB|=(1<<2);
 392:	c2 9a       	sbi	0x18, 2	; 24
	GICR|=(1<<INT2);
 394:	8b b7       	in	r24, 0x3b	; 59
 396:	80 62       	ori	r24, 0x20	; 32
 398:	8b bf       	out	0x3b, r24	; 59
	GIFR|=(1<<INTF2);
 39a:	8a b7       	in	r24, 0x3a	; 58
 39c:	80 62       	ori	r24, 0x20	; 32
 39e:	8a bf       	out	0x3a, r24	; 58
	switch(i)
 3a0:	21 15       	cp	r18, r1
 3a2:	31 05       	cpc	r19, r1
 3a4:	21 f0       	breq	.+8      	; 0x3ae <enable_INT2+0x20>
 3a6:	21 30       	cpi	r18, 0x01	; 1
 3a8:	31 05       	cpc	r19, r1
 3aa:	41 f4       	brne	.+16     	; 0x3bc <enable_INT2+0x2e>
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <enable_INT2+0x28>
	{
		case 0:				//falling edge
			MCUCSR&=~(1<<ISC2);
 3ae:	84 b7       	in	r24, 0x34	; 52
 3b0:	8f 7b       	andi	r24, 0xBF	; 191
 3b2:	84 bf       	out	0x34, r24	; 52
 3b4:	08 95       	ret
			break;
		case 1:				//rising edge
			MCUCSR|=(1<<ISC2);
 3b6:	84 b7       	in	r24, 0x34	; 52
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	84 bf       	out	0x34, r24	; 52
 3bc:	08 95       	ret

000003be <disable_INT2>:
}


void disable_INT2()
{
	GICR&=~(1<<INT2);
 3be:	8b b7       	in	r24, 0x3b	; 59
 3c0:	8f 7d       	andi	r24, 0xDF	; 223
 3c2:	8b bf       	out	0x3b, r24	; 59
	GIFR&=~(1<<INTF2);
 3c4:	8a b7       	in	r24, 0x3a	; 58
 3c6:	8f 7d       	andi	r24, 0xDF	; 223
 3c8:	8a bf       	out	0x3a, r24	; 58
 3ca:	08 95       	ret

000003cc <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 3cc:	28 2f       	mov	r18, r24
 3ce:	20 7f       	andi	r18, 0xF0	; 240
 3d0:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
 3d2:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 3d4:	aa 9a       	sbi	0x15, 2	; 21
 3d6:	28 ee       	ldi	r18, 0xE8	; 232
 3d8:	33 e0       	ldi	r19, 0x03	; 3
 3da:	f9 01       	movw	r30, r18
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 3e0:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 3e2:	a8 98       	cbi	0x15, 0	; 21
 3e4:	f9 01       	movw	r30, r18
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	44 e0       	ldi	r20, 0x04	; 4
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	4a 95       	dec	r20
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <LCDsendChar+0x22>
 3f6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 3f8:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 3fa:	aa 9a       	sbi	0x15, 2	; 21
 3fc:	c9 01       	movw	r24, r18
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 402:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 404:	a8 98       	cbi	0x15, 0	; 21
 406:	c9 01       	movw	r24, r18
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 40c:	08 95       	ret

0000040e <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 40e:	28 2f       	mov	r18, r24
 410:	20 7f       	andi	r18, 0xF0	; 240
 412:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 414:	aa 9a       	sbi	0x15, 2	; 21
 416:	28 ee       	ldi	r18, 0xE8	; 232
 418:	33 e0       	ldi	r19, 0x03	; 3
 41a:	f9 01       	movw	r30, r18
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 420:	aa 98       	cbi	0x15, 2	; 21
 422:	f9 01       	movw	r30, r18
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	54 e0       	ldi	r21, 0x04	; 4
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	5a 95       	dec	r21
 432:	e1 f7       	brne	.-8      	; 0x42c <LCDsendCommand+0x1e>
 434:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 436:	aa 9a       	sbi	0x15, 2	; 21
 438:	c9 01       	movw	r24, r18
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 43e:	aa 98       	cbi	0x15, 2	; 21
 440:	c9 01       	movw	r24, r18
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 446:	08 95       	ret

00000448 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
}
 44e:	08 95       	ret

00000450 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
}
 456:	08 95       	ret

00000458 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	49 f0       	breq	.+18     	; 0x478 <__stack+0x19>
 466:	ec 01       	movw	r28, r24
 468:	10 e0       	ldi	r17, 0x00	; 0
 46a:	04 c0       	rjmp	.+8      	; 0x474 <__stack+0x15>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 46c:	89 91       	ld	r24, Y+
 46e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 472:	1f 5f       	subi	r17, 0xFF	; 255
 474:	10 17       	cp	r17, r16
 476:	d0 f3       	brcs	.-12     	; 0x46c <__stack+0xd>
	{
		LCDsendChar(data[i]);
	}
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 482:	62 30       	cpi	r22, 0x02	; 2
 484:	31 f0       	breq	.+12     	; 0x492 <LCDGotoXY+0x10>
 486:	63 30       	cpi	r22, 0x03	; 3
 488:	31 f0       	breq	.+12     	; 0x496 <LCDGotoXY+0x14>
 48a:	61 30       	cpi	r22, 0x01	; 1
 48c:	29 f4       	brne	.+10     	; 0x498 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 48e:	80 5c       	subi	r24, 0xC0	; 192
 490:	03 c0       	rjmp	.+6      	; 0x498 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 492:	8c 5e       	subi	r24, 0xEC	; 236
 494:	01 c0       	rjmp	.+2      	; 0x498 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 496:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 498:	80 68       	ori	r24, 0x80	; 128
 49a:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
	
}
 49e:	08 95       	ret

000004a0 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	ec 01       	movw	r28, r24
 4a8:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 4aa:	64 2f       	mov	r22, r20
 4ac:	0e 94 41 02 	call	0x482	; 0x482 <LCDGotoXY>
 4b0:	10 e0       	ldi	r17, 0x00	; 0
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 4b4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 4b8:	1f 5f       	subi	r17, 0xFF	; 255
 4ba:	fe 01       	movw	r30, r28
 4bc:	e1 0f       	add	r30, r17
 4be:	f1 1d       	adc	r31, r1
 4c0:	84 91       	lpm	r24, Z+
 4c2:	88 23       	and	r24, r24
 4c4:	b9 f7       	brne	.-18     	; 0x4b4 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	08 95       	ret

000004ce <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	7c 01       	movw	r14, r24
 4dc:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 4de:	11 0f       	add	r17, r17
 4e0:	11 0f       	add	r17, r17
 4e2:	11 0f       	add	r17, r17
 4e4:	10 64       	ori	r17, 0x40	; 64
 4e6:	c0 e0       	ldi	r28, 0x00	; 0
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 4ea:	f7 01       	movw	r30, r14
 4ec:	ec 0f       	add	r30, r28
 4ee:	fd 1f       	adc	r31, r29
 4f0:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 4f2:	81 2f       	mov	r24, r17
 4f4:	8c 0f       	add	r24, r28
 4f6:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
		LCDsendChar(pcc);
 4fa:	80 2f       	mov	r24, r16
 4fc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 500:	21 96       	adiw	r28, 0x01	; 1
 502:	c8 30       	cpi	r28, 0x08	; 8
 504:	d1 05       	cpc	r29, r1
 506:	89 f7       	brne	.-30     	; 0x4ea <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	ff 90       	pop	r15
 512:	ef 90       	pop	r14
 514:	08 95       	ret

00000516 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	88 e9       	ldi	r24, 0x98	; 152
 51e:	9a e3       	ldi	r25, 0x3A	; 58
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 524:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 526:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 528:	84 b3       	in	r24, 0x14	; 20
 52a:	80 6f       	ori	r24, 0xF0	; 240
 52c:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 52e:	84 b3       	in	r24, 0x14	; 20
 530:	87 60       	ori	r24, 0x07	; 7
 532:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 534:	80 e3       	ldi	r24, 0x30	; 48
 536:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 538:	aa 9a       	sbi	0x15, 2	; 21
 53a:	28 ee       	ldi	r18, 0xE8	; 232
 53c:	33 e0       	ldi	r19, 0x03	; 3
 53e:	f9 01       	movw	r30, r18
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 544:	aa 98       	cbi	0x15, 2	; 21
 546:	f9 01       	movw	r30, r18
 548:	31 97       	sbiw	r30, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 54c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 54e:	aa 9a       	sbi	0x15, 2	; 21
 550:	c9 01       	movw	r24, r18
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 556:	aa 98       	cbi	0x15, 2	; 21
 558:	c9 01       	movw	r24, r18
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 55e:	80 e2       	ldi	r24, 0x20	; 32
 560:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 562:	aa 9a       	sbi	0x15, 2	; 21
 564:	c9 01       	movw	r24, r18
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 56a:	aa 98       	cbi	0x15, 2	; 21
 56c:	c9 01       	movw	r24, r18
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 572:	88 e2       	ldi	r24, 0x28	; 40
 574:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
 57e:	c4 e5       	ldi	r28, 0x54	; 84
 580:	d0 e0       	ldi	r29, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 584:	16 2f       	mov	r17, r22
 586:	1f 5f       	subi	r17, 0xFF	; 255
 588:	ce 01       	movw	r24, r28
 58a:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCDdefinechar>
 58e:	28 96       	adiw	r28, 0x08	; 8
 590:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 592:	18 30       	cpi	r17, 0x08	; 8
 594:	b9 f7       	brne	.-18     	; 0x584 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	08 95       	ret

0000059e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	c0 e0       	ldi	r28, 0x00	; 0
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 5aa:	08 2f       	mov	r16, r24
 5ac:	10 e0       	ldi	r17, 0x00	; 0
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 5b0:	8e e1       	ldi	r24, 0x1E	; 30
 5b2:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 5b6:	21 96       	adiw	r28, 0x01	; 1
 5b8:	c0 17       	cp	r28, r16
 5ba:	d1 07       	cpc	r29, r17
 5bc:	cc f3       	brlt	.-14     	; 0x5b0 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	08 95       	ret

000005c8 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	c0 e0       	ldi	r28, 0x00	; 0
 5d2:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 5d4:	08 2f       	mov	r16, r24
 5d6:	10 e0       	ldi	r17, 0x00	; 0
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 5da:	88 e1       	ldi	r24, 0x18	; 24
 5dc:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 5e0:	21 96       	adiw	r28, 0x01	; 1
 5e2:	c0 17       	cp	r28, r16
 5e4:	d1 07       	cpc	r29, r17
 5e6:	cc f3       	brlt	.-14     	; 0x5da <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	08 95       	ret

000005f2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 5f2:	8e e0       	ldi	r24, 0x0E	; 14
 5f4:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
}
 5f8:	08 95       	ret

000005fa <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 5fa:	8f e0       	ldi	r24, 0x0F	; 15
 5fc:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
}
 600:	08 95       	ret

00000602 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 602:	8c e0       	ldi	r24, 0x0C	; 12
 604:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
}
 608:	08 95       	ret

0000060a <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 60a:	88 e0       	ldi	r24, 0x08	; 8
 60c:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
}
 610:	08 95       	ret

00000612 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 612:	8c e0       	ldi	r24, 0x0C	; 12
 614:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
}
 618:	08 95       	ret

0000061a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	c0 e0       	ldi	r28, 0x00	; 0
 624:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 626:	08 2f       	mov	r16, r24
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	04 c0       	rjmp	.+8      	; 0x634 <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 62c:	80 e1       	ldi	r24, 0x10	; 16
 62e:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 632:	21 96       	adiw	r28, 0x01	; 1
 634:	c0 17       	cp	r28, r16
 636:	d1 07       	cpc	r29, r17
 638:	cc f3       	brlt	.-14     	; 0x62c <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	08 95       	ret

00000644 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	c0 e0       	ldi	r28, 0x00	; 0
 64e:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 650:	08 2f       	mov	r16, r24
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	04 c0       	rjmp	.+8      	; 0x65e <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 656:	84 e1       	ldi	r24, 0x14	; 20
 658:	0e 94 07 02 	call	0x40e	; 0x40e <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 65c:	21 96       	adiw	r28, 0x01	; 1
 65e:	c0 17       	cp	r28, r16
 660:	d1 07       	cpc	r29, r17
 662:	cc f3       	brlt	.-14     	; 0x656 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	08 95       	ret

0000066e <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 66e:	df 92       	push	r13
 670:	ef 92       	push	r14
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 67e:	96 e0       	ldi	r25, 0x06	; 6
 680:	89 9f       	mul	r24, r25
 682:	c0 01       	movw	r24, r0
 684:	11 24       	eor	r1, r1
 686:	24 2f       	mov	r18, r20
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	ac 01       	movw	r20, r24
 68c:	42 9f       	mul	r20, r18
 68e:	c0 01       	movw	r24, r0
 690:	43 9f       	mul	r20, r19
 692:	90 0d       	add	r25, r0
 694:	52 9f       	mul	r21, r18
 696:	90 0d       	add	r25, r0
 698:	11 24       	eor	r1, r1
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	0e 94 96 03 	call	0x72c	; 0x72c <__divmodhi4>
 6a0:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 6a2:	cb 01       	movw	r24, r22
 6a4:	66 e0       	ldi	r22, 0x06	; 6
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	0e 94 82 03 	call	0x704	; 0x704 <__udivmodhi4>
 6ac:	e8 2e       	mov	r14, r24
 6ae:	ff 24       	eor	r15, r15
 6b0:	00 e0       	ldi	r16, 0x00	; 0
 6b2:	10 e0       	ldi	r17, 0x00	; 0
 6b4:	12 c0       	rjmp	.+36     	; 0x6da <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 6b6:	c8 01       	movw	r24, r16
 6b8:	05 96       	adiw	r24, 0x05	; 5
 6ba:	c8 17       	cp	r28, r24
 6bc:	d9 07       	cpc	r29, r25
 6be:	10 f0       	brcs	.+4      	; 0x6c4 <LCDprogressBar+0x56>
 6c0:	85 e0       	ldi	r24, 0x05	; 5
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 6c4:	c0 17       	cp	r28, r16
 6c6:	d1 07       	cpc	r29, r17
 6c8:	10 f0       	brcs	.+4      	; 0x6ce <LCDprogressBar+0x60>
 6ca:	8e 2d       	mov	r24, r14
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <LCDprogressBar+0x62>
 6ce:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 6d0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 6d4:	f3 94       	inc	r15
 6d6:	0a 5f       	subi	r16, 0xFA	; 250
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255
 6da:	fd 14       	cp	r15, r13
 6dc:	60 f3       	brcs	.-40     	; 0x6b6 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	08 95       	ret

000006ee <LCDdisplay>:

void LCDdisplay(char a[])
{
	LCDstring(a,strlen(a));
 6ee:	dc 01       	movw	r26, r24
 6f0:	0d 90       	ld	r0, X+
 6f2:	00 20       	and	r0, r0
 6f4:	e9 f7       	brne	.-6      	; 0x6f0 <LCDdisplay+0x2>
 6f6:	11 97       	sbiw	r26, 0x01	; 1
 6f8:	a8 1b       	sub	r26, r24
 6fa:	b9 0b       	sbc	r27, r25
 6fc:	6a 2f       	mov	r22, r26
 6fe:	0e 94 2c 02 	call	0x458	; 0x458 <LCDstring>
}
 702:	08 95       	ret

00000704 <__udivmodhi4>:
 704:	aa 1b       	sub	r26, r26
 706:	bb 1b       	sub	r27, r27
 708:	51 e1       	ldi	r21, 0x11	; 17
 70a:	07 c0       	rjmp	.+14     	; 0x71a <__udivmodhi4_ep>

0000070c <__udivmodhi4_loop>:
 70c:	aa 1f       	adc	r26, r26
 70e:	bb 1f       	adc	r27, r27
 710:	a6 17       	cp	r26, r22
 712:	b7 07       	cpc	r27, r23
 714:	10 f0       	brcs	.+4      	; 0x71a <__udivmodhi4_ep>
 716:	a6 1b       	sub	r26, r22
 718:	b7 0b       	sbc	r27, r23

0000071a <__udivmodhi4_ep>:
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	5a 95       	dec	r21
 720:	a9 f7       	brne	.-22     	; 0x70c <__udivmodhi4_loop>
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	bc 01       	movw	r22, r24
 728:	cd 01       	movw	r24, r26
 72a:	08 95       	ret

0000072c <__divmodhi4>:
 72c:	97 fb       	bst	r25, 7
 72e:	09 2e       	mov	r0, r25
 730:	07 26       	eor	r0, r23
 732:	0a d0       	rcall	.+20     	; 0x748 <__divmodhi4_neg1>
 734:	77 fd       	sbrc	r23, 7
 736:	04 d0       	rcall	.+8      	; 0x740 <__divmodhi4_neg2>
 738:	e5 df       	rcall	.-54     	; 0x704 <__udivmodhi4>
 73a:	06 d0       	rcall	.+12     	; 0x748 <__divmodhi4_neg1>
 73c:	00 20       	and	r0, r0
 73e:	1a f4       	brpl	.+6      	; 0x746 <__divmodhi4_exit>

00000740 <__divmodhi4_neg2>:
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255

00000746 <__divmodhi4_exit>:
 746:	08 95       	ret

00000748 <__divmodhi4_neg1>:
 748:	f6 f7       	brtc	.-4      	; 0x746 <__divmodhi4_exit>
 74a:	90 95       	com	r25
 74c:	81 95       	neg	r24
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <strcpy>:
 752:	fb 01       	movw	r30, r22
 754:	dc 01       	movw	r26, r24
 756:	01 90       	ld	r0, Z+
 758:	0d 92       	st	X+, r0
 75a:	00 20       	and	r0, r0
 75c:	e1 f7       	brne	.-8      	; 0x756 <strcpy+0x4>
 75e:	08 95       	ret

00000760 <_exit>:
 760:	f8 94       	cli

00000762 <__stop_program>:
 762:	ff cf       	rjmp	.-2      	; 0x762 <__stop_program>
