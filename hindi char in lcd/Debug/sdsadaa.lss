
sdsadaa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000022f6  0000236a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001aa0  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c2f  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000693c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007827  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000085d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000089c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000918f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <backslash>:
      94:	1f 04 0e 15 15 0d 04 04                             ........

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf e5       	ldi	r28, 0x5F	; 95
      a2:	d4 e0       	ldi	r29, 0x04	; 4
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	10 e0       	ldi	r17, 0x00	; 0
      aa:	a0 e6       	ldi	r26, 0x60	; 96
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	e6 ef       	ldi	r30, 0xF6	; 246
      b0:	f2 e2       	ldi	r31, 0x22	; 34
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <.do_copy_data_start>

000000b4 <.do_copy_data_loop>:
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0

000000b8 <.do_copy_data_start>:
      b8:	a8 36       	cpi	r26, 0x68	; 104
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <.do_copy_data_loop>
      be:	0e 94 23 0b 	call	0x1646	; 0x1646 <main>
      c2:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <LCDsendChar>:
	0x18, 0x1C, 0x1E, 0x1F, 0x1E, 0x1C, 0x18, 0x00  // 7. fast-forward arrow
};


void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	e9 97       	sbiw	r28, 0x39	; 57
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	f8 94       	cli
      d8:	de bf       	out	0x3e, r29	; 62
      da:	0f be       	out	0x3f, r0	; 63
      dc:	cd bf       	out	0x3d, r28	; 61
      de:	89 af       	std	Y+57, r24	; 0x39

	LDP=(ch&0b11110000);
      e0:	e5 e3       	ldi	r30, 0x35	; 53
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	89 ad       	ldd	r24, Y+57	; 0x39
      e6:	80 7f       	andi	r24, 0xF0	; 240
      e8:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
      ea:	a5 e3       	ldi	r26, 0x35	; 53
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	e5 e3       	ldi	r30, 0x35	; 53
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	81 60       	ori	r24, 0x01	; 1
      f6:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
      f8:	a5 e3       	ldi	r26, 0x35	; 53
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e5 e3       	ldi	r30, 0x35	; 53
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	84 60       	ori	r24, 0x04	; 4
     104:	8c 93       	st	X, r24
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	a0 e8       	ldi	r26, 0x80	; 128
     10c:	bf e3       	ldi	r27, 0x3F	; 63
     10e:	8d ab       	std	Y+53, r24	; 0x35
     110:	9e ab       	std	Y+54, r25	; 0x36
     112:	af ab       	std	Y+55, r26	; 0x37
     114:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     116:	6d a9       	ldd	r22, Y+53	; 0x35
     118:	7e a9       	ldd	r23, Y+54	; 0x36
     11a:	8f a9       	ldd	r24, Y+55	; 0x37
     11c:	98 ad       	ldd	r25, Y+56	; 0x38
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	4a e7       	ldi	r20, 0x7A	; 122
     124:	54 e4       	ldi	r21, 0x44	; 68
     126:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     12a:	dc 01       	movw	r26, r24
     12c:	cb 01       	movw	r24, r22
     12e:	89 ab       	std	Y+49, r24	; 0x31
     130:	9a ab       	std	Y+50, r25	; 0x32
     132:	ab ab       	std	Y+51, r26	; 0x33
     134:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     136:	69 a9       	ldd	r22, Y+49	; 0x31
     138:	7a a9       	ldd	r23, Y+50	; 0x32
     13a:	8b a9       	ldd	r24, Y+51	; 0x33
     13c:	9c a9       	ldd	r25, Y+52	; 0x34
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	40 e8       	ldi	r20, 0x80	; 128
     144:	5f e3       	ldi	r21, 0x3F	; 63
     146:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     14a:	88 23       	and	r24, r24
     14c:	2c f4       	brge	.+10     	; 0x158 <LCDsendChar+0x8e>
		__ticks = 1;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	98 ab       	std	Y+48, r25	; 0x30
     154:	8f a7       	std	Y+47, r24	; 0x2f
     156:	3f c0       	rjmp	.+126    	; 0x1d6 <LCDsendChar+0x10c>
	else if (__tmp > 65535)
     158:	69 a9       	ldd	r22, Y+49	; 0x31
     15a:	7a a9       	ldd	r23, Y+50	; 0x32
     15c:	8b a9       	ldd	r24, Y+51	; 0x33
     15e:	9c a9       	ldd	r25, Y+52	; 0x34
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	3f ef       	ldi	r19, 0xFF	; 255
     164:	4f e7       	ldi	r20, 0x7F	; 127
     166:	57 e4       	ldi	r21, 0x47	; 71
     168:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     16c:	18 16       	cp	r1, r24
     16e:	4c f5       	brge	.+82     	; 0x1c2 <LCDsendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     170:	6d a9       	ldd	r22, Y+53	; 0x35
     172:	7e a9       	ldd	r23, Y+54	; 0x36
     174:	8f a9       	ldd	r24, Y+55	; 0x37
     176:	98 ad       	ldd	r25, Y+56	; 0x38
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	40 e2       	ldi	r20, 0x20	; 32
     17e:	51 e4       	ldi	r21, 0x41	; 65
     180:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     184:	dc 01       	movw	r26, r24
     186:	cb 01       	movw	r24, r22
     188:	bc 01       	movw	r22, r24
     18a:	cd 01       	movw	r24, r26
     18c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     190:	dc 01       	movw	r26, r24
     192:	cb 01       	movw	r24, r22
     194:	98 ab       	std	Y+48, r25	; 0x30
     196:	8f a7       	std	Y+47, r24	; 0x2f
     198:	0f c0       	rjmp	.+30     	; 0x1b8 <LCDsendChar+0xee>
     19a:	84 e6       	ldi	r24, 0x64	; 100
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	9e a7       	std	Y+46, r25	; 0x2e
     1a0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a2:	8d a5       	ldd	r24, Y+45	; 0x2d
     1a4:	9e a5       	ldd	r25, Y+46	; 0x2e
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCDsendChar+0xdc>
     1aa:	9e a7       	std	Y+46, r25	; 0x2e
     1ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ae:	8f a5       	ldd	r24, Y+47	; 0x2f
     1b0:	98 a9       	ldd	r25, Y+48	; 0x30
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	98 ab       	std	Y+48, r25	; 0x30
     1b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b8:	8f a5       	ldd	r24, Y+47	; 0x2f
     1ba:	98 a9       	ldd	r25, Y+48	; 0x30
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	69 f7       	brne	.-38     	; 0x19a <LCDsendChar+0xd0>
     1c0:	14 c0       	rjmp	.+40     	; 0x1ea <LCDsendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1c2:	69 a9       	ldd	r22, Y+49	; 0x31
     1c4:	7a a9       	ldd	r23, Y+50	; 0x32
     1c6:	8b a9       	ldd	r24, Y+51	; 0x33
     1c8:	9c a9       	ldd	r25, Y+52	; 0x34
     1ca:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     1ce:	dc 01       	movw	r26, r24
     1d0:	cb 01       	movw	r24, r22
     1d2:	98 ab       	std	Y+48, r25	; 0x30
     1d4:	8f a7       	std	Y+47, r24	; 0x2f
     1d6:	8f a5       	ldd	r24, Y+47	; 0x2f
     1d8:	98 a9       	ldd	r25, Y+48	; 0x30
     1da:	9c a7       	std	Y+44, r25	; 0x2c
     1dc:	8b a7       	std	Y+43, r24	; 0x2b
     1de:	8b a5       	ldd	r24, Y+43	; 0x2b
     1e0:	9c a5       	ldd	r25, Y+44	; 0x2c
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDsendChar+0x118>
     1e6:	9c a7       	std	Y+44, r25	; 0x2c
     1e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     1ea:	a5 e3       	ldi	r26, 0x35	; 53
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e5 e3       	ldi	r30, 0x35	; 53
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	8b 7f       	andi	r24, 0xFB	; 251
     1f6:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     1f8:	a5 e3       	ldi	r26, 0x35	; 53
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e5 e3       	ldi	r30, 0x35	; 53
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8e 7f       	andi	r24, 0xFE	; 254
     204:	8c 93       	st	X, r24
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	a0 e8       	ldi	r26, 0x80	; 128
     20c:	bf e3       	ldi	r27, 0x3F	; 63
     20e:	8f a3       	std	Y+39, r24	; 0x27
     210:	98 a7       	std	Y+40, r25	; 0x28
     212:	a9 a7       	std	Y+41, r26	; 0x29
     214:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     216:	6f a1       	ldd	r22, Y+39	; 0x27
     218:	78 a5       	ldd	r23, Y+40	; 0x28
     21a:	89 a5       	ldd	r24, Y+41	; 0x29
     21c:	9a a5       	ldd	r25, Y+42	; 0x2a
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	4a e7       	ldi	r20, 0x7A	; 122
     224:	54 e4       	ldi	r21, 0x44	; 68
     226:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     22a:	dc 01       	movw	r26, r24
     22c:	cb 01       	movw	r24, r22
     22e:	8b a3       	std	Y+35, r24	; 0x23
     230:	9c a3       	std	Y+36, r25	; 0x24
     232:	ad a3       	std	Y+37, r26	; 0x25
     234:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     236:	6b a1       	ldd	r22, Y+35	; 0x23
     238:	7c a1       	ldd	r23, Y+36	; 0x24
     23a:	8d a1       	ldd	r24, Y+37	; 0x25
     23c:	9e a1       	ldd	r25, Y+38	; 0x26
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	40 e8       	ldi	r20, 0x80	; 128
     244:	5f e3       	ldi	r21, 0x3F	; 63
     246:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     24a:	88 23       	and	r24, r24
     24c:	2c f4       	brge	.+10     	; 0x258 <LCDsendChar+0x18e>
		__ticks = 1;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9a a3       	std	Y+34, r25	; 0x22
     254:	89 a3       	std	Y+33, r24	; 0x21
     256:	3f c0       	rjmp	.+126    	; 0x2d6 <LCDsendChar+0x20c>
	else if (__tmp > 65535)
     258:	6b a1       	ldd	r22, Y+35	; 0x23
     25a:	7c a1       	ldd	r23, Y+36	; 0x24
     25c:	8d a1       	ldd	r24, Y+37	; 0x25
     25e:	9e a1       	ldd	r25, Y+38	; 0x26
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	3f ef       	ldi	r19, 0xFF	; 255
     264:	4f e7       	ldi	r20, 0x7F	; 127
     266:	57 e4       	ldi	r21, 0x47	; 71
     268:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     26c:	18 16       	cp	r1, r24
     26e:	4c f5       	brge	.+82     	; 0x2c2 <LCDsendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     270:	6f a1       	ldd	r22, Y+39	; 0x27
     272:	78 a5       	ldd	r23, Y+40	; 0x28
     274:	89 a5       	ldd	r24, Y+41	; 0x29
     276:	9a a5       	ldd	r25, Y+42	; 0x2a
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e2       	ldi	r20, 0x20	; 32
     27e:	51 e4       	ldi	r21, 0x41	; 65
     280:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     290:	dc 01       	movw	r26, r24
     292:	cb 01       	movw	r24, r22
     294:	9a a3       	std	Y+34, r25	; 0x22
     296:	89 a3       	std	Y+33, r24	; 0x21
     298:	0f c0       	rjmp	.+30     	; 0x2b8 <LCDsendChar+0x1ee>
     29a:	84 e6       	ldi	r24, 0x64	; 100
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	98 a3       	std	Y+32, r25	; 0x20
     2a0:	8f 8f       	std	Y+31, r24	; 0x1f
     2a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2a4:	98 a1       	ldd	r25, Y+32	; 0x20
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCDsendChar+0x1dc>
     2aa:	98 a3       	std	Y+32, r25	; 0x20
     2ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ae:	89 a1       	ldd	r24, Y+33	; 0x21
     2b0:	9a a1       	ldd	r25, Y+34	; 0x22
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	9a a3       	std	Y+34, r25	; 0x22
     2b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b8:	89 a1       	ldd	r24, Y+33	; 0x21
     2ba:	9a a1       	ldd	r25, Y+34	; 0x22
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	69 f7       	brne	.-38     	; 0x29a <LCDsendChar+0x1d0>
     2c0:	14 c0       	rjmp	.+40     	; 0x2ea <LCDsendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2c2:	6b a1       	ldd	r22, Y+35	; 0x23
     2c4:	7c a1       	ldd	r23, Y+36	; 0x24
     2c6:	8d a1       	ldd	r24, Y+37	; 0x25
     2c8:	9e a1       	ldd	r25, Y+38	; 0x26
     2ca:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     2ce:	dc 01       	movw	r26, r24
     2d0:	cb 01       	movw	r24, r22
     2d2:	9a a3       	std	Y+34, r25	; 0x22
     2d4:	89 a3       	std	Y+33, r24	; 0x21
     2d6:	89 a1       	ldd	r24, Y+33	; 0x21
     2d8:	9a a1       	ldd	r25, Y+34	; 0x22
     2da:	9e 8f       	std	Y+30, r25	; 0x1e
     2dc:	8d 8f       	std	Y+29, r24	; 0x1d
     2de:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCDsendChar+0x218>
     2e6:	9e 8f       	std	Y+30, r25	; 0x1e
     2e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     2ea:	e5 e3       	ldi	r30, 0x35	; 53
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	89 ad       	ldd	r24, Y+57	; 0x39
     2f0:	88 2f       	mov	r24, r24
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	82 95       	swap	r24
     2f6:	92 95       	swap	r25
     2f8:	90 7f       	andi	r25, 0xF0	; 240
     2fa:	98 27       	eor	r25, r24
     2fc:	80 7f       	andi	r24, 0xF0	; 240
     2fe:	98 27       	eor	r25, r24
     300:	80 83       	st	Z, r24
	LCP|=1<<LCD_RS;
     302:	a5 e3       	ldi	r26, 0x35	; 53
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	e5 e3       	ldi	r30, 0x35	; 53
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	81 60       	ori	r24, 0x01	; 1
     30e:	8c 93       	st	X, r24
	LCP|=1<<LCD_E;		
     310:	a5 e3       	ldi	r26, 0x35	; 53
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	e5 e3       	ldi	r30, 0x35	; 53
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	8c 93       	st	X, r24
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	a0 e8       	ldi	r26, 0x80	; 128
     324:	bf e3       	ldi	r27, 0x3F	; 63
     326:	89 8f       	std	Y+25, r24	; 0x19
     328:	9a 8f       	std	Y+26, r25	; 0x1a
     32a:	ab 8f       	std	Y+27, r26	; 0x1b
     32c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     32e:	69 8d       	ldd	r22, Y+25	; 0x19
     330:	7a 8d       	ldd	r23, Y+26	; 0x1a
     332:	8b 8d       	ldd	r24, Y+27	; 0x1b
     334:	9c 8d       	ldd	r25, Y+28	; 0x1c
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	4a e7       	ldi	r20, 0x7A	; 122
     33c:	54 e4       	ldi	r21, 0x44	; 68
     33e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	8d 8b       	std	Y+21, r24	; 0x15
     348:	9e 8b       	std	Y+22, r25	; 0x16
     34a:	af 8b       	std	Y+23, r26	; 0x17
     34c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     34e:	6d 89       	ldd	r22, Y+21	; 0x15
     350:	7e 89       	ldd	r23, Y+22	; 0x16
     352:	8f 89       	ldd	r24, Y+23	; 0x17
     354:	98 8d       	ldd	r25, Y+24	; 0x18
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e8       	ldi	r20, 0x80	; 128
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     362:	88 23       	and	r24, r24
     364:	2c f4       	brge	.+10     	; 0x370 <LCDsendChar+0x2a6>
		__ticks = 1;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	9c 8b       	std	Y+20, r25	; 0x14
     36c:	8b 8b       	std	Y+19, r24	; 0x13
     36e:	3f c0       	rjmp	.+126    	; 0x3ee <LCDsendChar+0x324>
	else if (__tmp > 65535)
     370:	6d 89       	ldd	r22, Y+21	; 0x15
     372:	7e 89       	ldd	r23, Y+22	; 0x16
     374:	8f 89       	ldd	r24, Y+23	; 0x17
     376:	98 8d       	ldd	r25, Y+24	; 0x18
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	3f ef       	ldi	r19, 0xFF	; 255
     37c:	4f e7       	ldi	r20, 0x7F	; 127
     37e:	57 e4       	ldi	r21, 0x47	; 71
     380:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     384:	18 16       	cp	r1, r24
     386:	4c f5       	brge	.+82     	; 0x3da <LCDsendChar+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     388:	69 8d       	ldd	r22, Y+25	; 0x19
     38a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     38c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     38e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e2       	ldi	r20, 0x20	; 32
     396:	51 e4       	ldi	r21, 0x41	; 65
     398:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     39c:	dc 01       	movw	r26, r24
     39e:	cb 01       	movw	r24, r22
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	9c 8b       	std	Y+20, r25	; 0x14
     3ae:	8b 8b       	std	Y+19, r24	; 0x13
     3b0:	0f c0       	rjmp	.+30     	; 0x3d0 <LCDsendChar+0x306>
     3b2:	84 e6       	ldi	r24, 0x64	; 100
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	9a 8b       	std	Y+18, r25	; 0x12
     3b8:	89 8b       	std	Y+17, r24	; 0x11
     3ba:	89 89       	ldd	r24, Y+17	; 0x11
     3bc:	9a 89       	ldd	r25, Y+18	; 0x12
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <LCDsendChar+0x2f4>
     3c2:	9a 8b       	std	Y+18, r25	; 0x12
     3c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3c6:	8b 89       	ldd	r24, Y+19	; 0x13
     3c8:	9c 89       	ldd	r25, Y+20	; 0x14
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	9c 8b       	std	Y+20, r25	; 0x14
     3ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d0:	8b 89       	ldd	r24, Y+19	; 0x13
     3d2:	9c 89       	ldd	r25, Y+20	; 0x14
     3d4:	00 97       	sbiw	r24, 0x00	; 0
     3d6:	69 f7       	brne	.-38     	; 0x3b2 <LCDsendChar+0x2e8>
     3d8:	14 c0       	rjmp	.+40     	; 0x402 <LCDsendChar+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3da:	6d 89       	ldd	r22, Y+21	; 0x15
     3dc:	7e 89       	ldd	r23, Y+22	; 0x16
     3de:	8f 89       	ldd	r24, Y+23	; 0x17
     3e0:	98 8d       	ldd	r25, Y+24	; 0x18
     3e2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     3e6:	dc 01       	movw	r26, r24
     3e8:	cb 01       	movw	r24, r22
     3ea:	9c 8b       	std	Y+20, r25	; 0x14
     3ec:	8b 8b       	std	Y+19, r24	; 0x13
     3ee:	8b 89       	ldd	r24, Y+19	; 0x13
     3f0:	9c 89       	ldd	r25, Y+20	; 0x14
     3f2:	98 8b       	std	Y+16, r25	; 0x10
     3f4:	8f 87       	std	Y+15, r24	; 0x0f
     3f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     3f8:	98 89       	ldd	r25, Y+16	; 0x10
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCDsendChar+0x330>
     3fe:	98 8b       	std	Y+16, r25	; 0x10
     400:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     402:	a5 e3       	ldi	r26, 0x35	; 53
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e5 e3       	ldi	r30, 0x35	; 53
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	8b 7f       	andi	r24, 0xFB	; 251
     40e:	8c 93       	st	X, r24
	LCP&=~(1<<LCD_RS);
     410:	a5 e3       	ldi	r26, 0x35	; 53
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e5 e3       	ldi	r30, 0x35	; 53
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	8e 7f       	andi	r24, 0xFE	; 254
     41c:	8c 93       	st	X, r24
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	a0 e8       	ldi	r26, 0x80	; 128
     424:	bf e3       	ldi	r27, 0x3F	; 63
     426:	8b 87       	std	Y+11, r24	; 0x0b
     428:	9c 87       	std	Y+12, r25	; 0x0c
     42a:	ad 87       	std	Y+13, r26	; 0x0d
     42c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     42e:	6b 85       	ldd	r22, Y+11	; 0x0b
     430:	7c 85       	ldd	r23, Y+12	; 0x0c
     432:	8d 85       	ldd	r24, Y+13	; 0x0d
     434:	9e 85       	ldd	r25, Y+14	; 0x0e
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	4a e7       	ldi	r20, 0x7A	; 122
     43c:	54 e4       	ldi	r21, 0x44	; 68
     43e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	8f 83       	std	Y+7, r24	; 0x07
     448:	98 87       	std	Y+8, r25	; 0x08
     44a:	a9 87       	std	Y+9, r26	; 0x09
     44c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     44e:	6f 81       	ldd	r22, Y+7	; 0x07
     450:	78 85       	ldd	r23, Y+8	; 0x08
     452:	89 85       	ldd	r24, Y+9	; 0x09
     454:	9a 85       	ldd	r25, Y+10	; 0x0a
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e8       	ldi	r20, 0x80	; 128
     45c:	5f e3       	ldi	r21, 0x3F	; 63
     45e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     462:	88 23       	and	r24, r24
     464:	2c f4       	brge	.+10     	; 0x470 <__stack+0x11>
		__ticks = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	9e 83       	std	Y+6, r25	; 0x06
     46c:	8d 83       	std	Y+5, r24	; 0x05
     46e:	3f c0       	rjmp	.+126    	; 0x4ee <__stack+0x8f>
	else if (__tmp > 65535)
     470:	6f 81       	ldd	r22, Y+7	; 0x07
     472:	78 85       	ldd	r23, Y+8	; 0x08
     474:	89 85       	ldd	r24, Y+9	; 0x09
     476:	9a 85       	ldd	r25, Y+10	; 0x0a
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	3f ef       	ldi	r19, 0xFF	; 255
     47c:	4f e7       	ldi	r20, 0x7F	; 127
     47e:	57 e4       	ldi	r21, 0x47	; 71
     480:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     484:	18 16       	cp	r1, r24
     486:	4c f5       	brge	.+82     	; 0x4da <__stack+0x7b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     488:	6b 85       	ldd	r22, Y+11	; 0x0b
     48a:	7c 85       	ldd	r23, Y+12	; 0x0c
     48c:	8d 85       	ldd	r24, Y+13	; 0x0d
     48e:	9e 85       	ldd	r25, Y+14	; 0x0e
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e2       	ldi	r20, 0x20	; 32
     496:	51 e4       	ldi	r21, 0x41	; 65
     498:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	9e 83       	std	Y+6, r25	; 0x06
     4ae:	8d 83       	std	Y+5, r24	; 0x05
     4b0:	0f c0       	rjmp	.+30     	; 0x4d0 <__stack+0x71>
     4b2:	84 e6       	ldi	r24, 0x64	; 100
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	9c 83       	std	Y+4, r25	; 0x04
     4b8:	8b 83       	std	Y+3, r24	; 0x03
     4ba:	8b 81       	ldd	r24, Y+3	; 0x03
     4bc:	9c 81       	ldd	r25, Y+4	; 0x04
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <__stack+0x5f>
     4c2:	9c 83       	std	Y+4, r25	; 0x04
     4c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c6:	8d 81       	ldd	r24, Y+5	; 0x05
     4c8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	9e 83       	std	Y+6, r25	; 0x06
     4ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d0:	8d 81       	ldd	r24, Y+5	; 0x05
     4d2:	9e 81       	ldd	r25, Y+6	; 0x06
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	69 f7       	brne	.-38     	; 0x4b2 <__stack+0x53>
     4d8:	14 c0       	rjmp	.+40     	; 0x502 <__stack+0xa3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4da:	6f 81       	ldd	r22, Y+7	; 0x07
     4dc:	78 85       	ldd	r23, Y+8	; 0x08
     4de:	89 85       	ldd	r24, Y+9	; 0x09
     4e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4e2:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	9e 83       	std	Y+6, r25	; 0x06
     4ec:	8d 83       	std	Y+5, r24	; 0x05
     4ee:	8d 81       	ldd	r24, Y+5	; 0x05
     4f0:	9e 81       	ldd	r25, Y+6	; 0x06
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <__stack+0x9b>
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
     502:	e9 96       	adiw	r28, 0x39	; 57
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	cf 91       	pop	r28
     510:	df 91       	pop	r29
     512:	08 95       	ret

00000514 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     514:	df 93       	push	r29
     516:	cf 93       	push	r28
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	e9 97       	sbiw	r28, 0x39	; 57
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	89 af       	std	Y+57, r24	; 0x39

	LDP=(cmd&0b11110000);
     52a:	e5 e3       	ldi	r30, 0x35	; 53
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	89 ad       	ldd	r24, Y+57	; 0x39
     530:	80 7f       	andi	r24, 0xF0	; 240
     532:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     534:	a5 e3       	ldi	r26, 0x35	; 53
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	e5 e3       	ldi	r30, 0x35	; 53
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	84 60       	ori	r24, 0x04	; 4
     540:	8c 93       	st	X, r24
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a0 e8       	ldi	r26, 0x80	; 128
     548:	bf e3       	ldi	r27, 0x3F	; 63
     54a:	8d ab       	std	Y+53, r24	; 0x35
     54c:	9e ab       	std	Y+54, r25	; 0x36
     54e:	af ab       	std	Y+55, r26	; 0x37
     550:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     552:	6d a9       	ldd	r22, Y+53	; 0x35
     554:	7e a9       	ldd	r23, Y+54	; 0x36
     556:	8f a9       	ldd	r24, Y+55	; 0x37
     558:	98 ad       	ldd	r25, Y+56	; 0x38
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	4a e7       	ldi	r20, 0x7A	; 122
     560:	54 e4       	ldi	r21, 0x44	; 68
     562:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	89 ab       	std	Y+49, r24	; 0x31
     56c:	9a ab       	std	Y+50, r25	; 0x32
     56e:	ab ab       	std	Y+51, r26	; 0x33
     570:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     572:	69 a9       	ldd	r22, Y+49	; 0x31
     574:	7a a9       	ldd	r23, Y+50	; 0x32
     576:	8b a9       	ldd	r24, Y+51	; 0x33
     578:	9c a9       	ldd	r25, Y+52	; 0x34
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e8       	ldi	r20, 0x80	; 128
     580:	5f e3       	ldi	r21, 0x3F	; 63
     582:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     586:	88 23       	and	r24, r24
     588:	2c f4       	brge	.+10     	; 0x594 <LCDsendCommand+0x80>
		__ticks = 1;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	98 ab       	std	Y+48, r25	; 0x30
     590:	8f a7       	std	Y+47, r24	; 0x2f
     592:	3f c0       	rjmp	.+126    	; 0x612 <LCDsendCommand+0xfe>
	else if (__tmp > 65535)
     594:	69 a9       	ldd	r22, Y+49	; 0x31
     596:	7a a9       	ldd	r23, Y+50	; 0x32
     598:	8b a9       	ldd	r24, Y+51	; 0x33
     59a:	9c a9       	ldd	r25, Y+52	; 0x34
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	3f ef       	ldi	r19, 0xFF	; 255
     5a0:	4f e7       	ldi	r20, 0x7F	; 127
     5a2:	57 e4       	ldi	r21, 0x47	; 71
     5a4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	4c f5       	brge	.+82     	; 0x5fe <LCDsendCommand+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ac:	6d a9       	ldd	r22, Y+53	; 0x35
     5ae:	7e a9       	ldd	r23, Y+54	; 0x36
     5b0:	8f a9       	ldd	r24, Y+55	; 0x37
     5b2:	98 ad       	ldd	r25, Y+56	; 0x38
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e2       	ldi	r20, 0x20	; 32
     5ba:	51 e4       	ldi	r21, 0x41	; 65
     5bc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	bc 01       	movw	r22, r24
     5c6:	cd 01       	movw	r24, r26
     5c8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	98 ab       	std	Y+48, r25	; 0x30
     5d2:	8f a7       	std	Y+47, r24	; 0x2f
     5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <LCDsendCommand+0xe0>
     5d6:	84 e6       	ldi	r24, 0x64	; 100
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	9e a7       	std	Y+46, r25	; 0x2e
     5dc:	8d a7       	std	Y+45, r24	; 0x2d
     5de:	8d a5       	ldd	r24, Y+45	; 0x2d
     5e0:	9e a5       	ldd	r25, Y+46	; 0x2e
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LCDsendCommand+0xce>
     5e6:	9e a7       	std	Y+46, r25	; 0x2e
     5e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ea:	8f a5       	ldd	r24, Y+47	; 0x2f
     5ec:	98 a9       	ldd	r25, Y+48	; 0x30
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	98 ab       	std	Y+48, r25	; 0x30
     5f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f4:	8f a5       	ldd	r24, Y+47	; 0x2f
     5f6:	98 a9       	ldd	r25, Y+48	; 0x30
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	69 f7       	brne	.-38     	; 0x5d6 <LCDsendCommand+0xc2>
     5fc:	14 c0       	rjmp	.+40     	; 0x626 <LCDsendCommand+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fe:	69 a9       	ldd	r22, Y+49	; 0x31
     600:	7a a9       	ldd	r23, Y+50	; 0x32
     602:	8b a9       	ldd	r24, Y+51	; 0x33
     604:	9c a9       	ldd	r25, Y+52	; 0x34
     606:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	98 ab       	std	Y+48, r25	; 0x30
     610:	8f a7       	std	Y+47, r24	; 0x2f
     612:	8f a5       	ldd	r24, Y+47	; 0x2f
     614:	98 a9       	ldd	r25, Y+48	; 0x30
     616:	9c a7       	std	Y+44, r25	; 0x2c
     618:	8b a7       	std	Y+43, r24	; 0x2b
     61a:	8b a5       	ldd	r24, Y+43	; 0x2b
     61c:	9c a5       	ldd	r25, Y+44	; 0x2c
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <LCDsendCommand+0x10a>
     622:	9c a7       	std	Y+44, r25	; 0x2c
     624:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     626:	a5 e3       	ldi	r26, 0x35	; 53
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	e5 e3       	ldi	r30, 0x35	; 53
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	8b 7f       	andi	r24, 0xFB	; 251
     632:	8c 93       	st	X, r24
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	a0 e8       	ldi	r26, 0x80	; 128
     63a:	bf e3       	ldi	r27, 0x3F	; 63
     63c:	8f a3       	std	Y+39, r24	; 0x27
     63e:	98 a7       	std	Y+40, r25	; 0x28
     640:	a9 a7       	std	Y+41, r26	; 0x29
     642:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     644:	6f a1       	ldd	r22, Y+39	; 0x27
     646:	78 a5       	ldd	r23, Y+40	; 0x28
     648:	89 a5       	ldd	r24, Y+41	; 0x29
     64a:	9a a5       	ldd	r25, Y+42	; 0x2a
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	4a e7       	ldi	r20, 0x7A	; 122
     652:	54 e4       	ldi	r21, 0x44	; 68
     654:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	8b a3       	std	Y+35, r24	; 0x23
     65e:	9c a3       	std	Y+36, r25	; 0x24
     660:	ad a3       	std	Y+37, r26	; 0x25
     662:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     664:	6b a1       	ldd	r22, Y+35	; 0x23
     666:	7c a1       	ldd	r23, Y+36	; 0x24
     668:	8d a1       	ldd	r24, Y+37	; 0x25
     66a:	9e a1       	ldd	r25, Y+38	; 0x26
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e8       	ldi	r20, 0x80	; 128
     672:	5f e3       	ldi	r21, 0x3F	; 63
     674:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     678:	88 23       	and	r24, r24
     67a:	2c f4       	brge	.+10     	; 0x686 <LCDsendCommand+0x172>
		__ticks = 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	9a a3       	std	Y+34, r25	; 0x22
     682:	89 a3       	std	Y+33, r24	; 0x21
     684:	3f c0       	rjmp	.+126    	; 0x704 <LCDsendCommand+0x1f0>
	else if (__tmp > 65535)
     686:	6b a1       	ldd	r22, Y+35	; 0x23
     688:	7c a1       	ldd	r23, Y+36	; 0x24
     68a:	8d a1       	ldd	r24, Y+37	; 0x25
     68c:	9e a1       	ldd	r25, Y+38	; 0x26
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	3f ef       	ldi	r19, 0xFF	; 255
     692:	4f e7       	ldi	r20, 0x7F	; 127
     694:	57 e4       	ldi	r21, 0x47	; 71
     696:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     69a:	18 16       	cp	r1, r24
     69c:	4c f5       	brge	.+82     	; 0x6f0 <LCDsendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     69e:	6f a1       	ldd	r22, Y+39	; 0x27
     6a0:	78 a5       	ldd	r23, Y+40	; 0x28
     6a2:	89 a5       	ldd	r24, Y+41	; 0x29
     6a4:	9a a5       	ldd	r25, Y+42	; 0x2a
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e2       	ldi	r20, 0x20	; 32
     6ac:	51 e4       	ldi	r21, 0x41	; 65
     6ae:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	9a a3       	std	Y+34, r25	; 0x22
     6c4:	89 a3       	std	Y+33, r24	; 0x21
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <LCDsendCommand+0x1d2>
     6c8:	84 e6       	ldi	r24, 0x64	; 100
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	98 a3       	std	Y+32, r25	; 0x20
     6ce:	8f 8f       	std	Y+31, r24	; 0x1f
     6d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6d2:	98 a1       	ldd	r25, Y+32	; 0x20
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <LCDsendCommand+0x1c0>
     6d8:	98 a3       	std	Y+32, r25	; 0x20
     6da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6dc:	89 a1       	ldd	r24, Y+33	; 0x21
     6de:	9a a1       	ldd	r25, Y+34	; 0x22
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	9a a3       	std	Y+34, r25	; 0x22
     6e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e6:	89 a1       	ldd	r24, Y+33	; 0x21
     6e8:	9a a1       	ldd	r25, Y+34	; 0x22
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	69 f7       	brne	.-38     	; 0x6c8 <LCDsendCommand+0x1b4>
     6ee:	14 c0       	rjmp	.+40     	; 0x718 <LCDsendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6f0:	6b a1       	ldd	r22, Y+35	; 0x23
     6f2:	7c a1       	ldd	r23, Y+36	; 0x24
     6f4:	8d a1       	ldd	r24, Y+37	; 0x25
     6f6:	9e a1       	ldd	r25, Y+38	; 0x26
     6f8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	9a a3       	std	Y+34, r25	; 0x22
     702:	89 a3       	std	Y+33, r24	; 0x21
     704:	89 a1       	ldd	r24, Y+33	; 0x21
     706:	9a a1       	ldd	r25, Y+34	; 0x22
     708:	9e 8f       	std	Y+30, r25	; 0x1e
     70a:	8d 8f       	std	Y+29, r24	; 0x1d
     70c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     70e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <LCDsendCommand+0x1fc>
     714:	9e 8f       	std	Y+30, r25	; 0x1e
     716:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     718:	e5 e3       	ldi	r30, 0x35	; 53
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	89 ad       	ldd	r24, Y+57	; 0x39
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	82 95       	swap	r24
     724:	92 95       	swap	r25
     726:	90 7f       	andi	r25, 0xF0	; 240
     728:	98 27       	eor	r25, r24
     72a:	80 7f       	andi	r24, 0xF0	; 240
     72c:	98 27       	eor	r25, r24
     72e:	80 83       	st	Z, r24
	LCP|=1<<LCD_E;		
     730:	a5 e3       	ldi	r26, 0x35	; 53
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	e5 e3       	ldi	r30, 0x35	; 53
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	84 60       	ori	r24, 0x04	; 4
     73c:	8c 93       	st	X, r24
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	a0 e8       	ldi	r26, 0x80	; 128
     744:	bf e3       	ldi	r27, 0x3F	; 63
     746:	89 8f       	std	Y+25, r24	; 0x19
     748:	9a 8f       	std	Y+26, r25	; 0x1a
     74a:	ab 8f       	std	Y+27, r26	; 0x1b
     74c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     74e:	69 8d       	ldd	r22, Y+25	; 0x19
     750:	7a 8d       	ldd	r23, Y+26	; 0x1a
     752:	8b 8d       	ldd	r24, Y+27	; 0x1b
     754:	9c 8d       	ldd	r25, Y+28	; 0x1c
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	4a e7       	ldi	r20, 0x7A	; 122
     75c:	54 e4       	ldi	r21, 0x44	; 68
     75e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	8d 8b       	std	Y+21, r24	; 0x15
     768:	9e 8b       	std	Y+22, r25	; 0x16
     76a:	af 8b       	std	Y+23, r26	; 0x17
     76c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     76e:	6d 89       	ldd	r22, Y+21	; 0x15
     770:	7e 89       	ldd	r23, Y+22	; 0x16
     772:	8f 89       	ldd	r24, Y+23	; 0x17
     774:	98 8d       	ldd	r25, Y+24	; 0x18
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	40 e8       	ldi	r20, 0x80	; 128
     77c:	5f e3       	ldi	r21, 0x3F	; 63
     77e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     782:	88 23       	and	r24, r24
     784:	2c f4       	brge	.+10     	; 0x790 <LCDsendCommand+0x27c>
		__ticks = 1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	9c 8b       	std	Y+20, r25	; 0x14
     78c:	8b 8b       	std	Y+19, r24	; 0x13
     78e:	3f c0       	rjmp	.+126    	; 0x80e <LCDsendCommand+0x2fa>
	else if (__tmp > 65535)
     790:	6d 89       	ldd	r22, Y+21	; 0x15
     792:	7e 89       	ldd	r23, Y+22	; 0x16
     794:	8f 89       	ldd	r24, Y+23	; 0x17
     796:	98 8d       	ldd	r25, Y+24	; 0x18
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	3f ef       	ldi	r19, 0xFF	; 255
     79c:	4f e7       	ldi	r20, 0x7F	; 127
     79e:	57 e4       	ldi	r21, 0x47	; 71
     7a0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	4c f5       	brge	.+82     	; 0x7fa <LCDsendCommand+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a8:	69 8d       	ldd	r22, Y+25	; 0x19
     7aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e2       	ldi	r20, 0x20	; 32
     7b6:	51 e4       	ldi	r21, 0x41	; 65
     7b8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	9c 8b       	std	Y+20, r25	; 0x14
     7ce:	8b 8b       	std	Y+19, r24	; 0x13
     7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <LCDsendCommand+0x2dc>
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	9a 8b       	std	Y+18, r25	; 0x12
     7d8:	89 8b       	std	Y+17, r24	; 0x11
     7da:	89 89       	ldd	r24, Y+17	; 0x11
     7dc:	9a 89       	ldd	r25, Y+18	; 0x12
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <LCDsendCommand+0x2ca>
     7e2:	9a 8b       	std	Y+18, r25	; 0x12
     7e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	8b 89       	ldd	r24, Y+19	; 0x13
     7e8:	9c 89       	ldd	r25, Y+20	; 0x14
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	9c 8b       	std	Y+20, r25	; 0x14
     7ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f0:	8b 89       	ldd	r24, Y+19	; 0x13
     7f2:	9c 89       	ldd	r25, Y+20	; 0x14
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	69 f7       	brne	.-38     	; 0x7d2 <LCDsendCommand+0x2be>
     7f8:	14 c0       	rjmp	.+40     	; 0x822 <LCDsendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fa:	6d 89       	ldd	r22, Y+21	; 0x15
     7fc:	7e 89       	ldd	r23, Y+22	; 0x16
     7fe:	8f 89       	ldd	r24, Y+23	; 0x17
     800:	98 8d       	ldd	r25, Y+24	; 0x18
     802:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	9c 8b       	std	Y+20, r25	; 0x14
     80c:	8b 8b       	std	Y+19, r24	; 0x13
     80e:	8b 89       	ldd	r24, Y+19	; 0x13
     810:	9c 89       	ldd	r25, Y+20	; 0x14
     812:	98 8b       	std	Y+16, r25	; 0x10
     814:	8f 87       	std	Y+15, r24	; 0x0f
     816:	8f 85       	ldd	r24, Y+15	; 0x0f
     818:	98 89       	ldd	r25, Y+16	; 0x10
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <LCDsendCommand+0x306>
     81e:	98 8b       	std	Y+16, r25	; 0x10
     820:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     822:	a5 e3       	ldi	r26, 0x35	; 53
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e5 e3       	ldi	r30, 0x35	; 53
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	8b 7f       	andi	r24, 0xFB	; 251
     82e:	8c 93       	st	X, r24
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	a0 e8       	ldi	r26, 0x80	; 128
     836:	bf e3       	ldi	r27, 0x3F	; 63
     838:	8b 87       	std	Y+11, r24	; 0x0b
     83a:	9c 87       	std	Y+12, r25	; 0x0c
     83c:	ad 87       	std	Y+13, r26	; 0x0d
     83e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     840:	6b 85       	ldd	r22, Y+11	; 0x0b
     842:	7c 85       	ldd	r23, Y+12	; 0x0c
     844:	8d 85       	ldd	r24, Y+13	; 0x0d
     846:	9e 85       	ldd	r25, Y+14	; 0x0e
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	4a e7       	ldi	r20, 0x7A	; 122
     84e:	54 e4       	ldi	r21, 0x44	; 68
     850:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     854:	dc 01       	movw	r26, r24
     856:	cb 01       	movw	r24, r22
     858:	8f 83       	std	Y+7, r24	; 0x07
     85a:	98 87       	std	Y+8, r25	; 0x08
     85c:	a9 87       	std	Y+9, r26	; 0x09
     85e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     860:	6f 81       	ldd	r22, Y+7	; 0x07
     862:	78 85       	ldd	r23, Y+8	; 0x08
     864:	89 85       	ldd	r24, Y+9	; 0x09
     866:	9a 85       	ldd	r25, Y+10	; 0x0a
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e8       	ldi	r20, 0x80	; 128
     86e:	5f e3       	ldi	r21, 0x3F	; 63
     870:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     874:	88 23       	and	r24, r24
     876:	2c f4       	brge	.+10     	; 0x882 <LCDsendCommand+0x36e>
		__ticks = 1;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	9e 83       	std	Y+6, r25	; 0x06
     87e:	8d 83       	std	Y+5, r24	; 0x05
     880:	3f c0       	rjmp	.+126    	; 0x900 <LCDsendCommand+0x3ec>
	else if (__tmp > 65535)
     882:	6f 81       	ldd	r22, Y+7	; 0x07
     884:	78 85       	ldd	r23, Y+8	; 0x08
     886:	89 85       	ldd	r24, Y+9	; 0x09
     888:	9a 85       	ldd	r25, Y+10	; 0x0a
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	3f ef       	ldi	r19, 0xFF	; 255
     88e:	4f e7       	ldi	r20, 0x7F	; 127
     890:	57 e4       	ldi	r21, 0x47	; 71
     892:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     896:	18 16       	cp	r1, r24
     898:	4c f5       	brge	.+82     	; 0x8ec <LCDsendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     89a:	6b 85       	ldd	r22, Y+11	; 0x0b
     89c:	7c 85       	ldd	r23, Y+12	; 0x0c
     89e:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e2       	ldi	r20, 0x20	; 32
     8a8:	51 e4       	ldi	r21, 0x41	; 65
     8aa:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     8ae:	dc 01       	movw	r26, r24
     8b0:	cb 01       	movw	r24, r22
     8b2:	bc 01       	movw	r22, r24
     8b4:	cd 01       	movw	r24, r26
     8b6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	9e 83       	std	Y+6, r25	; 0x06
     8c0:	8d 83       	std	Y+5, r24	; 0x05
     8c2:	0f c0       	rjmp	.+30     	; 0x8e2 <LCDsendCommand+0x3ce>
     8c4:	84 e6       	ldi	r24, 0x64	; 100
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	9c 83       	std	Y+4, r25	; 0x04
     8ca:	8b 83       	std	Y+3, r24	; 0x03
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <LCDsendCommand+0x3bc>
     8d4:	9c 83       	std	Y+4, r25	; 0x04
     8d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d8:	8d 81       	ldd	r24, Y+5	; 0x05
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	9e 83       	std	Y+6, r25	; 0x06
     8e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e2:	8d 81       	ldd	r24, Y+5	; 0x05
     8e4:	9e 81       	ldd	r25, Y+6	; 0x06
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	69 f7       	brne	.-38     	; 0x8c4 <LCDsendCommand+0x3b0>
     8ea:	14 c0       	rjmp	.+40     	; 0x914 <LCDsendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ec:	6f 81       	ldd	r22, Y+7	; 0x07
     8ee:	78 85       	ldd	r23, Y+8	; 0x08
     8f0:	89 85       	ldd	r24, Y+9	; 0x09
     8f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
     8fc:	9e 83       	std	Y+6, r25	; 0x06
     8fe:	8d 83       	std	Y+5, r24	; 0x05
     900:	8d 81       	ldd	r24, Y+5	; 0x05
     902:	9e 81       	ldd	r25, Y+6	; 0x06
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <LCDsendCommand+0x3f8>
     910:	9a 83       	std	Y+2, r25	; 0x02
     912:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
     914:	e9 96       	adiw	r28, 0x39	; 57
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	cf 91       	pop	r28
     922:	df 91       	pop	r29
     924:	08 95       	ret

00000926 <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	c4 56       	subi	r28, 0x64	; 100
     934:	d0 40       	sbci	r29, 0x00	; 0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	fe 01       	movw	r30, r28
     942:	e1 5a       	subi	r30, 0xA1	; 161
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 e7       	ldi	r26, 0x70	; 112
     94c:	b1 e4       	ldi	r27, 0x41	; 65
     94e:	80 83       	st	Z, r24
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	a2 83       	std	Z+2, r26	; 0x02
     954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     956:	8e 01       	movw	r16, r28
     958:	05 5a       	subi	r16, 0xA5	; 165
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	fe 01       	movw	r30, r28
     95e:	e1 5a       	subi	r30, 0xA1	; 161
     960:	ff 4f       	sbci	r31, 0xFF	; 255
     962:	60 81       	ld	r22, Z
     964:	71 81       	ldd	r23, Z+1	; 0x01
     966:	82 81       	ldd	r24, Z+2	; 0x02
     968:	93 81       	ldd	r25, Z+3	; 0x03
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	4a e7       	ldi	r20, 0x7A	; 122
     970:	54 e4       	ldi	r21, 0x44	; 68
     972:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	f8 01       	movw	r30, r16
     97c:	80 83       	st	Z, r24
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	a2 83       	std	Z+2, r26	; 0x02
     982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     984:	fe 01       	movw	r30, r28
     986:	e5 5a       	subi	r30, 0xA5	; 165
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e8       	ldi	r20, 0x80	; 128
     998:	5f e3       	ldi	r21, 0x3F	; 63
     99a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     99e:	88 23       	and	r24, r24
     9a0:	44 f4       	brge	.+16     	; 0x9b2 <LCDinit+0x8c>
		__ticks = 1;
     9a2:	fe 01       	movw	r30, r28
     9a4:	e7 5a       	subi	r30, 0xA7	; 167
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
     9b0:	64 c0       	rjmp	.+200    	; 0xa7a <LCDinit+0x154>
	else if (__tmp > 65535)
     9b2:	fe 01       	movw	r30, r28
     9b4:	e5 5a       	subi	r30, 0xA5	; 165
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	60 81       	ld	r22, Z
     9ba:	71 81       	ldd	r23, Z+1	; 0x01
     9bc:	82 81       	ldd	r24, Z+2	; 0x02
     9be:	93 81       	ldd	r25, Z+3	; 0x03
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	3f ef       	ldi	r19, 0xFF	; 255
     9c4:	4f e7       	ldi	r20, 0x7F	; 127
     9c6:	57 e4       	ldi	r21, 0x47	; 71
     9c8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     9cc:	18 16       	cp	r1, r24
     9ce:	0c f0       	brlt	.+2      	; 0x9d2 <LCDinit+0xac>
     9d0:	43 c0       	rjmp	.+134    	; 0xa58 <LCDinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d2:	fe 01       	movw	r30, r28
     9d4:	e1 5a       	subi	r30, 0xA1	; 161
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	60 81       	ld	r22, Z
     9da:	71 81       	ldd	r23, Z+1	; 0x01
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	93 81       	ldd	r25, Z+3	; 0x03
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e2       	ldi	r20, 0x20	; 32
     9e6:	51 e4       	ldi	r21, 0x41	; 65
     9e8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	8e 01       	movw	r16, r28
     9f2:	07 5a       	subi	r16, 0xA7	; 167
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	bc 01       	movw	r22, r24
     9f8:	cd 01       	movw	r24, r26
     9fa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	f8 01       	movw	r30, r16
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	80 83       	st	Z, r24
     a08:	1f c0       	rjmp	.+62     	; 0xa48 <LCDinit+0x122>
     a0a:	fe 01       	movw	r30, r28
     a0c:	e9 5a       	subi	r30, 0xA9	; 169
     a0e:	ff 4f       	sbci	r31, 0xFF	; 255
     a10:	84 e6       	ldi	r24, 0x64	; 100
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
     a18:	fe 01       	movw	r30, r28
     a1a:	e9 5a       	subi	r30, 0xA9	; 169
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCDinit+0xfc>
     a26:	fe 01       	movw	r30, r28
     a28:	e9 5a       	subi	r30, 0xA9	; 169
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	91 83       	std	Z+1, r25	; 0x01
     a2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a30:	de 01       	movw	r26, r28
     a32:	a7 5a       	subi	r26, 0xA7	; 167
     a34:	bf 4f       	sbci	r27, 0xFF	; 255
     a36:	fe 01       	movw	r30, r28
     a38:	e7 5a       	subi	r30, 0xA7	; 167
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	9c 93       	st	X, r25
     a46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a48:	fe 01       	movw	r30, r28
     a4a:	e7 5a       	subi	r30, 0xA7	; 167
     a4c:	ff 4f       	sbci	r31, 0xFF	; 255
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	d1 f6       	brne	.-76     	; 0xa0a <LCDinit+0xe4>
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <LCDinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a58:	8e 01       	movw	r16, r28
     a5a:	07 5a       	subi	r16, 0xA7	; 167
     a5c:	1f 4f       	sbci	r17, 0xFF	; 255
     a5e:	fe 01       	movw	r30, r28
     a60:	e5 5a       	subi	r30, 0xA5	; 165
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	60 81       	ld	r22, Z
     a66:	71 81       	ldd	r23, Z+1	; 0x01
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	93 81       	ldd	r25, Z+3	; 0x03
     a6c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	f8 01       	movw	r30, r16
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
     a7a:	de 01       	movw	r26, r28
     a7c:	ab 5a       	subi	r26, 0xAB	; 171
     a7e:	bf 4f       	sbci	r27, 0xFF	; 255
     a80:	fe 01       	movw	r30, r28
     a82:	e7 5a       	subi	r30, 0xA7	; 167
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	8d 93       	st	X+, r24
     a8c:	9c 93       	st	X, r25
     a8e:	fe 01       	movw	r30, r28
     a90:	eb 5a       	subi	r30, 0xAB	; 171
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <LCDinit+0x172>
     a9c:	fe 01       	movw	r30, r28
     a9e:	eb 5a       	subi	r30, 0xAB	; 171
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	80 83       	st	Z, r24
	_delay_ms(15);
	LDP=0x00;
     aa6:	e5 e3       	ldi	r30, 0x35	; 53
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	10 82       	st	Z, r1
	LCP=0x00;
     aac:	e5 e3       	ldi	r30, 0x35	; 53
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	10 82       	st	Z, r1
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     ab2:	a4 e3       	ldi	r26, 0x34	; 52
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	e4 e3       	ldi	r30, 0x34	; 52
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	80 6f       	ori	r24, 0xF0	; 240
     abe:	8c 93       	st	X, r24
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     ac0:	a4 e3       	ldi	r26, 0x34	; 52
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e4 e3       	ldi	r30, 0x34	; 52
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	87 60       	ori	r24, 0x07	; 7
     acc:	8c 93       	st	X, r24
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ace:	e5 e3       	ldi	r30, 0x35	; 53
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 e3       	ldi	r24, 0x30	; 48
     ad4:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ad6:	a5 e3       	ldi	r26, 0x35	; 53
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	e5 e3       	ldi	r30, 0x35	; 53
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	84 60       	ori	r24, 0x04	; 4
     ae2:	8c 93       	st	X, r24
     ae4:	fe 01       	movw	r30, r28
     ae6:	ef 5a       	subi	r30, 0xAF	; 175
     ae8:	ff 4f       	sbci	r31, 0xFF	; 255
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a0 e8       	ldi	r26, 0x80	; 128
     af0:	bf e3       	ldi	r27, 0x3F	; 63
     af2:	80 83       	st	Z, r24
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	a2 83       	std	Z+2, r26	; 0x02
     af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     afa:	8e 01       	movw	r16, r28
     afc:	03 5b       	subi	r16, 0xB3	; 179
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
     b00:	fe 01       	movw	r30, r28
     b02:	ef 5a       	subi	r30, 0xAF	; 175
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	60 81       	ld	r22, Z
     b08:	71 81       	ldd	r23, Z+1	; 0x01
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	4a e7       	ldi	r20, 0x7A	; 122
     b14:	54 e4       	ldi	r21, 0x44	; 68
     b16:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	f8 01       	movw	r30, r16
     b20:	80 83       	st	Z, r24
     b22:	91 83       	std	Z+1, r25	; 0x01
     b24:	a2 83       	std	Z+2, r26	; 0x02
     b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b28:	fe 01       	movw	r30, r28
     b2a:	e3 5b       	subi	r30, 0xB3	; 179
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	60 81       	ld	r22, Z
     b30:	71 81       	ldd	r23, Z+1	; 0x01
     b32:	82 81       	ldd	r24, Z+2	; 0x02
     b34:	93 81       	ldd	r25, Z+3	; 0x03
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e8       	ldi	r20, 0x80	; 128
     b3c:	5f e3       	ldi	r21, 0x3F	; 63
     b3e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     b42:	88 23       	and	r24, r24
     b44:	44 f4       	brge	.+16     	; 0xb56 <LCDinit+0x230>
		__ticks = 1;
     b46:	fe 01       	movw	r30, r28
     b48:	e5 5b       	subi	r30, 0xB5	; 181
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	91 83       	std	Z+1, r25	; 0x01
     b52:	80 83       	st	Z, r24
     b54:	64 c0       	rjmp	.+200    	; 0xc1e <LCDinit+0x2f8>
	else if (__tmp > 65535)
     b56:	fe 01       	movw	r30, r28
     b58:	e3 5b       	subi	r30, 0xB3	; 179
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	60 81       	ld	r22, Z
     b5e:	71 81       	ldd	r23, Z+1	; 0x01
     b60:	82 81       	ldd	r24, Z+2	; 0x02
     b62:	93 81       	ldd	r25, Z+3	; 0x03
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	4f e7       	ldi	r20, 0x7F	; 127
     b6a:	57 e4       	ldi	r21, 0x47	; 71
     b6c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     b70:	18 16       	cp	r1, r24
     b72:	0c f0       	brlt	.+2      	; 0xb76 <LCDinit+0x250>
     b74:	43 c0       	rjmp	.+134    	; 0xbfc <LCDinit+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b76:	fe 01       	movw	r30, r28
     b78:	ef 5a       	subi	r30, 0xAF	; 175
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	60 81       	ld	r22, Z
     b7e:	71 81       	ldd	r23, Z+1	; 0x01
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	93 81       	ldd	r25, Z+3	; 0x03
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e2       	ldi	r20, 0x20	; 32
     b8a:	51 e4       	ldi	r21, 0x41	; 65
     b8c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	8e 01       	movw	r16, r28
     b96:	05 5b       	subi	r16, 0xB5	; 181
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	bc 01       	movw	r22, r24
     b9c:	cd 01       	movw	r24, r26
     b9e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	f8 01       	movw	r30, r16
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	80 83       	st	Z, r24
     bac:	1f c0       	rjmp	.+62     	; 0xbec <LCDinit+0x2c6>
     bae:	fe 01       	movw	r30, r28
     bb0:	e7 5b       	subi	r30, 0xB7	; 183
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	84 e6       	ldi	r24, 0x64	; 100
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	80 83       	st	Z, r24
     bbc:	fe 01       	movw	r30, r28
     bbe:	e7 5b       	subi	r30, 0xB7	; 183
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCDinit+0x2a0>
     bca:	fe 01       	movw	r30, r28
     bcc:	e7 5b       	subi	r30, 0xB7	; 183
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd4:	de 01       	movw	r26, r28
     bd6:	a5 5b       	subi	r26, 0xB5	; 181
     bd8:	bf 4f       	sbci	r27, 0xFF	; 255
     bda:	fe 01       	movw	r30, r28
     bdc:	e5 5b       	subi	r30, 0xB5	; 181
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	9c 93       	st	X, r25
     bea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bec:	fe 01       	movw	r30, r28
     bee:	e5 5b       	subi	r30, 0xB5	; 181
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	80 81       	ld	r24, Z
     bf4:	91 81       	ldd	r25, Z+1	; 0x01
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	d1 f6       	brne	.-76     	; 0xbae <LCDinit+0x288>
     bfa:	27 c0       	rjmp	.+78     	; 0xc4a <LCDinit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bfc:	8e 01       	movw	r16, r28
     bfe:	05 5b       	subi	r16, 0xB5	; 181
     c00:	1f 4f       	sbci	r17, 0xFF	; 255
     c02:	fe 01       	movw	r30, r28
     c04:	e3 5b       	subi	r30, 0xB3	; 179
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	f8 01       	movw	r30, r16
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	80 83       	st	Z, r24
     c1e:	de 01       	movw	r26, r28
     c20:	a9 5b       	subi	r26, 0xB9	; 185
     c22:	bf 4f       	sbci	r27, 0xFF	; 255
     c24:	fe 01       	movw	r30, r28
     c26:	e5 5b       	subi	r30, 0xB5	; 181
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	8d 93       	st	X+, r24
     c30:	9c 93       	st	X, r25
     c32:	fe 01       	movw	r30, r28
     c34:	e9 5b       	subi	r30, 0xB9	; 185
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <LCDinit+0x316>
     c40:	fe 01       	movw	r30, r28
     c42:	e9 5b       	subi	r30, 0xB9	; 185
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	80 83       	st	Z, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c4a:	a5 e3       	ldi	r26, 0x35	; 53
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e5 e3       	ldi	r30, 0x35	; 53
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	8c 93       	st	X, r24
     c58:	fe 01       	movw	r30, r28
     c5a:	ed 5b       	subi	r30, 0xBD	; 189
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a0 e8       	ldi	r26, 0x80	; 128
     c64:	bf e3       	ldi	r27, 0x3F	; 63
     c66:	80 83       	st	Z, r24
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	a2 83       	std	Z+2, r26	; 0x02
     c6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6e:	8e 01       	movw	r16, r28
     c70:	01 5c       	subi	r16, 0xC1	; 193
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	fe 01       	movw	r30, r28
     c76:	ed 5b       	subi	r30, 0xBD	; 189
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	4a e7       	ldi	r20, 0x7A	; 122
     c88:	54 e4       	ldi	r21, 0x44	; 68
     c8a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	f8 01       	movw	r30, r16
     c94:	80 83       	st	Z, r24
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	a2 83       	std	Z+2, r26	; 0x02
     c9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c9c:	fe 01       	movw	r30, r28
     c9e:	ff 96       	adiw	r30, 0x3f	; 63
     ca0:	60 81       	ld	r22, Z
     ca2:	71 81       	ldd	r23, Z+1	; 0x01
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e8       	ldi	r20, 0x80	; 128
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     cb4:	88 23       	and	r24, r24
     cb6:	2c f4       	brge	.+10     	; 0xcc2 <LCDinit+0x39c>
		__ticks = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9e af       	std	Y+62, r25	; 0x3e
     cbe:	8d af       	std	Y+61, r24	; 0x3d
     cc0:	46 c0       	rjmp	.+140    	; 0xd4e <LCDinit+0x428>
	else if (__tmp > 65535)
     cc2:	fe 01       	movw	r30, r28
     cc4:	ff 96       	adiw	r30, 0x3f	; 63
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	57 e4       	ldi	r21, 0x47	; 71
     cd6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     cda:	18 16       	cp	r1, r24
     cdc:	64 f5       	brge	.+88     	; 0xd36 <LCDinit+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cde:	fe 01       	movw	r30, r28
     ce0:	ed 5b       	subi	r30, 0xBD	; 189
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e2       	ldi	r20, 0x20	; 32
     cf2:	51 e4       	ldi	r21, 0x41	; 65
     cf4:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	bc 01       	movw	r22, r24
     cfe:	cd 01       	movw	r24, r26
     d00:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	9e af       	std	Y+62, r25	; 0x3e
     d0a:	8d af       	std	Y+61, r24	; 0x3d
     d0c:	0f c0       	rjmp	.+30     	; 0xd2c <LCDinit+0x406>
     d0e:	84 e6       	ldi	r24, 0x64	; 100
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9c af       	std	Y+60, r25	; 0x3c
     d14:	8b af       	std	Y+59, r24	; 0x3b
     d16:	8b ad       	ldd	r24, Y+59	; 0x3b
     d18:	9c ad       	ldd	r25, Y+60	; 0x3c
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <LCDinit+0x3f4>
     d1e:	9c af       	std	Y+60, r25	; 0x3c
     d20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d22:	8d ad       	ldd	r24, Y+61	; 0x3d
     d24:	9e ad       	ldd	r25, Y+62	; 0x3e
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	9e af       	std	Y+62, r25	; 0x3e
     d2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d2e:	9e ad       	ldd	r25, Y+62	; 0x3e
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	69 f7       	brne	.-38     	; 0xd0e <LCDinit+0x3e8>
     d34:	16 c0       	rjmp	.+44     	; 0xd62 <LCDinit+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d36:	fe 01       	movw	r30, r28
     d38:	ff 96       	adiw	r30, 0x3f	; 63
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	9e af       	std	Y+62, r25	; 0x3e
     d4c:	8d af       	std	Y+61, r24	; 0x3d
     d4e:	8d ad       	ldd	r24, Y+61	; 0x3d
     d50:	9e ad       	ldd	r25, Y+62	; 0x3e
     d52:	9a af       	std	Y+58, r25	; 0x3a
     d54:	89 af       	std	Y+57, r24	; 0x39
     d56:	89 ad       	ldd	r24, Y+57	; 0x39
     d58:	9a ad       	ldd	r25, Y+58	; 0x3a
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <LCDinit+0x434>
     d5e:	9a af       	std	Y+58, r25	; 0x3a
     d60:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d62:	e5 e3       	ldi	r30, 0x35	; 53
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 e3       	ldi	r24, 0x30	; 48
     d68:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d6a:	a5 e3       	ldi	r26, 0x35	; 53
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e3       	ldi	r30, 0x35	; 53
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	84 60       	ori	r24, 0x04	; 4
     d76:	8c 93       	st	X, r24
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	a0 e8       	ldi	r26, 0x80	; 128
     d7e:	bf e3       	ldi	r27, 0x3F	; 63
     d80:	8d ab       	std	Y+53, r24	; 0x35
     d82:	9e ab       	std	Y+54, r25	; 0x36
     d84:	af ab       	std	Y+55, r26	; 0x37
     d86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d88:	6d a9       	ldd	r22, Y+53	; 0x35
     d8a:	7e a9       	ldd	r23, Y+54	; 0x36
     d8c:	8f a9       	ldd	r24, Y+55	; 0x37
     d8e:	98 ad       	ldd	r25, Y+56	; 0x38
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4a e7       	ldi	r20, 0x7A	; 122
     d96:	54 e4       	ldi	r21, 0x44	; 68
     d98:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	89 ab       	std	Y+49, r24	; 0x31
     da2:	9a ab       	std	Y+50, r25	; 0x32
     da4:	ab ab       	std	Y+51, r26	; 0x33
     da6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     da8:	69 a9       	ldd	r22, Y+49	; 0x31
     daa:	7a a9       	ldd	r23, Y+50	; 0x32
     dac:	8b a9       	ldd	r24, Y+51	; 0x33
     dae:	9c a9       	ldd	r25, Y+52	; 0x34
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e8       	ldi	r20, 0x80	; 128
     db6:	5f e3       	ldi	r21, 0x3F	; 63
     db8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     dbc:	88 23       	and	r24, r24
     dbe:	2c f4       	brge	.+10     	; 0xdca <LCDinit+0x4a4>
		__ticks = 1;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	98 ab       	std	Y+48, r25	; 0x30
     dc6:	8f a7       	std	Y+47, r24	; 0x2f
     dc8:	3f c0       	rjmp	.+126    	; 0xe48 <LCDinit+0x522>
	else if (__tmp > 65535)
     dca:	69 a9       	ldd	r22, Y+49	; 0x31
     dcc:	7a a9       	ldd	r23, Y+50	; 0x32
     dce:	8b a9       	ldd	r24, Y+51	; 0x33
     dd0:	9c a9       	ldd	r25, Y+52	; 0x34
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	3f ef       	ldi	r19, 0xFF	; 255
     dd6:	4f e7       	ldi	r20, 0x7F	; 127
     dd8:	57 e4       	ldi	r21, 0x47	; 71
     dda:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     dde:	18 16       	cp	r1, r24
     de0:	4c f5       	brge	.+82     	; 0xe34 <LCDinit+0x50e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de2:	6d a9       	ldd	r22, Y+53	; 0x35
     de4:	7e a9       	ldd	r23, Y+54	; 0x36
     de6:	8f a9       	ldd	r24, Y+55	; 0x37
     de8:	98 ad       	ldd	r25, Y+56	; 0x38
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	98 ab       	std	Y+48, r25	; 0x30
     e08:	8f a7       	std	Y+47, r24	; 0x2f
     e0a:	0f c0       	rjmp	.+30     	; 0xe2a <LCDinit+0x504>
     e0c:	84 e6       	ldi	r24, 0x64	; 100
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9e a7       	std	Y+46, r25	; 0x2e
     e12:	8d a7       	std	Y+45, r24	; 0x2d
     e14:	8d a5       	ldd	r24, Y+45	; 0x2d
     e16:	9e a5       	ldd	r25, Y+46	; 0x2e
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <LCDinit+0x4f2>
     e1c:	9e a7       	std	Y+46, r25	; 0x2e
     e1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e20:	8f a5       	ldd	r24, Y+47	; 0x2f
     e22:	98 a9       	ldd	r25, Y+48	; 0x30
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	98 ab       	std	Y+48, r25	; 0x30
     e28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e2c:	98 a9       	ldd	r25, Y+48	; 0x30
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	69 f7       	brne	.-38     	; 0xe0c <LCDinit+0x4e6>
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <LCDinit+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e34:	69 a9       	ldd	r22, Y+49	; 0x31
     e36:	7a a9       	ldd	r23, Y+50	; 0x32
     e38:	8b a9       	ldd	r24, Y+51	; 0x33
     e3a:	9c a9       	ldd	r25, Y+52	; 0x34
     e3c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	98 ab       	std	Y+48, r25	; 0x30
     e46:	8f a7       	std	Y+47, r24	; 0x2f
     e48:	8f a5       	ldd	r24, Y+47	; 0x2f
     e4a:	98 a9       	ldd	r25, Y+48	; 0x30
     e4c:	9c a7       	std	Y+44, r25	; 0x2c
     e4e:	8b a7       	std	Y+43, r24	; 0x2b
     e50:	8b a5       	ldd	r24, Y+43	; 0x2b
     e52:	9c a5       	ldd	r25, Y+44	; 0x2c
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <LCDinit+0x52e>
     e58:	9c a7       	std	Y+44, r25	; 0x2c
     e5a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e5c:	a5 e3       	ldi	r26, 0x35	; 53
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e5 e3       	ldi	r30, 0x35	; 53
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8b 7f       	andi	r24, 0xFB	; 251
     e68:	8c 93       	st	X, r24
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e8       	ldi	r26, 0x80	; 128
     e70:	bf e3       	ldi	r27, 0x3F	; 63
     e72:	8f a3       	std	Y+39, r24	; 0x27
     e74:	98 a7       	std	Y+40, r25	; 0x28
     e76:	a9 a7       	std	Y+41, r26	; 0x29
     e78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	6f a1       	ldd	r22, Y+39	; 0x27
     e7c:	78 a5       	ldd	r23, Y+40	; 0x28
     e7e:	89 a5       	ldd	r24, Y+41	; 0x29
     e80:	9a a5       	ldd	r25, Y+42	; 0x2a
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a e7       	ldi	r20, 0x7A	; 122
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8b a3       	std	Y+35, r24	; 0x23
     e94:	9c a3       	std	Y+36, r25	; 0x24
     e96:	ad a3       	std	Y+37, r26	; 0x25
     e98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e9a:	6b a1       	ldd	r22, Y+35	; 0x23
     e9c:	7c a1       	ldd	r23, Y+36	; 0x24
     e9e:	8d a1       	ldd	r24, Y+37	; 0x25
     ea0:	9e a1       	ldd	r25, Y+38	; 0x26
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <LCDinit+0x596>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9a a3       	std	Y+34, r25	; 0x22
     eb8:	89 a3       	std	Y+33, r24	; 0x21
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <LCDinit+0x614>
	else if (__tmp > 65535)
     ebc:	6b a1       	ldd	r22, Y+35	; 0x23
     ebe:	7c a1       	ldd	r23, Y+36	; 0x24
     ec0:	8d a1       	ldd	r24, Y+37	; 0x25
     ec2:	9e a1       	ldd	r25, Y+38	; 0x26
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <LCDinit+0x600>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	6f a1       	ldd	r22, Y+39	; 0x27
     ed6:	78 a5       	ldd	r23, Y+40	; 0x28
     ed8:	89 a5       	ldd	r24, Y+41	; 0x29
     eda:	9a a5       	ldd	r25, Y+42	; 0x2a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9a a3       	std	Y+34, r25	; 0x22
     efa:	89 a3       	std	Y+33, r24	; 0x21
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <LCDinit+0x5f6>
     efe:	84 e6       	ldi	r24, 0x64	; 100
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	98 a3       	std	Y+32, r25	; 0x20
     f04:	8f 8f       	std	Y+31, r24	; 0x1f
     f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f08:	98 a1       	ldd	r25, Y+32	; 0x20
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <LCDinit+0x5e4>
     f0e:	98 a3       	std	Y+32, r25	; 0x20
     f10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	89 a1       	ldd	r24, Y+33	; 0x21
     f14:	9a a1       	ldd	r25, Y+34	; 0x22
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9a a3       	std	Y+34, r25	; 0x22
     f1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	89 a1       	ldd	r24, Y+33	; 0x21
     f1e:	9a a1       	ldd	r25, Y+34	; 0x22
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <LCDinit+0x5d8>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <LCDinit+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6b a1       	ldd	r22, Y+35	; 0x23
     f28:	7c a1       	ldd	r23, Y+36	; 0x24
     f2a:	8d a1       	ldd	r24, Y+37	; 0x25
     f2c:	9e a1       	ldd	r25, Y+38	; 0x26
     f2e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9a a3       	std	Y+34, r25	; 0x22
     f38:	89 a3       	std	Y+33, r24	; 0x21
     f3a:	89 a1       	ldd	r24, Y+33	; 0x21
     f3c:	9a a1       	ldd	r25, Y+34	; 0x22
     f3e:	9e 8f       	std	Y+30, r25	; 0x1e
     f40:	8d 8f       	std	Y+29, r24	; 0x1d
     f42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f44:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <LCDinit+0x620>
     f4a:	9e 8f       	std	Y+30, r25	; 0x1e
     f4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     f4e:	e5 e3       	ldi	r30, 0x35	; 53
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 e2       	ldi	r24, 0x20	; 32
     f54:	80 83       	st	Z, r24
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     f56:	a5 e3       	ldi	r26, 0x35	; 53
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e3       	ldi	r30, 0x35	; 53
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	84 60       	ori	r24, 0x04	; 4
     f62:	8c 93       	st	X, r24
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 e8       	ldi	r26, 0x80	; 128
     f6a:	bf e3       	ldi	r27, 0x3F	; 63
     f6c:	89 8f       	std	Y+25, r24	; 0x19
     f6e:	9a 8f       	std	Y+26, r25	; 0x1a
     f70:	ab 8f       	std	Y+27, r26	; 0x1b
     f72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f74:	69 8d       	ldd	r22, Y+25	; 0x19
     f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a e7       	ldi	r20, 0x7A	; 122
     f82:	54 e4       	ldi	r21, 0x44	; 68
     f84:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8d 8b       	std	Y+21, r24	; 0x15
     f8e:	9e 8b       	std	Y+22, r25	; 0x16
     f90:	af 8b       	std	Y+23, r26	; 0x17
     f92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f94:	6d 89       	ldd	r22, Y+21	; 0x15
     f96:	7e 89       	ldd	r23, Y+22	; 0x16
     f98:	8f 89       	ldd	r24, Y+23	; 0x17
     f9a:	98 8d       	ldd	r25, Y+24	; 0x18
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <LCDinit+0x690>
		__ticks = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c 8b       	std	Y+20, r25	; 0x14
     fb2:	8b 8b       	std	Y+19, r24	; 0x13
     fb4:	3f c0       	rjmp	.+126    	; 0x1034 <LCDinit+0x70e>
	else if (__tmp > 65535)
     fb6:	6d 89       	ldd	r22, Y+21	; 0x15
     fb8:	7e 89       	ldd	r23, Y+22	; 0x16
     fba:	8f 89       	ldd	r24, Y+23	; 0x17
     fbc:	98 8d       	ldd	r25, Y+24	; 0x18
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	4c f5       	brge	.+82     	; 0x1020 <LCDinit+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	69 8d       	ldd	r22, Y+25	; 0x19
     fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9c 8b       	std	Y+20, r25	; 0x14
     ff4:	8b 8b       	std	Y+19, r24	; 0x13
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <LCDinit+0x6f0>
     ff8:	84 e6       	ldi	r24, 0x64	; 100
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9a 8b       	std	Y+18, r25	; 0x12
     ffe:	89 8b       	std	Y+17, r24	; 0x11
    1000:	89 89       	ldd	r24, Y+17	; 0x11
    1002:	9a 89       	ldd	r25, Y+18	; 0x12
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <LCDinit+0x6de>
    1008:	9a 8b       	std	Y+18, r25	; 0x12
    100a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	8b 89       	ldd	r24, Y+19	; 0x13
    100e:	9c 89       	ldd	r25, Y+20	; 0x14
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	9c 8b       	std	Y+20, r25	; 0x14
    1014:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	8b 89       	ldd	r24, Y+19	; 0x13
    1018:	9c 89       	ldd	r25, Y+20	; 0x14
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	69 f7       	brne	.-38     	; 0xff8 <LCDinit+0x6d2>
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <LCDinit+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	6d 89       	ldd	r22, Y+21	; 0x15
    1022:	7e 89       	ldd	r23, Y+22	; 0x16
    1024:	8f 89       	ldd	r24, Y+23	; 0x17
    1026:	98 8d       	ldd	r25, Y+24	; 0x18
    1028:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9c 8b       	std	Y+20, r25	; 0x14
    1032:	8b 8b       	std	Y+19, r24	; 0x13
    1034:	8b 89       	ldd	r24, Y+19	; 0x13
    1036:	9c 89       	ldd	r25, Y+20	; 0x14
    1038:	98 8b       	std	Y+16, r25	; 0x10
    103a:	8f 87       	std	Y+15, r24	; 0x0f
    103c:	8f 85       	ldd	r24, Y+15	; 0x0f
    103e:	98 89       	ldd	r25, Y+16	; 0x10
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <LCDinit+0x71a>
    1044:	98 8b       	std	Y+16, r25	; 0x10
    1046:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
    1048:	a5 e3       	ldi	r26, 0x35	; 53
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e5 e3       	ldi	r30, 0x35	; 53
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8b 7f       	andi	r24, 0xFB	; 251
    1054:	8c 93       	st	X, r24
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a0 e8       	ldi	r26, 0x80	; 128
    105c:	bf e3       	ldi	r27, 0x3F	; 63
    105e:	8b 87       	std	Y+11, r24	; 0x0b
    1060:	9c 87       	std	Y+12, r25	; 0x0c
    1062:	ad 87       	std	Y+13, r26	; 0x0d
    1064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1066:	6b 85       	ldd	r22, Y+11	; 0x0b
    1068:	7c 85       	ldd	r23, Y+12	; 0x0c
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	9e 85       	ldd	r25, Y+14	; 0x0e
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a e7       	ldi	r20, 0x7A	; 122
    1074:	54 e4       	ldi	r21, 0x44	; 68
    1076:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	8f 83       	std	Y+7, r24	; 0x07
    1080:	98 87       	std	Y+8, r25	; 0x08
    1082:	a9 87       	std	Y+9, r26	; 0x09
    1084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1086:	6f 81       	ldd	r22, Y+7	; 0x07
    1088:	78 85       	ldd	r23, Y+8	; 0x08
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
    109a:	88 23       	and	r24, r24
    109c:	2c f4       	brge	.+10     	; 0x10a8 <LCDinit+0x782>
		__ticks = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <LCDinit+0x800>
	else if (__tmp > 65535)
    10a8:	6f 81       	ldd	r22, Y+7	; 0x07
    10aa:	78 85       	ldd	r23, Y+8	; 0x08
    10ac:	89 85       	ldd	r24, Y+9	; 0x09
    10ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	57 e4       	ldi	r21, 0x47	; 71
    10b8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
    10bc:	18 16       	cp	r1, r24
    10be:	4c f5       	brge	.+82     	; 0x1112 <LCDinit+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <LCDinit+0x7e2>
    10ea:	84 e6       	ldi	r24, 0x64	; 100
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <LCDinit+0x7d0>
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	69 f7       	brne	.-38     	; 0x10ea <LCDinit+0x7c4>
    1110:	14 c0       	rjmp	.+40     	; 0x113a <LCDinit+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	6f 81       	ldd	r22, Y+7	; 0x07
    1114:	78 85       	ldd	r23, Y+8	; 0x08
    1116:	89 85       	ldd	r24, Y+9	; 0x09
    1118:	9a 85       	ldd	r25, Y+10	; 0x0a
    111a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <LCDinit+0x80c>
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    113a:	88 e2       	ldi	r24, 0x28	; 40
    113c:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1140:	8c e0       	ldi	r24, 0x0C	; 12
    1142:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
    1146:	fe 01       	movw	r30, r28
    1148:	ec 59       	subi	r30, 0x9C	; 156
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	10 82       	st	Z, r1
    114e:	fe 01       	movw	r30, r28
    1150:	ed 59       	subi	r30, 0x9D	; 157
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	10 82       	st	Z, r1
    1156:	23 c0       	rjmp	.+70     	; 0x119e <LCDinit+0x878>
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1158:	fe 01       	movw	r30, r28
    115a:	ec 59       	subi	r30, 0x9C	; 156
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9c 01       	movw	r18, r24
    1166:	2c 5a       	subi	r18, 0xAC	; 172
    1168:	3f 4f       	sbci	r19, 0xFF	; 255
    116a:	fe 01       	movw	r30, r28
    116c:	ed 59       	subi	r30, 0x9D	; 157
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	40 81       	ld	r20, Z
    1172:	de 01       	movw	r26, r28
    1174:	ad 59       	subi	r26, 0x9D	; 157
    1176:	bf 4f       	sbci	r27, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	ed 59       	subi	r30, 0x9D	; 157
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	8f 5f       	subi	r24, 0xFF	; 255
    1182:	8c 93       	st	X, r24
    1184:	c9 01       	movw	r24, r18
    1186:	64 2f       	mov	r22, r20
    1188:	0e 94 a5 09 	call	0x134a	; 0x134a <LCDdefinechar>
		ch=ch+8;
    118c:	de 01       	movw	r26, r28
    118e:	ac 59       	subi	r26, 0x9C	; 156
    1190:	bf 4f       	sbci	r27, 0xFF	; 255
    1192:	fe 01       	movw	r30, r28
    1194:	ec 59       	subi	r30, 0x9C	; 156
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	88 5f       	subi	r24, 0xF8	; 248
    119c:	8c 93       	st	X, r24
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    119e:	fe 01       	movw	r30, r28
    11a0:	ec 59       	subi	r30, 0x9C	; 156
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	80 81       	ld	r24, Z
    11a6:	80 34       	cpi	r24, 0x40	; 64
    11a8:	b8 f2       	brcs	.-82     	; 0x1158 <LCDinit+0x832>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}			
    11aa:	cc 59       	subi	r28, 0x9C	; 156
    11ac:	df 4f       	sbci	r29, 0xFF	; 255
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_CLR);
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(1<<LCD_HOME);
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <LCDstring+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <LCDstring+0x8>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	6b 83       	std	Y+3, r22	; 0x03
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	a1 f0       	breq	.+40     	; 0x122c <LCDstring+0x42>

	// print data
	for(i=0; i<nBytes; i++)
    1204:	1c 82       	std	Y+4, r1	; 0x04
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <LCDstring+0x3a>
	{
		LCDsendChar(data[i]);
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	fc 01       	movw	r30, r24
    1214:	e2 0f       	add	r30, r18
    1216:	f3 1f       	adc	r31, r19
    1218:	80 81       	ld	r24, Z
    121a:	0e 94 65 00 	call	0xca	; 0xca <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	9f 5f       	subi	r25, 0xFF	; 255
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	98 17       	cp	r25, r24
    122a:	70 f3       	brcs	.-36     	; 0x1208 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <LCDGotoXY+0x6>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <LCDGotoXY+0x8>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	6a 83       	std	Y+2, r22	; 0x02
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3d 83       	std	Y+5, r19	; 0x05
    1254:	2c 83       	std	Y+4, r18	; 0x04
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	c1 f0       	breq	.+48     	; 0x1290 <LCDGotoXY+0x56>
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	3d 81       	ldd	r19, Y+5	; 0x05
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	2c f4       	brge	.+10     	; 0x1274 <LCDGotoXY+0x3a>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	61 f0       	breq	.+24     	; 0x128a <LCDGotoXY+0x50>
    1272:	1d c0       	rjmp	.+58     	; 0x12ae <LCDGotoXY+0x74>
    1274:	2c 81       	ldd	r18, Y+4	; 0x04
    1276:	3d 81       	ldd	r19, Y+5	; 0x05
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	71 f0       	breq	.+28     	; 0x129a <LCDGotoXY+0x60>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	91 05       	cpc	r25, r1
    1286:	71 f0       	breq	.+28     	; 0x12a4 <LCDGotoXY+0x6a>
    1288:	12 c0       	rjmp	.+36     	; 0x12ae <LCDGotoXY+0x74>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
    128a:	99 81       	ldd	r25, Y+1	; 0x01
    128c:	9b 83       	std	Y+3, r25	; 0x03
    128e:	11 c0       	rjmp	.+34     	; 0x12b2 <LCDGotoXY+0x78>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	20 5c       	subi	r18, 0xC0	; 192
    1296:	2b 83       	std	Y+3, r18	; 0x03
    1298:	0c c0       	rjmp	.+24     	; 0x12b2 <LCDGotoXY+0x78>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	38 2f       	mov	r19, r24
    129e:	3c 5e       	subi	r19, 0xEC	; 236
    12a0:	3b 83       	std	Y+3, r19	; 0x03
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <LCDGotoXY+0x78>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	98 2f       	mov	r25, r24
    12a8:	9c 5a       	subi	r25, 0xAC	; 172
    12aa:	9b 83       	std	Y+3, r25	; 0x03
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <LCDGotoXY+0x78>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
    12ae:	29 81       	ldd	r18, Y+1	; 0x01
    12b0:	2b 83       	std	Y+3, r18	; 0x03
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
	
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	2b 97       	sbiw	r28, 0x0b	; 11
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	99 87       	std	Y+9, r25	; 0x09
    12e0:	88 87       	std	Y+8, r24	; 0x08
    12e2:	6a 87       	std	Y+10, r22	; 0x0a
    12e4:	4b 87       	std	Y+11, r20	; 0x0b
	uint8_t i;
	LCDGotoXY(x,y);
    12e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ea:	0e 94 1d 09 	call	0x123a	; 0x123a <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    12ee:	1f 82       	std	Y+7, r1	; 0x07
    12f0:	13 c0       	rjmp	.+38     	; 0x1318 <CopyStringtoLCD+0x4e>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    12f2:	8f 81       	ldd	r24, Y+7	; 0x07
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	88 85       	ldd	r24, Y+8	; 0x08
    12fa:	99 85       	ldd	r25, Y+9	; 0x09
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	ed 81       	ldd	r30, Y+5	; 0x05
    1306:	fe 81       	ldd	r31, Y+6	; 0x06
    1308:	84 91       	lpm	r24, Z+
    130a:	8c 83       	std	Y+4, r24	; 0x04
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	0e 94 65 00 	call	0xca	; 0xca <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1312:	8f 81       	ldd	r24, Y+7	; 0x07
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	8f 83       	std	Y+7, r24	; 0x07
    1318:	8f 81       	ldd	r24, Y+7	; 0x07
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	88 85       	ldd	r24, Y+8	; 0x08
    1320:	99 85       	ldd	r25, Y+9	; 0x09
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	9b 83       	std	Y+3, r25	; 0x03
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	ea 81       	ldd	r30, Y+2	; 0x02
    132c:	fb 81       	ldd	r31, Y+3	; 0x03
    132e:	84 91       	lpm	r24, Z+
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	88 23       	and	r24, r24
    1336:	e9 f6       	brne	.-70     	; 0x12f2 <CopyStringtoLCD+0x28>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1338:	2b 96       	adiw	r28, 0x0b	; 11
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	2a 97       	sbiw	r28, 0x0a	; 10
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	99 87       	std	Y+9, r25	; 0x09
    1360:	88 87       	std	Y+8, r24	; 0x08
    1362:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1364:	8a 85       	ldd	r24, Y+10	; 0x0a
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	80 64       	ori	r24, 0x40	; 64
    1378:	8f 83       	std	Y+7, r24	; 0x07
	for (i=0; i<8; i++){
    137a:	1d 82       	std	Y+5, r1	; 0x05
    137c:	1c 82       	std	Y+4, r1	; 0x04
    137e:	1d c0       	rjmp	.+58     	; 0x13ba <LCDdefinechar+0x70>
		pcc=pgm_read_byte(&pc[i]);
    1380:	28 85       	ldd	r18, Y+8	; 0x08
    1382:	39 85       	ldd	r19, Y+9	; 0x09
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	9b 83       	std	Y+3, r25	; 0x03
    138e:	8a 83       	std	Y+2, r24	; 0x02
    1390:	ea 81       	ldd	r30, Y+2	; 0x02
    1392:	fb 81       	ldd	r31, Y+3	; 0x03
    1394:	84 91       	lpm	r24, Z+
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	8e 83       	std	Y+6, r24	; 0x06
		LCDsendCommand(a++);
    139c:	9f 81       	ldd	r25, Y+7	; 0x07
    139e:	8f 81       	ldd	r24, Y+7	; 0x07
    13a0:	8f 5f       	subi	r24, 0xFF	; 255
    13a2:	8f 83       	std	Y+7, r24	; 0x07
    13a4:	89 2f       	mov	r24, r25
    13a6:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
		LCDsendChar(pcc);
    13aa:	8e 81       	ldd	r24, Y+6	; 0x06
    13ac:	0e 94 65 00 	call	0xca	; 0xca <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	9d 83       	std	Y+5, r25	; 0x05
    13b8:	8c 83       	std	Y+4, r24	; 0x04
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	88 30       	cpi	r24, 0x08	; 8
    13c0:	91 05       	cpc	r25, r1
    13c2:	f0 f2       	brcs	.-68     	; 0x1380 <LCDdefinechar+0x36>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    13c4:	2a 96       	adiw	r28, 0x0a	; 10
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <LCDshiftLeft+0x6>
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    13e4:	1a 82       	std	Y+2, r1	; 0x02
    13e6:	19 82       	std	Y+1, r1	; 0x01
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <LCDshiftLeft+0x24>
	{
		LCDsendCommand(0x1E);
    13ea:	8e e1       	ldi	r24, 0x1E	; 30
    13ec:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	82 17       	cp	r24, r18
    1406:	93 07       	cpc	r25, r19
    1408:	84 f3       	brlt	.-32     	; 0x13ea <LCDshiftLeft+0x14>
	{
		LCDsendCommand(0x1E);
	}
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <LCDshiftRight+0x6>
    141c:	0f 92       	push	r0
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    1424:	1a 82       	std	Y+2, r1	; 0x02
    1426:	19 82       	std	Y+1, r1	; 0x01
    1428:	08 c0       	rjmp	.+16     	; 0x143a <LCDshiftRight+0x24>
	{
		LCDsendCommand(0x18);
    142a:	88 e1       	ldi	r24, 0x18	; 24
    142c:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	82 17       	cp	r24, r18
    1446:	93 07       	cpc	r25, r19
    1448:	84 f3       	brlt	.-32     	; 0x142a <LCDshiftRight+0x14>
	{
		LCDsendCommand(0x18);
	}
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0E);
    145e:	8e e0       	ldi	r24, 0x0E	; 14
    1460:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
}
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0F);
    1472:	8f e0       	ldi	r24, 0x0F	; 15
    1474:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    1486:	8c e0       	ldi	r24, 0x0C	; 12
    1488:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
}
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x08);
    149a:	88 e0       	ldi	r24, 0x08	; 8
    149c:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
	LCDsendCommand(0x0C);
    14ae:	8c e0       	ldi	r24, 0x0C	; 12
    14b0:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
}
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <LCDcursorLeft+0x6>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	8b 83       	std	Y+3, r24	; 0x03
	for ( i=0;i<n;i++)
    14c8:	1a 82       	std	Y+2, r1	; 0x02
    14ca:	19 82       	std	Y+1, r1	; 0x01
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <LCDcursorLeft+0x24>
	{
		LCDsendCommand(0x10);
    14ce:	80 e1       	ldi	r24, 0x10	; 16
    14d0:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	9a 81       	ldd	r25, Y+2	; 0x02
    14e8:	82 17       	cp	r24, r18
    14ea:	93 07       	cpc	r25, r19
    14ec:	84 f3       	brlt	.-32     	; 0x14ce <LCDcursorLeft+0x14>
	{
		LCDsendCommand(0x10);
	}
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <LCDcursorRight+0x6>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0;i<n;i++)
    1508:	1a 82       	std	Y+2, r1	; 0x02
    150a:	19 82       	std	Y+1, r1	; 0x01
    150c:	08 c0       	rjmp	.+16     	; 0x151e <LCDcursorRight+0x24>
	{
		LCDsendCommand(0x14);
    150e:	84 e1       	ldi	r24, 0x14	; 20
    1510:	0e 94 8a 02 	call	0x514	; 0x514 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	82 17       	cp	r24, r18
    152a:	93 07       	cpc	r25, r19
    152c:	84 f3       	brlt	.-32     	; 0x150e <LCDcursorRight+0x14>
	{
		LCDsendCommand(0x14);
	}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	27 97       	sbiw	r28, 0x07	; 7
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	6e 83       	std	Y+6, r22	; 0x06
    1552:	4f 83       	std	Y+7, r20	; 0x07
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	48 2f       	mov	r20, r24
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	8f 81       	ldd	r24, Y+7	; 0x07
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	c9 01       	movw	r24, r18
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	82 0f       	add	r24, r18
    1568:	93 1f       	adc	r25, r19
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	9a 01       	movw	r18, r20
    1570:	28 9f       	mul	r18, r24
    1572:	a0 01       	movw	r20, r0
    1574:	29 9f       	mul	r18, r25
    1576:	50 0d       	add	r21, r0
    1578:	38 9f       	mul	r19, r24
    157a:	50 0d       	add	r21, r0
    157c:	11 24       	eor	r1, r1
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	ca 01       	movw	r24, r20
    1586:	b9 01       	movw	r22, r18
    1588:	0e 94 26 11 	call	0x224c	; 0x224c <__divmodhi4>
    158c:	cb 01       	movw	r24, r22
    158e:	9b 83       	std	Y+3, r25	; 0x03
    1590:	8a 83       	std	Y+2, r24	; 0x02
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1592:	1c 82       	std	Y+4, r1	; 0x04
    1594:	35 c0       	rjmp	.+106    	; 0x1600 <LCDprogressBar+0xc6>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	c9 01       	movw	r24, r18
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	82 0f       	add	r24, r18
    15a4:	93 1f       	adc	r25, r19
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	9c 01       	movw	r18, r24
    15ac:	2b 5f       	subi	r18, 0xFB	; 251
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	9b 81       	ldd	r25, Y+3	; 0x03
    15b4:	82 17       	cp	r24, r18
    15b6:	93 07       	cpc	r25, r19
    15b8:	d8 f4       	brcc	.+54     	; 0x15f0 <LCDprogressBar+0xb6>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	c9 01       	movw	r24, r18
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	82 0f       	add	r24, r18
    15c8:	93 1f       	adc	r25, r19
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	9c 01       	movw	r18, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	82 17       	cp	r24, r18
    15d6:	93 07       	cpc	r25, r19
    15d8:	10 f4       	brcc	.+4      	; 0x15de <LCDprogressBar+0xa4>
			{
				// this is an empty block
				// use space character?
				c = 0;
    15da:	19 82       	std	Y+1, r1	; 0x01
    15dc:	0b c0       	rjmp	.+22     	; 0x15f4 <LCDprogressBar+0xba>
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	9b 81       	ldd	r25, Y+3	; 0x03
    15e2:	26 e0       	ldi	r18, 0x06	; 6
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	b9 01       	movw	r22, r18
    15e8:	0e 94 12 11 	call	0x2224	; 0x2224 <__udivmodhi4>
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <LCDprogressBar+0xba>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    15f0:	85 e0       	ldi	r24, 0x05	; 5
    15f2:	89 83       	std	Y+1, r24	; 0x01
		}
		
		// write character to display
		LCDsendChar(c);
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	0e 94 65 00 	call	0xca	; 0xca <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	8c 83       	std	Y+4, r24	; 0x04
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	8f 81       	ldd	r24, Y+7	; 0x07
    1604:	98 17       	cp	r25, r24
    1606:	38 f2       	brcs	.-114    	; 0x1596 <LCDprogressBar+0x5c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1608:	27 96       	adiw	r28, 0x07	; 7
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <LCDdisplay>:

void LCDdisplay(char arr[])
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <LCDdisplay+0x6>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
	LCDstring(arr,strlen(arr));
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <strlen>
    1630:	28 2f       	mov	r18, r24
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	62 2f       	mov	r22, r18
    1638:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCDstring>
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <main>:
0b00000100,
0b00000100

};
int main()
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	a2 97       	sbiw	r28, 0x22	; 34
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61

	int i=0, j=0;
    165a:	1a 8a       	std	Y+18, r1	; 0x12
    165c:	19 8a       	std	Y+17, r1	; 0x11
    165e:	18 8a       	std	Y+16, r1	; 0x10
    1660:	1f 86       	std	Y+15, r1	; 0x0f
	char a[16];
	LCDinit();
    1662:	0e 94 93 04 	call	0x926	; 0x926 <LCDinit>
	LCDclr();
    1666:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCDclr>
	while(1)
	{
		LCDdefinechar(backslash,0);
    166a:	84 e9       	ldi	r24, 0x94	; 148
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	0e 94 a5 09 	call	0x134a	; 0x134a <LCDdefinechar>
		LCDGotoXY(0,0);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	0e 94 1d 09 	call	0x123a	; 0x123a <LCDGotoXY>
		LCDsendChar(0);
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 65 00 	call	0xca	; 0xca <LCDsendChar>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a8 ec       	ldi	r26, 0xC8	; 200
    1690:	b2 e4       	ldi	r27, 0x42	; 66
    1692:	8b 87       	std	Y+11, r24	; 0x0b
    1694:	9c 87       	std	Y+12, r25	; 0x0c
    1696:	ad 87       	std	Y+13, r26	; 0x0d
    1698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	6b 85       	ldd	r22, Y+11	; 0x0b
    169c:	7c 85       	ldd	r23, Y+12	; 0x0c
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a e7       	ldi	r20, 0x7A	; 122
    16a8:	54 e4       	ldi	r21, 0x44	; 68
    16aa:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8f 83       	std	Y+7, r24	; 0x07
    16b4:	98 87       	std	Y+8, r25	; 0x08
    16b6:	a9 87       	std	Y+9, r26	; 0x09
    16b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	2c f4       	brge	.+10     	; 0x16dc <main+0x96>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
    16da:	3f c0       	rjmp	.+126    	; 0x175a <main+0x114>
	else if (__tmp > 65535)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	4c f5       	brge	.+82     	; 0x1746 <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e2       	ldi	r20, 0x20	; 32
    1702:	51 e4       	ldi	r21, 0x41	; 65
    1704:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	0f c0       	rjmp	.+30     	; 0x173c <main+0xf6>
    171e:	84 e6       	ldi	r24, 0x64	; 100
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <main+0xe4>
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	69 f7       	brne	.-38     	; 0x171e <main+0xd8>
    1744:	92 cf       	rjmp	.-220    	; 0x166a <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <main+0x120>
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	7d cf       	rjmp	.-262    	; 0x166a <main+0x24>

00001770 <__fixunssfsi>:
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	7b 01       	movw	r14, r22
    177a:	8c 01       	movw	r16, r24
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	5f e4       	ldi	r21, 0x4F	; 79
    1784:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__gesf2>
    1788:	88 23       	and	r24, r24
    178a:	8c f0       	brlt	.+34     	; 0x17ae <__fixunssfsi+0x3e>
    178c:	c8 01       	movw	r24, r16
    178e:	b7 01       	movw	r22, r14
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	5f e4       	ldi	r21, 0x4F	; 79
    1798:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__subsf3>
    179c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__fixsfsi>
    17a0:	9b 01       	movw	r18, r22
    17a2:	ac 01       	movw	r20, r24
    17a4:	20 50       	subi	r18, 0x00	; 0
    17a6:	30 40       	sbci	r19, 0x00	; 0
    17a8:	40 40       	sbci	r20, 0x00	; 0
    17aa:	50 48       	sbci	r21, 0x80	; 128
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <__fixunssfsi+0x4a>
    17ae:	c8 01       	movw	r24, r16
    17b0:	b7 01       	movw	r22, r14
    17b2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__fixsfsi>
    17b6:	9b 01       	movw	r18, r22
    17b8:	ac 01       	movw	r20, r24
    17ba:	b9 01       	movw	r22, r18
    17bc:	ca 01       	movw	r24, r20
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	08 95       	ret

000017c8 <_fpadd_parts>:
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ea ee       	ldi	r30, 0xEA	; 234
    17ce:	fb e0       	ldi	r31, 0x0B	; 11
    17d0:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__>
    17d4:	dc 01       	movw	r26, r24
    17d6:	2b 01       	movw	r4, r22
    17d8:	fa 01       	movw	r30, r20
    17da:	9c 91       	ld	r25, X
    17dc:	92 30       	cpi	r25, 0x02	; 2
    17de:	08 f4       	brcc	.+2      	; 0x17e2 <_fpadd_parts+0x1a>
    17e0:	39 c1       	rjmp	.+626    	; 0x1a54 <_fpadd_parts+0x28c>
    17e2:	eb 01       	movw	r28, r22
    17e4:	88 81       	ld	r24, Y
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	08 f4       	brcc	.+2      	; 0x17ec <_fpadd_parts+0x24>
    17ea:	33 c1       	rjmp	.+614    	; 0x1a52 <_fpadd_parts+0x28a>
    17ec:	94 30       	cpi	r25, 0x04	; 4
    17ee:	69 f4       	brne	.+26     	; 0x180a <_fpadd_parts+0x42>
    17f0:	84 30       	cpi	r24, 0x04	; 4
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <_fpadd_parts+0x2e>
    17f4:	2f c1       	rjmp	.+606    	; 0x1a54 <_fpadd_parts+0x28c>
    17f6:	11 96       	adiw	r26, 0x01	; 1
    17f8:	9c 91       	ld	r25, X
    17fa:	11 97       	sbiw	r26, 0x01	; 1
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	98 17       	cp	r25, r24
    1800:	09 f4       	brne	.+2      	; 0x1804 <_fpadd_parts+0x3c>
    1802:	28 c1       	rjmp	.+592    	; 0x1a54 <_fpadd_parts+0x28c>
    1804:	a0 e6       	ldi	r26, 0x60	; 96
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	25 c1       	rjmp	.+586    	; 0x1a54 <_fpadd_parts+0x28c>
    180a:	84 30       	cpi	r24, 0x04	; 4
    180c:	09 f4       	brne	.+2      	; 0x1810 <_fpadd_parts+0x48>
    180e:	21 c1       	rjmp	.+578    	; 0x1a52 <_fpadd_parts+0x28a>
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	a9 f4       	brne	.+42     	; 0x183e <_fpadd_parts+0x76>
    1814:	92 30       	cpi	r25, 0x02	; 2
    1816:	09 f0       	breq	.+2      	; 0x181a <_fpadd_parts+0x52>
    1818:	1d c1       	rjmp	.+570    	; 0x1a54 <_fpadd_parts+0x28c>
    181a:	9a 01       	movw	r18, r20
    181c:	ad 01       	movw	r20, r26
    181e:	88 e0       	ldi	r24, 0x08	; 8
    1820:	ea 01       	movw	r28, r20
    1822:	09 90       	ld	r0, Y+
    1824:	ae 01       	movw	r20, r28
    1826:	e9 01       	movw	r28, r18
    1828:	09 92       	st	Y+, r0
    182a:	9e 01       	movw	r18, r28
    182c:	81 50       	subi	r24, 0x01	; 1
    182e:	c1 f7       	brne	.-16     	; 0x1820 <_fpadd_parts+0x58>
    1830:	e2 01       	movw	r28, r4
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	9c 91       	ld	r25, X
    1838:	89 23       	and	r24, r25
    183a:	81 83       	std	Z+1, r24	; 0x01
    183c:	08 c1       	rjmp	.+528    	; 0x1a4e <_fpadd_parts+0x286>
    183e:	92 30       	cpi	r25, 0x02	; 2
    1840:	09 f4       	brne	.+2      	; 0x1844 <_fpadd_parts+0x7c>
    1842:	07 c1       	rjmp	.+526    	; 0x1a52 <_fpadd_parts+0x28a>
    1844:	12 96       	adiw	r26, 0x02	; 2
    1846:	2d 90       	ld	r2, X+
    1848:	3c 90       	ld	r3, X
    184a:	13 97       	sbiw	r26, 0x03	; 3
    184c:	eb 01       	movw	r28, r22
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	14 96       	adiw	r26, 0x04	; 4
    1854:	ad 90       	ld	r10, X+
    1856:	bd 90       	ld	r11, X+
    1858:	cd 90       	ld	r12, X+
    185a:	dc 90       	ld	r13, X
    185c:	17 97       	sbiw	r26, 0x07	; 7
    185e:	ec 80       	ldd	r14, Y+4	; 0x04
    1860:	fd 80       	ldd	r15, Y+5	; 0x05
    1862:	0e 81       	ldd	r16, Y+6	; 0x06
    1864:	1f 81       	ldd	r17, Y+7	; 0x07
    1866:	91 01       	movw	r18, r2
    1868:	28 1b       	sub	r18, r24
    186a:	39 0b       	sbc	r19, r25
    186c:	b9 01       	movw	r22, r18
    186e:	37 ff       	sbrs	r19, 7
    1870:	04 c0       	rjmp	.+8      	; 0x187a <_fpadd_parts+0xb2>
    1872:	66 27       	eor	r22, r22
    1874:	77 27       	eor	r23, r23
    1876:	62 1b       	sub	r22, r18
    1878:	73 0b       	sbc	r23, r19
    187a:	60 32       	cpi	r22, 0x20	; 32
    187c:	71 05       	cpc	r23, r1
    187e:	0c f0       	brlt	.+2      	; 0x1882 <_fpadd_parts+0xba>
    1880:	61 c0       	rjmp	.+194    	; 0x1944 <_fpadd_parts+0x17c>
    1882:	12 16       	cp	r1, r18
    1884:	13 06       	cpc	r1, r19
    1886:	6c f5       	brge	.+90     	; 0x18e2 <_fpadd_parts+0x11a>
    1888:	37 01       	movw	r6, r14
    188a:	48 01       	movw	r8, r16
    188c:	06 2e       	mov	r0, r22
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <_fpadd_parts+0xd0>
    1890:	96 94       	lsr	r9
    1892:	87 94       	ror	r8
    1894:	77 94       	ror	r7
    1896:	67 94       	ror	r6
    1898:	0a 94       	dec	r0
    189a:	d2 f7       	brpl	.-12     	; 0x1890 <_fpadd_parts+0xc8>
    189c:	21 e0       	ldi	r18, 0x01	; 1
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <_fpadd_parts+0xe6>
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	44 1f       	adc	r20, r20
    18ac:	55 1f       	adc	r21, r21
    18ae:	6a 95       	dec	r22
    18b0:	d2 f7       	brpl	.-12     	; 0x18a6 <_fpadd_parts+0xde>
    18b2:	21 50       	subi	r18, 0x01	; 1
    18b4:	30 40       	sbci	r19, 0x00	; 0
    18b6:	40 40       	sbci	r20, 0x00	; 0
    18b8:	50 40       	sbci	r21, 0x00	; 0
    18ba:	2e 21       	and	r18, r14
    18bc:	3f 21       	and	r19, r15
    18be:	40 23       	and	r20, r16
    18c0:	51 23       	and	r21, r17
    18c2:	21 15       	cp	r18, r1
    18c4:	31 05       	cpc	r19, r1
    18c6:	41 05       	cpc	r20, r1
    18c8:	51 05       	cpc	r21, r1
    18ca:	21 f0       	breq	.+8      	; 0x18d4 <_fpadd_parts+0x10c>
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	79 01       	movw	r14, r18
    18d6:	8a 01       	movw	r16, r20
    18d8:	e6 28       	or	r14, r6
    18da:	f7 28       	or	r15, r7
    18dc:	08 29       	or	r16, r8
    18de:	19 29       	or	r17, r9
    18e0:	3c c0       	rjmp	.+120    	; 0x195a <_fpadd_parts+0x192>
    18e2:	23 2b       	or	r18, r19
    18e4:	d1 f1       	breq	.+116    	; 0x195a <_fpadd_parts+0x192>
    18e6:	26 0e       	add	r2, r22
    18e8:	37 1e       	adc	r3, r23
    18ea:	35 01       	movw	r6, r10
    18ec:	46 01       	movw	r8, r12
    18ee:	06 2e       	mov	r0, r22
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <_fpadd_parts+0x132>
    18f2:	96 94       	lsr	r9
    18f4:	87 94       	ror	r8
    18f6:	77 94       	ror	r7
    18f8:	67 94       	ror	r6
    18fa:	0a 94       	dec	r0
    18fc:	d2 f7       	brpl	.-12     	; 0x18f2 <_fpadd_parts+0x12a>
    18fe:	21 e0       	ldi	r18, 0x01	; 1
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <_fpadd_parts+0x148>
    1908:	22 0f       	add	r18, r18
    190a:	33 1f       	adc	r19, r19
    190c:	44 1f       	adc	r20, r20
    190e:	55 1f       	adc	r21, r21
    1910:	6a 95       	dec	r22
    1912:	d2 f7       	brpl	.-12     	; 0x1908 <_fpadd_parts+0x140>
    1914:	21 50       	subi	r18, 0x01	; 1
    1916:	30 40       	sbci	r19, 0x00	; 0
    1918:	40 40       	sbci	r20, 0x00	; 0
    191a:	50 40       	sbci	r21, 0x00	; 0
    191c:	2a 21       	and	r18, r10
    191e:	3b 21       	and	r19, r11
    1920:	4c 21       	and	r20, r12
    1922:	5d 21       	and	r21, r13
    1924:	21 15       	cp	r18, r1
    1926:	31 05       	cpc	r19, r1
    1928:	41 05       	cpc	r20, r1
    192a:	51 05       	cpc	r21, r1
    192c:	21 f0       	breq	.+8      	; 0x1936 <_fpadd_parts+0x16e>
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	59 01       	movw	r10, r18
    1938:	6a 01       	movw	r12, r20
    193a:	a6 28       	or	r10, r6
    193c:	b7 28       	or	r11, r7
    193e:	c8 28       	or	r12, r8
    1940:	d9 28       	or	r13, r9
    1942:	0b c0       	rjmp	.+22     	; 0x195a <_fpadd_parts+0x192>
    1944:	82 15       	cp	r24, r2
    1946:	93 05       	cpc	r25, r3
    1948:	2c f0       	brlt	.+10     	; 0x1954 <_fpadd_parts+0x18c>
    194a:	1c 01       	movw	r2, r24
    194c:	aa 24       	eor	r10, r10
    194e:	bb 24       	eor	r11, r11
    1950:	65 01       	movw	r12, r10
    1952:	03 c0       	rjmp	.+6      	; 0x195a <_fpadd_parts+0x192>
    1954:	ee 24       	eor	r14, r14
    1956:	ff 24       	eor	r15, r15
    1958:	87 01       	movw	r16, r14
    195a:	11 96       	adiw	r26, 0x01	; 1
    195c:	9c 91       	ld	r25, X
    195e:	d2 01       	movw	r26, r4
    1960:	11 96       	adiw	r26, 0x01	; 1
    1962:	8c 91       	ld	r24, X
    1964:	98 17       	cp	r25, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <_fpadd_parts+0x1a2>
    1968:	45 c0       	rjmp	.+138    	; 0x19f4 <_fpadd_parts+0x22c>
    196a:	99 23       	and	r25, r25
    196c:	39 f0       	breq	.+14     	; 0x197c <_fpadd_parts+0x1b4>
    196e:	a8 01       	movw	r20, r16
    1970:	97 01       	movw	r18, r14
    1972:	2a 19       	sub	r18, r10
    1974:	3b 09       	sbc	r19, r11
    1976:	4c 09       	sbc	r20, r12
    1978:	5d 09       	sbc	r21, r13
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <_fpadd_parts+0x1c0>
    197c:	a6 01       	movw	r20, r12
    197e:	95 01       	movw	r18, r10
    1980:	2e 19       	sub	r18, r14
    1982:	3f 09       	sbc	r19, r15
    1984:	40 0b       	sbc	r20, r16
    1986:	51 0b       	sbc	r21, r17
    1988:	57 fd       	sbrc	r21, 7
    198a:	08 c0       	rjmp	.+16     	; 0x199c <_fpadd_parts+0x1d4>
    198c:	11 82       	std	Z+1, r1	; 0x01
    198e:	33 82       	std	Z+3, r3	; 0x03
    1990:	22 82       	std	Z+2, r2	; 0x02
    1992:	24 83       	std	Z+4, r18	; 0x04
    1994:	35 83       	std	Z+5, r19	; 0x05
    1996:	46 83       	std	Z+6, r20	; 0x06
    1998:	57 83       	std	Z+7, r21	; 0x07
    199a:	1d c0       	rjmp	.+58     	; 0x19d6 <_fpadd_parts+0x20e>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	81 83       	std	Z+1, r24	; 0x01
    19a0:	33 82       	std	Z+3, r3	; 0x03
    19a2:	22 82       	std	Z+2, r2	; 0x02
    19a4:	88 27       	eor	r24, r24
    19a6:	99 27       	eor	r25, r25
    19a8:	dc 01       	movw	r26, r24
    19aa:	82 1b       	sub	r24, r18
    19ac:	93 0b       	sbc	r25, r19
    19ae:	a4 0b       	sbc	r26, r20
    19b0:	b5 0b       	sbc	r27, r21
    19b2:	84 83       	std	Z+4, r24	; 0x04
    19b4:	95 83       	std	Z+5, r25	; 0x05
    19b6:	a6 83       	std	Z+6, r26	; 0x06
    19b8:	b7 83       	std	Z+7, r27	; 0x07
    19ba:	0d c0       	rjmp	.+26     	; 0x19d6 <_fpadd_parts+0x20e>
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	44 1f       	adc	r20, r20
    19c2:	55 1f       	adc	r21, r21
    19c4:	24 83       	std	Z+4, r18	; 0x04
    19c6:	35 83       	std	Z+5, r19	; 0x05
    19c8:	46 83       	std	Z+6, r20	; 0x06
    19ca:	57 83       	std	Z+7, r21	; 0x07
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	93 83       	std	Z+3, r25	; 0x03
    19d4:	82 83       	std	Z+2, r24	; 0x02
    19d6:	24 81       	ldd	r18, Z+4	; 0x04
    19d8:	35 81       	ldd	r19, Z+5	; 0x05
    19da:	46 81       	ldd	r20, Z+6	; 0x06
    19dc:	57 81       	ldd	r21, Z+7	; 0x07
    19de:	da 01       	movw	r26, r20
    19e0:	c9 01       	movw	r24, r18
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	a1 09       	sbc	r26, r1
    19e6:	b1 09       	sbc	r27, r1
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	af 4f       	sbci	r26, 0xFF	; 255
    19ee:	bf 43       	sbci	r27, 0x3F	; 63
    19f0:	28 f3       	brcs	.-54     	; 0x19bc <_fpadd_parts+0x1f4>
    19f2:	0b c0       	rjmp	.+22     	; 0x1a0a <_fpadd_parts+0x242>
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	33 82       	std	Z+3, r3	; 0x03
    19f8:	22 82       	std	Z+2, r2	; 0x02
    19fa:	ea 0c       	add	r14, r10
    19fc:	fb 1c       	adc	r15, r11
    19fe:	0c 1d       	adc	r16, r12
    1a00:	1d 1d       	adc	r17, r13
    1a02:	e4 82       	std	Z+4, r14	; 0x04
    1a04:	f5 82       	std	Z+5, r15	; 0x05
    1a06:	06 83       	std	Z+6, r16	; 0x06
    1a08:	17 83       	std	Z+7, r17	; 0x07
    1a0a:	83 e0       	ldi	r24, 0x03	; 3
    1a0c:	80 83       	st	Z, r24
    1a0e:	24 81       	ldd	r18, Z+4	; 0x04
    1a10:	35 81       	ldd	r19, Z+5	; 0x05
    1a12:	46 81       	ldd	r20, Z+6	; 0x06
    1a14:	57 81       	ldd	r21, Z+7	; 0x07
    1a16:	57 ff       	sbrs	r21, 7
    1a18:	1a c0       	rjmp	.+52     	; 0x1a4e <_fpadd_parts+0x286>
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	aa 27       	eor	r26, r26
    1a1e:	97 fd       	sbrc	r25, 7
    1a20:	a0 95       	com	r26
    1a22:	ba 2f       	mov	r27, r26
    1a24:	81 70       	andi	r24, 0x01	; 1
    1a26:	90 70       	andi	r25, 0x00	; 0
    1a28:	a0 70       	andi	r26, 0x00	; 0
    1a2a:	b0 70       	andi	r27, 0x00	; 0
    1a2c:	56 95       	lsr	r21
    1a2e:	47 95       	ror	r20
    1a30:	37 95       	ror	r19
    1a32:	27 95       	ror	r18
    1a34:	82 2b       	or	r24, r18
    1a36:	93 2b       	or	r25, r19
    1a38:	a4 2b       	or	r26, r20
    1a3a:	b5 2b       	or	r27, r21
    1a3c:	84 83       	std	Z+4, r24	; 0x04
    1a3e:	95 83       	std	Z+5, r25	; 0x05
    1a40:	a6 83       	std	Z+6, r26	; 0x06
    1a42:	b7 83       	std	Z+7, r27	; 0x07
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	93 83       	std	Z+3, r25	; 0x03
    1a4c:	82 83       	std	Z+2, r24	; 0x02
    1a4e:	df 01       	movw	r26, r30
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <_fpadd_parts+0x28c>
    1a52:	d2 01       	movw	r26, r4
    1a54:	cd 01       	movw	r24, r26
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	e2 e1       	ldi	r30, 0x12	; 18
    1a5c:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__>

00001a60 <__subsf3>:
    1a60:	a0 e2       	ldi	r26, 0x20	; 32
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e3       	ldi	r30, 0x36	; 54
    1a66:	fd e0       	ldi	r31, 0x0D	; 13
    1a68:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x18>
    1a6c:	69 83       	std	Y+1, r22	; 0x01
    1a6e:	7a 83       	std	Y+2, r23	; 0x02
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	2d 83       	std	Y+5, r18	; 0x05
    1a76:	3e 83       	std	Y+6, r19	; 0x06
    1a78:	4f 83       	std	Y+7, r20	; 0x07
    1a7a:	58 87       	std	Y+8, r21	; 0x08
    1a7c:	e9 e0       	ldi	r30, 0x09	; 9
    1a7e:	ee 2e       	mov	r14, r30
    1a80:	f1 2c       	mov	r15, r1
    1a82:	ec 0e       	add	r14, r28
    1a84:	fd 1e       	adc	r15, r29
    1a86:	ce 01       	movw	r24, r28
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	b7 01       	movw	r22, r14
    1a8c:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1a90:	8e 01       	movw	r16, r28
    1a92:	0f 5e       	subi	r16, 0xEF	; 239
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	ce 01       	movw	r24, r28
    1a98:	05 96       	adiw	r24, 0x05	; 5
    1a9a:	b8 01       	movw	r22, r16
    1a9c:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1aa0:	8a 89       	ldd	r24, Y+18	; 0x12
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	89 27       	eor	r24, r25
    1aa6:	8a 8b       	std	Y+18, r24	; 0x12
    1aa8:	c7 01       	movw	r24, r14
    1aaa:	b8 01       	movw	r22, r16
    1aac:	ae 01       	movw	r20, r28
    1aae:	47 5e       	subi	r20, 0xE7	; 231
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_fpadd_parts>
    1ab6:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__pack_f>
    1aba:	a0 96       	adiw	r28, 0x20	; 32
    1abc:	e6 e0       	ldi	r30, 0x06	; 6
    1abe:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x18>

00001ac2 <__addsf3>:
    1ac2:	a0 e2       	ldi	r26, 0x20	; 32
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e7 e6       	ldi	r30, 0x67	; 103
    1ac8:	fd e0       	ldi	r31, 0x0D	; 13
    1aca:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x18>
    1ace:	69 83       	std	Y+1, r22	; 0x01
    1ad0:	7a 83       	std	Y+2, r23	; 0x02
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	9c 83       	std	Y+4, r25	; 0x04
    1ad6:	2d 83       	std	Y+5, r18	; 0x05
    1ad8:	3e 83       	std	Y+6, r19	; 0x06
    1ada:	4f 83       	std	Y+7, r20	; 0x07
    1adc:	58 87       	std	Y+8, r21	; 0x08
    1ade:	f9 e0       	ldi	r31, 0x09	; 9
    1ae0:	ef 2e       	mov	r14, r31
    1ae2:	f1 2c       	mov	r15, r1
    1ae4:	ec 0e       	add	r14, r28
    1ae6:	fd 1e       	adc	r15, r29
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	b7 01       	movw	r22, r14
    1aee:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1af2:	8e 01       	movw	r16, r28
    1af4:	0f 5e       	subi	r16, 0xEF	; 239
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	ce 01       	movw	r24, r28
    1afa:	05 96       	adiw	r24, 0x05	; 5
    1afc:	b8 01       	movw	r22, r16
    1afe:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1b02:	c7 01       	movw	r24, r14
    1b04:	b8 01       	movw	r22, r16
    1b06:	ae 01       	movw	r20, r28
    1b08:	47 5e       	subi	r20, 0xE7	; 231
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_fpadd_parts>
    1b10:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__pack_f>
    1b14:	a0 96       	adiw	r28, 0x20	; 32
    1b16:	e6 e0       	ldi	r30, 0x06	; 6
    1b18:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x18>

00001b1c <__mulsf3>:
    1b1c:	a0 e2       	ldi	r26, 0x20	; 32
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e4 e9       	ldi	r30, 0x94	; 148
    1b22:	fd e0       	ldi	r31, 0x0D	; 13
    1b24:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__>
    1b28:	69 83       	std	Y+1, r22	; 0x01
    1b2a:	7a 83       	std	Y+2, r23	; 0x02
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	2d 83       	std	Y+5, r18	; 0x05
    1b32:	3e 83       	std	Y+6, r19	; 0x06
    1b34:	4f 83       	std	Y+7, r20	; 0x07
    1b36:	58 87       	std	Y+8, r21	; 0x08
    1b38:	ce 01       	movw	r24, r28
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	be 01       	movw	r22, r28
    1b3e:	67 5f       	subi	r22, 0xF7	; 247
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1b46:	ce 01       	movw	r24, r28
    1b48:	05 96       	adiw	r24, 0x05	; 5
    1b4a:	be 01       	movw	r22, r28
    1b4c:	6f 5e       	subi	r22, 0xEF	; 239
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1b54:	99 85       	ldd	r25, Y+9	; 0x09
    1b56:	92 30       	cpi	r25, 0x02	; 2
    1b58:	88 f0       	brcs	.+34     	; 0x1b7c <__mulsf3+0x60>
    1b5a:	89 89       	ldd	r24, Y+17	; 0x11
    1b5c:	82 30       	cpi	r24, 0x02	; 2
    1b5e:	c8 f0       	brcs	.+50     	; 0x1b92 <__mulsf3+0x76>
    1b60:	94 30       	cpi	r25, 0x04	; 4
    1b62:	19 f4       	brne	.+6      	; 0x1b6a <__mulsf3+0x4e>
    1b64:	82 30       	cpi	r24, 0x02	; 2
    1b66:	51 f4       	brne	.+20     	; 0x1b7c <__mulsf3+0x60>
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <__mulsf3+0x56>
    1b6a:	84 30       	cpi	r24, 0x04	; 4
    1b6c:	29 f4       	brne	.+10     	; 0x1b78 <__mulsf3+0x5c>
    1b6e:	92 30       	cpi	r25, 0x02	; 2
    1b70:	81 f4       	brne	.+32     	; 0x1b92 <__mulsf3+0x76>
    1b72:	80 e6       	ldi	r24, 0x60	; 96
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	c6 c0       	rjmp	.+396    	; 0x1d04 <__mulsf3+0x1e8>
    1b78:	92 30       	cpi	r25, 0x02	; 2
    1b7a:	49 f4       	brne	.+18     	; 0x1b8e <__mulsf3+0x72>
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	8a 89       	ldd	r24, Y+18	; 0x12
    1b82:	98 13       	cpse	r25, r24
    1b84:	21 e0       	ldi	r18, 0x01	; 1
    1b86:	2a 87       	std	Y+10, r18	; 0x0a
    1b88:	ce 01       	movw	r24, r28
    1b8a:	09 96       	adiw	r24, 0x09	; 9
    1b8c:	bb c0       	rjmp	.+374    	; 0x1d04 <__mulsf3+0x1e8>
    1b8e:	82 30       	cpi	r24, 0x02	; 2
    1b90:	49 f4       	brne	.+18     	; 0x1ba4 <__mulsf3+0x88>
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b96:	8a 89       	ldd	r24, Y+18	; 0x12
    1b98:	98 13       	cpse	r25, r24
    1b9a:	21 e0       	ldi	r18, 0x01	; 1
    1b9c:	2a 8b       	std	Y+18, r18	; 0x12
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	41 96       	adiw	r24, 0x11	; 17
    1ba2:	b0 c0       	rjmp	.+352    	; 0x1d04 <__mulsf3+0x1e8>
    1ba4:	2d 84       	ldd	r2, Y+13	; 0x0d
    1ba6:	3e 84       	ldd	r3, Y+14	; 0x0e
    1ba8:	4f 84       	ldd	r4, Y+15	; 0x0f
    1baa:	58 88       	ldd	r5, Y+16	; 0x10
    1bac:	6d 88       	ldd	r6, Y+21	; 0x15
    1bae:	7e 88       	ldd	r7, Y+22	; 0x16
    1bb0:	8f 88       	ldd	r8, Y+23	; 0x17
    1bb2:	98 8c       	ldd	r9, Y+24	; 0x18
    1bb4:	ee 24       	eor	r14, r14
    1bb6:	ff 24       	eor	r15, r15
    1bb8:	87 01       	movw	r16, r14
    1bba:	aa 24       	eor	r10, r10
    1bbc:	bb 24       	eor	r11, r11
    1bbe:	65 01       	movw	r12, r10
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	e0 e0       	ldi	r30, 0x00	; 0
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	c1 01       	movw	r24, r2
    1bce:	81 70       	andi	r24, 0x01	; 1
    1bd0:	90 70       	andi	r25, 0x00	; 0
    1bd2:	89 2b       	or	r24, r25
    1bd4:	e9 f0       	breq	.+58     	; 0x1c10 <__mulsf3+0xf4>
    1bd6:	e6 0c       	add	r14, r6
    1bd8:	f7 1c       	adc	r15, r7
    1bda:	08 1d       	adc	r16, r8
    1bdc:	19 1d       	adc	r17, r9
    1bde:	9a 01       	movw	r18, r20
    1be0:	ab 01       	movw	r20, r22
    1be2:	2a 0d       	add	r18, r10
    1be4:	3b 1d       	adc	r19, r11
    1be6:	4c 1d       	adc	r20, r12
    1be8:	5d 1d       	adc	r21, r13
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e6 14       	cp	r14, r6
    1bf4:	f7 04       	cpc	r15, r7
    1bf6:	08 05       	cpc	r16, r8
    1bf8:	19 05       	cpc	r17, r9
    1bfa:	20 f4       	brcc	.+8      	; 0x1c04 <__mulsf3+0xe8>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	ba 01       	movw	r22, r20
    1c06:	a9 01       	movw	r20, r18
    1c08:	48 0f       	add	r20, r24
    1c0a:	59 1f       	adc	r21, r25
    1c0c:	6a 1f       	adc	r22, r26
    1c0e:	7b 1f       	adc	r23, r27
    1c10:	aa 0c       	add	r10, r10
    1c12:	bb 1c       	adc	r11, r11
    1c14:	cc 1c       	adc	r12, r12
    1c16:	dd 1c       	adc	r13, r13
    1c18:	97 fe       	sbrs	r9, 7
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <__mulsf3+0x110>
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	a8 2a       	or	r10, r24
    1c26:	b9 2a       	or	r11, r25
    1c28:	ca 2a       	or	r12, r26
    1c2a:	db 2a       	or	r13, r27
    1c2c:	31 96       	adiw	r30, 0x01	; 1
    1c2e:	e0 32       	cpi	r30, 0x20	; 32
    1c30:	f1 05       	cpc	r31, r1
    1c32:	49 f0       	breq	.+18     	; 0x1c46 <__mulsf3+0x12a>
    1c34:	66 0c       	add	r6, r6
    1c36:	77 1c       	adc	r7, r7
    1c38:	88 1c       	adc	r8, r8
    1c3a:	99 1c       	adc	r9, r9
    1c3c:	56 94       	lsr	r5
    1c3e:	47 94       	ror	r4
    1c40:	37 94       	ror	r3
    1c42:	27 94       	ror	r2
    1c44:	c3 cf       	rjmp	.-122    	; 0x1bcc <__mulsf3+0xb0>
    1c46:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c48:	ea 89       	ldd	r30, Y+18	; 0x12
    1c4a:	2b 89       	ldd	r18, Y+19	; 0x13
    1c4c:	3c 89       	ldd	r19, Y+20	; 0x14
    1c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c50:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c52:	28 0f       	add	r18, r24
    1c54:	39 1f       	adc	r19, r25
    1c56:	2e 5f       	subi	r18, 0xFE	; 254
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5a:	17 c0       	rjmp	.+46     	; 0x1c8a <__mulsf3+0x16e>
    1c5c:	ca 01       	movw	r24, r20
    1c5e:	81 70       	andi	r24, 0x01	; 1
    1c60:	90 70       	andi	r25, 0x00	; 0
    1c62:	89 2b       	or	r24, r25
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <__mulsf3+0x162>
    1c66:	16 95       	lsr	r17
    1c68:	07 95       	ror	r16
    1c6a:	f7 94       	ror	r15
    1c6c:	e7 94       	ror	r14
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e8       	ldi	r27, 0x80	; 128
    1c76:	e8 2a       	or	r14, r24
    1c78:	f9 2a       	or	r15, r25
    1c7a:	0a 2b       	or	r16, r26
    1c7c:	1b 2b       	or	r17, r27
    1c7e:	76 95       	lsr	r23
    1c80:	67 95       	ror	r22
    1c82:	57 95       	ror	r21
    1c84:	47 95       	ror	r20
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	77 fd       	sbrc	r23, 7
    1c8c:	e7 cf       	rjmp	.-50     	; 0x1c5c <__mulsf3+0x140>
    1c8e:	0c c0       	rjmp	.+24     	; 0x1ca8 <__mulsf3+0x18c>
    1c90:	44 0f       	add	r20, r20
    1c92:	55 1f       	adc	r21, r21
    1c94:	66 1f       	adc	r22, r22
    1c96:	77 1f       	adc	r23, r23
    1c98:	17 fd       	sbrc	r17, 7
    1c9a:	41 60       	ori	r20, 0x01	; 1
    1c9c:	ee 0c       	add	r14, r14
    1c9e:	ff 1c       	adc	r15, r15
    1ca0:	00 1f       	adc	r16, r16
    1ca2:	11 1f       	adc	r17, r17
    1ca4:	21 50       	subi	r18, 0x01	; 1
    1ca6:	30 40       	sbci	r19, 0x00	; 0
    1ca8:	40 30       	cpi	r20, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	59 07       	cpc	r21, r25
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	69 07       	cpc	r22, r25
    1cb2:	90 e4       	ldi	r25, 0x40	; 64
    1cb4:	79 07       	cpc	r23, r25
    1cb6:	60 f3       	brcs	.-40     	; 0x1c90 <__mulsf3+0x174>
    1cb8:	2b 8f       	std	Y+27, r18	; 0x1b
    1cba:	3c 8f       	std	Y+28, r19	; 0x1c
    1cbc:	db 01       	movw	r26, r22
    1cbe:	ca 01       	movw	r24, r20
    1cc0:	8f 77       	andi	r24, 0x7F	; 127
    1cc2:	90 70       	andi	r25, 0x00	; 0
    1cc4:	a0 70       	andi	r26, 0x00	; 0
    1cc6:	b0 70       	andi	r27, 0x00	; 0
    1cc8:	80 34       	cpi	r24, 0x40	; 64
    1cca:	91 05       	cpc	r25, r1
    1ccc:	a1 05       	cpc	r26, r1
    1cce:	b1 05       	cpc	r27, r1
    1cd0:	61 f4       	brne	.+24     	; 0x1cea <__mulsf3+0x1ce>
    1cd2:	47 fd       	sbrc	r20, 7
    1cd4:	0a c0       	rjmp	.+20     	; 0x1cea <__mulsf3+0x1ce>
    1cd6:	e1 14       	cp	r14, r1
    1cd8:	f1 04       	cpc	r15, r1
    1cda:	01 05       	cpc	r16, r1
    1cdc:	11 05       	cpc	r17, r1
    1cde:	29 f0       	breq	.+10     	; 0x1cea <__mulsf3+0x1ce>
    1ce0:	40 5c       	subi	r20, 0xC0	; 192
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	6f 4f       	sbci	r22, 0xFF	; 255
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	40 78       	andi	r20, 0x80	; 128
    1cea:	1a 8e       	std	Y+26, r1	; 0x1a
    1cec:	fe 17       	cp	r31, r30
    1cee:	11 f0       	breq	.+4      	; 0x1cf4 <__mulsf3+0x1d8>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	8a 8f       	std	Y+26, r24	; 0x1a
    1cf4:	4d 8f       	std	Y+29, r20	; 0x1d
    1cf6:	5e 8f       	std	Y+30, r21	; 0x1e
    1cf8:	6f 8f       	std	Y+31, r22	; 0x1f
    1cfa:	78 a3       	std	Y+32, r23	; 0x20
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	89 8f       	std	Y+25, r24	; 0x19
    1d00:	ce 01       	movw	r24, r28
    1d02:	49 96       	adiw	r24, 0x19	; 25
    1d04:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__pack_f>
    1d08:	a0 96       	adiw	r28, 0x20	; 32
    1d0a:	e2 e1       	ldi	r30, 0x12	; 18
    1d0c:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__>

00001d10 <__gtsf2>:
    1d10:	a8 e1       	ldi	r26, 0x18	; 24
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	ee e8       	ldi	r30, 0x8E	; 142
    1d16:	fe e0       	ldi	r31, 0x0E	; 14
    1d18:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x18>
    1d1c:	69 83       	std	Y+1, r22	; 0x01
    1d1e:	7a 83       	std	Y+2, r23	; 0x02
    1d20:	8b 83       	std	Y+3, r24	; 0x03
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	2d 83       	std	Y+5, r18	; 0x05
    1d26:	3e 83       	std	Y+6, r19	; 0x06
    1d28:	4f 83       	std	Y+7, r20	; 0x07
    1d2a:	58 87       	std	Y+8, r21	; 0x08
    1d2c:	89 e0       	ldi	r24, 0x09	; 9
    1d2e:	e8 2e       	mov	r14, r24
    1d30:	f1 2c       	mov	r15, r1
    1d32:	ec 0e       	add	r14, r28
    1d34:	fd 1e       	adc	r15, r29
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1d40:	8e 01       	movw	r16, r28
    1d42:	0f 5e       	subi	r16, 0xEF	; 239
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    1d46:	ce 01       	movw	r24, r28
    1d48:	05 96       	adiw	r24, 0x05	; 5
    1d4a:	b8 01       	movw	r22, r16
    1d4c:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	40 f0       	brcs	.+16     	; 0x1d66 <__gtsf2+0x56>
    1d56:	89 89       	ldd	r24, Y+17	; 0x11
    1d58:	82 30       	cpi	r24, 0x02	; 2
    1d5a:	28 f0       	brcs	.+10     	; 0x1d66 <__gtsf2+0x56>
    1d5c:	c7 01       	movw	r24, r14
    1d5e:	b8 01       	movw	r22, r16
    1d60:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fpcmp_parts_f>
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <__gtsf2+0x58>
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	68 96       	adiw	r28, 0x18	; 24
    1d6a:	e6 e0       	ldi	r30, 0x06	; 6
    1d6c:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x18>

00001d70 <__gesf2>:
    1d70:	a8 e1       	ldi	r26, 0x18	; 24
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ee eb       	ldi	r30, 0xBE	; 190
    1d76:	fe e0       	ldi	r31, 0x0E	; 14
    1d78:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x18>
    1d7c:	69 83       	std	Y+1, r22	; 0x01
    1d7e:	7a 83       	std	Y+2, r23	; 0x02
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	2d 83       	std	Y+5, r18	; 0x05
    1d86:	3e 83       	std	Y+6, r19	; 0x06
    1d88:	4f 83       	std	Y+7, r20	; 0x07
    1d8a:	58 87       	std	Y+8, r21	; 0x08
    1d8c:	89 e0       	ldi	r24, 0x09	; 9
    1d8e:	e8 2e       	mov	r14, r24
    1d90:	f1 2c       	mov	r15, r1
    1d92:	ec 0e       	add	r14, r28
    1d94:	fd 1e       	adc	r15, r29
    1d96:	ce 01       	movw	r24, r28
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	b7 01       	movw	r22, r14
    1d9c:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1da0:	8e 01       	movw	r16, r28
    1da2:	0f 5e       	subi	r16, 0xEF	; 239
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	ce 01       	movw	r24, r28
    1da8:	05 96       	adiw	r24, 0x05	; 5
    1daa:	b8 01       	movw	r22, r16
    1dac:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	40 f0       	brcs	.+16     	; 0x1dc6 <__gesf2+0x56>
    1db6:	89 89       	ldd	r24, Y+17	; 0x11
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	28 f0       	brcs	.+10     	; 0x1dc6 <__gesf2+0x56>
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	b8 01       	movw	r22, r16
    1dc0:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fpcmp_parts_f>
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <__gesf2+0x58>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	68 96       	adiw	r28, 0x18	; 24
    1dca:	e6 e0       	ldi	r30, 0x06	; 6
    1dcc:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x18>

00001dd0 <__ltsf2>:
    1dd0:	a8 e1       	ldi	r26, 0x18	; 24
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	ee ee       	ldi	r30, 0xEE	; 238
    1dd6:	fe e0       	ldi	r31, 0x0E	; 14
    1dd8:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x18>
    1ddc:	69 83       	std	Y+1, r22	; 0x01
    1dde:	7a 83       	std	Y+2, r23	; 0x02
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	2d 83       	std	Y+5, r18	; 0x05
    1de6:	3e 83       	std	Y+6, r19	; 0x06
    1de8:	4f 83       	std	Y+7, r20	; 0x07
    1dea:	58 87       	std	Y+8, r21	; 0x08
    1dec:	89 e0       	ldi	r24, 0x09	; 9
    1dee:	e8 2e       	mov	r14, r24
    1df0:	f1 2c       	mov	r15, r1
    1df2:	ec 0e       	add	r14, r28
    1df4:	fd 1e       	adc	r15, r29
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	b7 01       	movw	r22, r14
    1dfc:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1e00:	8e 01       	movw	r16, r28
    1e02:	0f 5e       	subi	r16, 0xEF	; 239
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	ce 01       	movw	r24, r28
    1e08:	05 96       	adiw	r24, 0x05	; 5
    1e0a:	b8 01       	movw	r22, r16
    1e0c:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1e10:	89 85       	ldd	r24, Y+9	; 0x09
    1e12:	82 30       	cpi	r24, 0x02	; 2
    1e14:	40 f0       	brcs	.+16     	; 0x1e26 <__ltsf2+0x56>
    1e16:	89 89       	ldd	r24, Y+17	; 0x11
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	28 f0       	brcs	.+10     	; 0x1e26 <__ltsf2+0x56>
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	b8 01       	movw	r22, r16
    1e20:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fpcmp_parts_f>
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <__ltsf2+0x58>
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	68 96       	adiw	r28, 0x18	; 24
    1e2a:	e6 e0       	ldi	r30, 0x06	; 6
    1e2c:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x18>

00001e30 <__fixsfsi>:
    1e30:	ac e0       	ldi	r26, 0x0C	; 12
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ee e1       	ldi	r30, 0x1E	; 30
    1e36:	ff e0       	ldi	r31, 0x0F	; 15
    1e38:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x20>
    1e3c:	69 83       	std	Y+1, r22	; 0x01
    1e3e:	7a 83       	std	Y+2, r23	; 0x02
    1e40:	8b 83       	std	Y+3, r24	; 0x03
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	ce 01       	movw	r24, r28
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	be 01       	movw	r22, r28
    1e4a:	6b 5f       	subi	r22, 0xFB	; 251
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	0e 94 41 10 	call	0x2082	; 0x2082 <__unpack_f>
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	82 30       	cpi	r24, 0x02	; 2
    1e56:	61 f1       	breq	.+88     	; 0x1eb0 <__fixsfsi+0x80>
    1e58:	82 30       	cpi	r24, 0x02	; 2
    1e5a:	50 f1       	brcs	.+84     	; 0x1eb0 <__fixsfsi+0x80>
    1e5c:	84 30       	cpi	r24, 0x04	; 4
    1e5e:	21 f4       	brne	.+8      	; 0x1e68 <__fixsfsi+0x38>
    1e60:	8e 81       	ldd	r24, Y+6	; 0x06
    1e62:	88 23       	and	r24, r24
    1e64:	51 f1       	breq	.+84     	; 0x1eba <__fixsfsi+0x8a>
    1e66:	2e c0       	rjmp	.+92     	; 0x1ec4 <__fixsfsi+0x94>
    1e68:	2f 81       	ldd	r18, Y+7	; 0x07
    1e6a:	38 85       	ldd	r19, Y+8	; 0x08
    1e6c:	37 fd       	sbrc	r19, 7
    1e6e:	20 c0       	rjmp	.+64     	; 0x1eb0 <__fixsfsi+0x80>
    1e70:	6e 81       	ldd	r22, Y+6	; 0x06
    1e72:	2f 31       	cpi	r18, 0x1F	; 31
    1e74:	31 05       	cpc	r19, r1
    1e76:	1c f0       	brlt	.+6      	; 0x1e7e <__fixsfsi+0x4e>
    1e78:	66 23       	and	r22, r22
    1e7a:	f9 f0       	breq	.+62     	; 0x1eba <__fixsfsi+0x8a>
    1e7c:	23 c0       	rjmp	.+70     	; 0x1ec4 <__fixsfsi+0x94>
    1e7e:	8e e1       	ldi	r24, 0x1E	; 30
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	82 1b       	sub	r24, r18
    1e84:	93 0b       	sbc	r25, r19
    1e86:	29 85       	ldd	r18, Y+9	; 0x09
    1e88:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e8c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <__fixsfsi+0x68>
    1e90:	56 95       	lsr	r21
    1e92:	47 95       	ror	r20
    1e94:	37 95       	ror	r19
    1e96:	27 95       	ror	r18
    1e98:	8a 95       	dec	r24
    1e9a:	d2 f7       	brpl	.-12     	; 0x1e90 <__fixsfsi+0x60>
    1e9c:	66 23       	and	r22, r22
    1e9e:	b1 f0       	breq	.+44     	; 0x1ecc <__fixsfsi+0x9c>
    1ea0:	50 95       	com	r21
    1ea2:	40 95       	com	r20
    1ea4:	30 95       	com	r19
    1ea6:	21 95       	neg	r18
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	4f 4f       	sbci	r20, 0xFF	; 255
    1eac:	5f 4f       	sbci	r21, 0xFF	; 255
    1eae:	0e c0       	rjmp	.+28     	; 0x1ecc <__fixsfsi+0x9c>
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	09 c0       	rjmp	.+18     	; 0x1ecc <__fixsfsi+0x9c>
    1eba:	2f ef       	ldi	r18, 0xFF	; 255
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f ef       	ldi	r20, 0xFF	; 255
    1ec0:	5f e7       	ldi	r21, 0x7F	; 127
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <__fixsfsi+0x9c>
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	50 e8       	ldi	r21, 0x80	; 128
    1ecc:	b9 01       	movw	r22, r18
    1ece:	ca 01       	movw	r24, r20
    1ed0:	2c 96       	adiw	r28, 0x0c	; 12
    1ed2:	e2 e0       	ldi	r30, 0x02	; 2
    1ed4:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x20>

00001ed8 <__pack_f>:
    1ed8:	df 92       	push	r13
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e4 80       	ldd	r14, Z+4	; 0x04
    1ee6:	f5 80       	ldd	r15, Z+5	; 0x05
    1ee8:	06 81       	ldd	r16, Z+6	; 0x06
    1eea:	17 81       	ldd	r17, Z+7	; 0x07
    1eec:	d1 80       	ldd	r13, Z+1	; 0x01
    1eee:	80 81       	ld	r24, Z
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	48 f4       	brcc	.+18     	; 0x1f06 <__pack_f+0x2e>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e1       	ldi	r26, 0x10	; 16
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e8 2a       	or	r14, r24
    1efe:	f9 2a       	or	r15, r25
    1f00:	0a 2b       	or	r16, r26
    1f02:	1b 2b       	or	r17, r27
    1f04:	a5 c0       	rjmp	.+330    	; 0x2050 <__pack_f+0x178>
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <__pack_f+0x34>
    1f0a:	9f c0       	rjmp	.+318    	; 0x204a <__pack_f+0x172>
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	21 f4       	brne	.+8      	; 0x1f18 <__pack_f+0x40>
    1f10:	ee 24       	eor	r14, r14
    1f12:	ff 24       	eor	r15, r15
    1f14:	87 01       	movw	r16, r14
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <__pack_f+0x4a>
    1f18:	e1 14       	cp	r14, r1
    1f1a:	f1 04       	cpc	r15, r1
    1f1c:	01 05       	cpc	r16, r1
    1f1e:	11 05       	cpc	r17, r1
    1f20:	19 f4       	brne	.+6      	; 0x1f28 <__pack_f+0x50>
    1f22:	e0 e0       	ldi	r30, 0x00	; 0
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	96 c0       	rjmp	.+300    	; 0x2054 <__pack_f+0x17c>
    1f28:	62 81       	ldd	r22, Z+2	; 0x02
    1f2a:	73 81       	ldd	r23, Z+3	; 0x03
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	62 38       	cpi	r22, 0x82	; 130
    1f30:	79 07       	cpc	r23, r25
    1f32:	0c f0       	brlt	.+2      	; 0x1f36 <__pack_f+0x5e>
    1f34:	5b c0       	rjmp	.+182    	; 0x1fec <__pack_f+0x114>
    1f36:	22 e8       	ldi	r18, 0x82	; 130
    1f38:	3f ef       	ldi	r19, 0xFF	; 255
    1f3a:	26 1b       	sub	r18, r22
    1f3c:	37 0b       	sbc	r19, r23
    1f3e:	2a 31       	cpi	r18, 0x1A	; 26
    1f40:	31 05       	cpc	r19, r1
    1f42:	2c f0       	brlt	.+10     	; 0x1f4e <__pack_f+0x76>
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	2a c0       	rjmp	.+84     	; 0x1fa2 <__pack_f+0xca>
    1f4e:	b8 01       	movw	r22, r16
    1f50:	a7 01       	movw	r20, r14
    1f52:	02 2e       	mov	r0, r18
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <__pack_f+0x86>
    1f56:	76 95       	lsr	r23
    1f58:	67 95       	ror	r22
    1f5a:	57 95       	ror	r21
    1f5c:	47 95       	ror	r20
    1f5e:	0a 94       	dec	r0
    1f60:	d2 f7       	brpl	.-12     	; 0x1f56 <__pack_f+0x7e>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <__pack_f+0x9c>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	aa 1f       	adc	r26, r26
    1f72:	bb 1f       	adc	r27, r27
    1f74:	2a 95       	dec	r18
    1f76:	d2 f7       	brpl	.-12     	; 0x1f6c <__pack_f+0x94>
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	a1 09       	sbc	r26, r1
    1f7c:	b1 09       	sbc	r27, r1
    1f7e:	8e 21       	and	r24, r14
    1f80:	9f 21       	and	r25, r15
    1f82:	a0 23       	and	r26, r16
    1f84:	b1 23       	and	r27, r17
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	a1 05       	cpc	r26, r1
    1f8a:	b1 05       	cpc	r27, r1
    1f8c:	21 f0       	breq	.+8      	; 0x1f96 <__pack_f+0xbe>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e0       	ldi	r26, 0x00	; 0
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	9a 01       	movw	r18, r20
    1f98:	ab 01       	movw	r20, r22
    1f9a:	28 2b       	or	r18, r24
    1f9c:	39 2b       	or	r19, r25
    1f9e:	4a 2b       	or	r20, r26
    1fa0:	5b 2b       	or	r21, r27
    1fa2:	da 01       	movw	r26, r20
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	8f 77       	andi	r24, 0x7F	; 127
    1fa8:	90 70       	andi	r25, 0x00	; 0
    1faa:	a0 70       	andi	r26, 0x00	; 0
    1fac:	b0 70       	andi	r27, 0x00	; 0
    1fae:	80 34       	cpi	r24, 0x40	; 64
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	a1 05       	cpc	r26, r1
    1fb4:	b1 05       	cpc	r27, r1
    1fb6:	39 f4       	brne	.+14     	; 0x1fc6 <__pack_f+0xee>
    1fb8:	27 ff       	sbrs	r18, 7
    1fba:	09 c0       	rjmp	.+18     	; 0x1fce <__pack_f+0xf6>
    1fbc:	20 5c       	subi	r18, 0xC0	; 192
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	4f 4f       	sbci	r20, 0xFF	; 255
    1fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc4:	04 c0       	rjmp	.+8      	; 0x1fce <__pack_f+0xf6>
    1fc6:	21 5c       	subi	r18, 0xC1	; 193
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	4f 4f       	sbci	r20, 0xFF	; 255
    1fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fce:	e0 e0       	ldi	r30, 0x00	; 0
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	20 30       	cpi	r18, 0x00	; 0
    1fd4:	a0 e0       	ldi	r26, 0x00	; 0
    1fd6:	3a 07       	cpc	r19, r26
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	4a 07       	cpc	r20, r26
    1fdc:	a0 e4       	ldi	r26, 0x40	; 64
    1fde:	5a 07       	cpc	r21, r26
    1fe0:	10 f0       	brcs	.+4      	; 0x1fe6 <__pack_f+0x10e>
    1fe2:	e1 e0       	ldi	r30, 0x01	; 1
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	79 01       	movw	r14, r18
    1fe8:	8a 01       	movw	r16, r20
    1fea:	27 c0       	rjmp	.+78     	; 0x203a <__pack_f+0x162>
    1fec:	60 38       	cpi	r22, 0x80	; 128
    1fee:	71 05       	cpc	r23, r1
    1ff0:	64 f5       	brge	.+88     	; 0x204a <__pack_f+0x172>
    1ff2:	fb 01       	movw	r30, r22
    1ff4:	e1 58       	subi	r30, 0x81	; 129
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	d8 01       	movw	r26, r16
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	8f 77       	andi	r24, 0x7F	; 127
    1ffe:	90 70       	andi	r25, 0x00	; 0
    2000:	a0 70       	andi	r26, 0x00	; 0
    2002:	b0 70       	andi	r27, 0x00	; 0
    2004:	80 34       	cpi	r24, 0x40	; 64
    2006:	91 05       	cpc	r25, r1
    2008:	a1 05       	cpc	r26, r1
    200a:	b1 05       	cpc	r27, r1
    200c:	39 f4       	brne	.+14     	; 0x201c <__pack_f+0x144>
    200e:	e7 fe       	sbrs	r14, 7
    2010:	0d c0       	rjmp	.+26     	; 0x202c <__pack_f+0x154>
    2012:	80 e4       	ldi	r24, 0x40	; 64
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <__pack_f+0x14c>
    201c:	8f e3       	ldi	r24, 0x3F	; 63
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 e0       	ldi	r26, 0x00	; 0
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e8 0e       	add	r14, r24
    2026:	f9 1e       	adc	r15, r25
    2028:	0a 1f       	adc	r16, r26
    202a:	1b 1f       	adc	r17, r27
    202c:	17 ff       	sbrs	r17, 7
    202e:	05 c0       	rjmp	.+10     	; 0x203a <__pack_f+0x162>
    2030:	16 95       	lsr	r17
    2032:	07 95       	ror	r16
    2034:	f7 94       	ror	r15
    2036:	e7 94       	ror	r14
    2038:	31 96       	adiw	r30, 0x01	; 1
    203a:	87 e0       	ldi	r24, 0x07	; 7
    203c:	16 95       	lsr	r17
    203e:	07 95       	ror	r16
    2040:	f7 94       	ror	r15
    2042:	e7 94       	ror	r14
    2044:	8a 95       	dec	r24
    2046:	d1 f7       	brne	.-12     	; 0x203c <__pack_f+0x164>
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <__pack_f+0x17c>
    204a:	ee 24       	eor	r14, r14
    204c:	ff 24       	eor	r15, r15
    204e:	87 01       	movw	r16, r14
    2050:	ef ef       	ldi	r30, 0xFF	; 255
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	6e 2f       	mov	r22, r30
    2056:	67 95       	ror	r22
    2058:	66 27       	eor	r22, r22
    205a:	67 95       	ror	r22
    205c:	90 2f       	mov	r25, r16
    205e:	9f 77       	andi	r25, 0x7F	; 127
    2060:	d7 94       	ror	r13
    2062:	dd 24       	eor	r13, r13
    2064:	d7 94       	ror	r13
    2066:	8e 2f       	mov	r24, r30
    2068:	86 95       	lsr	r24
    206a:	49 2f       	mov	r20, r25
    206c:	46 2b       	or	r20, r22
    206e:	58 2f       	mov	r21, r24
    2070:	5d 29       	or	r21, r13
    2072:	b7 01       	movw	r22, r14
    2074:	ca 01       	movw	r24, r20
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	df 90       	pop	r13
    2080:	08 95       	ret

00002082 <__unpack_f>:
    2082:	fc 01       	movw	r30, r24
    2084:	db 01       	movw	r26, r22
    2086:	40 81       	ld	r20, Z
    2088:	51 81       	ldd	r21, Z+1	; 0x01
    208a:	22 81       	ldd	r18, Z+2	; 0x02
    208c:	62 2f       	mov	r22, r18
    208e:	6f 77       	andi	r22, 0x7F	; 127
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	22 1f       	adc	r18, r18
    2094:	22 27       	eor	r18, r18
    2096:	22 1f       	adc	r18, r18
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	89 2f       	mov	r24, r25
    209c:	88 0f       	add	r24, r24
    209e:	82 2b       	or	r24, r18
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	99 1f       	adc	r25, r25
    20a6:	99 27       	eor	r25, r25
    20a8:	99 1f       	adc	r25, r25
    20aa:	11 96       	adiw	r26, 0x01	; 1
    20ac:	9c 93       	st	X, r25
    20ae:	11 97       	sbiw	r26, 0x01	; 1
    20b0:	21 15       	cp	r18, r1
    20b2:	31 05       	cpc	r19, r1
    20b4:	a9 f5       	brne	.+106    	; 0x2120 <__unpack_f+0x9e>
    20b6:	41 15       	cp	r20, r1
    20b8:	51 05       	cpc	r21, r1
    20ba:	61 05       	cpc	r22, r1
    20bc:	71 05       	cpc	r23, r1
    20be:	11 f4       	brne	.+4      	; 0x20c4 <__unpack_f+0x42>
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	37 c0       	rjmp	.+110    	; 0x2132 <__unpack_f+0xb0>
    20c4:	82 e8       	ldi	r24, 0x82	; 130
    20c6:	9f ef       	ldi	r25, 0xFF	; 255
    20c8:	13 96       	adiw	r26, 0x03	; 3
    20ca:	9c 93       	st	X, r25
    20cc:	8e 93       	st	-X, r24
    20ce:	12 97       	sbiw	r26, 0x02	; 2
    20d0:	9a 01       	movw	r18, r20
    20d2:	ab 01       	movw	r20, r22
    20d4:	67 e0       	ldi	r22, 0x07	; 7
    20d6:	22 0f       	add	r18, r18
    20d8:	33 1f       	adc	r19, r19
    20da:	44 1f       	adc	r20, r20
    20dc:	55 1f       	adc	r21, r21
    20de:	6a 95       	dec	r22
    20e0:	d1 f7       	brne	.-12     	; 0x20d6 <__unpack_f+0x54>
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	8c 93       	st	X, r24
    20e6:	0d c0       	rjmp	.+26     	; 0x2102 <__unpack_f+0x80>
    20e8:	22 0f       	add	r18, r18
    20ea:	33 1f       	adc	r19, r19
    20ec:	44 1f       	adc	r20, r20
    20ee:	55 1f       	adc	r21, r21
    20f0:	12 96       	adiw	r26, 0x02	; 2
    20f2:	8d 91       	ld	r24, X+
    20f4:	9c 91       	ld	r25, X
    20f6:	13 97       	sbiw	r26, 0x03	; 3
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	13 96       	adiw	r26, 0x03	; 3
    20fc:	9c 93       	st	X, r25
    20fe:	8e 93       	st	-X, r24
    2100:	12 97       	sbiw	r26, 0x02	; 2
    2102:	20 30       	cpi	r18, 0x00	; 0
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	38 07       	cpc	r19, r24
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	48 07       	cpc	r20, r24
    210c:	80 e4       	ldi	r24, 0x40	; 64
    210e:	58 07       	cpc	r21, r24
    2110:	58 f3       	brcs	.-42     	; 0x20e8 <__unpack_f+0x66>
    2112:	14 96       	adiw	r26, 0x04	; 4
    2114:	2d 93       	st	X+, r18
    2116:	3d 93       	st	X+, r19
    2118:	4d 93       	st	X+, r20
    211a:	5c 93       	st	X, r21
    211c:	17 97       	sbiw	r26, 0x07	; 7
    211e:	08 95       	ret
    2120:	2f 3f       	cpi	r18, 0xFF	; 255
    2122:	31 05       	cpc	r19, r1
    2124:	79 f4       	brne	.+30     	; 0x2144 <__unpack_f+0xc2>
    2126:	41 15       	cp	r20, r1
    2128:	51 05       	cpc	r21, r1
    212a:	61 05       	cpc	r22, r1
    212c:	71 05       	cpc	r23, r1
    212e:	19 f4       	brne	.+6      	; 0x2136 <__unpack_f+0xb4>
    2130:	84 e0       	ldi	r24, 0x04	; 4
    2132:	8c 93       	st	X, r24
    2134:	08 95       	ret
    2136:	64 ff       	sbrs	r22, 4
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <__unpack_f+0xbe>
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	8c 93       	st	X, r24
    213e:	12 c0       	rjmp	.+36     	; 0x2164 <__unpack_f+0xe2>
    2140:	1c 92       	st	X, r1
    2142:	10 c0       	rjmp	.+32     	; 0x2164 <__unpack_f+0xe2>
    2144:	2f 57       	subi	r18, 0x7F	; 127
    2146:	30 40       	sbci	r19, 0x00	; 0
    2148:	13 96       	adiw	r26, 0x03	; 3
    214a:	3c 93       	st	X, r19
    214c:	2e 93       	st	-X, r18
    214e:	12 97       	sbiw	r26, 0x02	; 2
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	8c 93       	st	X, r24
    2154:	87 e0       	ldi	r24, 0x07	; 7
    2156:	44 0f       	add	r20, r20
    2158:	55 1f       	adc	r21, r21
    215a:	66 1f       	adc	r22, r22
    215c:	77 1f       	adc	r23, r23
    215e:	8a 95       	dec	r24
    2160:	d1 f7       	brne	.-12     	; 0x2156 <__unpack_f+0xd4>
    2162:	70 64       	ori	r23, 0x40	; 64
    2164:	14 96       	adiw	r26, 0x04	; 4
    2166:	4d 93       	st	X+, r20
    2168:	5d 93       	st	X+, r21
    216a:	6d 93       	st	X+, r22
    216c:	7c 93       	st	X, r23
    216e:	17 97       	sbiw	r26, 0x07	; 7
    2170:	08 95       	ret

00002172 <__fpcmp_parts_f>:
    2172:	1f 93       	push	r17
    2174:	dc 01       	movw	r26, r24
    2176:	fb 01       	movw	r30, r22
    2178:	9c 91       	ld	r25, X
    217a:	92 30       	cpi	r25, 0x02	; 2
    217c:	08 f4       	brcc	.+2      	; 0x2180 <__fpcmp_parts_f+0xe>
    217e:	47 c0       	rjmp	.+142    	; 0x220e <__fpcmp_parts_f+0x9c>
    2180:	80 81       	ld	r24, Z
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	08 f4       	brcc	.+2      	; 0x2188 <__fpcmp_parts_f+0x16>
    2186:	43 c0       	rjmp	.+134    	; 0x220e <__fpcmp_parts_f+0x9c>
    2188:	94 30       	cpi	r25, 0x04	; 4
    218a:	51 f4       	brne	.+20     	; 0x21a0 <__fpcmp_parts_f+0x2e>
    218c:	11 96       	adiw	r26, 0x01	; 1
    218e:	1c 91       	ld	r17, X
    2190:	84 30       	cpi	r24, 0x04	; 4
    2192:	99 f5       	brne	.+102    	; 0x21fa <__fpcmp_parts_f+0x88>
    2194:	81 81       	ldd	r24, Z+1	; 0x01
    2196:	68 2f       	mov	r22, r24
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	61 1b       	sub	r22, r17
    219c:	71 09       	sbc	r23, r1
    219e:	3f c0       	rjmp	.+126    	; 0x221e <__fpcmp_parts_f+0xac>
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	21 f0       	breq	.+8      	; 0x21ac <__fpcmp_parts_f+0x3a>
    21a4:	92 30       	cpi	r25, 0x02	; 2
    21a6:	31 f4       	brne	.+12     	; 0x21b4 <__fpcmp_parts_f+0x42>
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	b9 f1       	breq	.+110    	; 0x221a <__fpcmp_parts_f+0xa8>
    21ac:	81 81       	ldd	r24, Z+1	; 0x01
    21ae:	88 23       	and	r24, r24
    21b0:	89 f1       	breq	.+98     	; 0x2214 <__fpcmp_parts_f+0xa2>
    21b2:	2d c0       	rjmp	.+90     	; 0x220e <__fpcmp_parts_f+0x9c>
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	1c 91       	ld	r17, X
    21b8:	11 97       	sbiw	r26, 0x01	; 1
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	f1 f0       	breq	.+60     	; 0x21fa <__fpcmp_parts_f+0x88>
    21be:	81 81       	ldd	r24, Z+1	; 0x01
    21c0:	18 17       	cp	r17, r24
    21c2:	d9 f4       	brne	.+54     	; 0x21fa <__fpcmp_parts_f+0x88>
    21c4:	12 96       	adiw	r26, 0x02	; 2
    21c6:	2d 91       	ld	r18, X+
    21c8:	3c 91       	ld	r19, X
    21ca:	13 97       	sbiw	r26, 0x03	; 3
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	82 17       	cp	r24, r18
    21d2:	93 07       	cpc	r25, r19
    21d4:	94 f0       	brlt	.+36     	; 0x21fa <__fpcmp_parts_f+0x88>
    21d6:	28 17       	cp	r18, r24
    21d8:	39 07       	cpc	r19, r25
    21da:	bc f0       	brlt	.+46     	; 0x220a <__fpcmp_parts_f+0x98>
    21dc:	14 96       	adiw	r26, 0x04	; 4
    21de:	8d 91       	ld	r24, X+
    21e0:	9d 91       	ld	r25, X+
    21e2:	0d 90       	ld	r0, X+
    21e4:	bc 91       	ld	r27, X
    21e6:	a0 2d       	mov	r26, r0
    21e8:	24 81       	ldd	r18, Z+4	; 0x04
    21ea:	35 81       	ldd	r19, Z+5	; 0x05
    21ec:	46 81       	ldd	r20, Z+6	; 0x06
    21ee:	57 81       	ldd	r21, Z+7	; 0x07
    21f0:	28 17       	cp	r18, r24
    21f2:	39 07       	cpc	r19, r25
    21f4:	4a 07       	cpc	r20, r26
    21f6:	5b 07       	cpc	r21, r27
    21f8:	18 f4       	brcc	.+6      	; 0x2200 <__fpcmp_parts_f+0x8e>
    21fa:	11 23       	and	r17, r17
    21fc:	41 f0       	breq	.+16     	; 0x220e <__fpcmp_parts_f+0x9c>
    21fe:	0a c0       	rjmp	.+20     	; 0x2214 <__fpcmp_parts_f+0xa2>
    2200:	82 17       	cp	r24, r18
    2202:	93 07       	cpc	r25, r19
    2204:	a4 07       	cpc	r26, r20
    2206:	b5 07       	cpc	r27, r21
    2208:	40 f4       	brcc	.+16     	; 0x221a <__fpcmp_parts_f+0xa8>
    220a:	11 23       	and	r17, r17
    220c:	19 f0       	breq	.+6      	; 0x2214 <__fpcmp_parts_f+0xa2>
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	05 c0       	rjmp	.+10     	; 0x221e <__fpcmp_parts_f+0xac>
    2214:	6f ef       	ldi	r22, 0xFF	; 255
    2216:	7f ef       	ldi	r23, 0xFF	; 255
    2218:	02 c0       	rjmp	.+4      	; 0x221e <__fpcmp_parts_f+0xac>
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	cb 01       	movw	r24, r22
    2220:	1f 91       	pop	r17
    2222:	08 95       	ret

00002224 <__udivmodhi4>:
    2224:	aa 1b       	sub	r26, r26
    2226:	bb 1b       	sub	r27, r27
    2228:	51 e1       	ldi	r21, 0x11	; 17
    222a:	07 c0       	rjmp	.+14     	; 0x223a <__udivmodhi4_ep>

0000222c <__udivmodhi4_loop>:
    222c:	aa 1f       	adc	r26, r26
    222e:	bb 1f       	adc	r27, r27
    2230:	a6 17       	cp	r26, r22
    2232:	b7 07       	cpc	r27, r23
    2234:	10 f0       	brcs	.+4      	; 0x223a <__udivmodhi4_ep>
    2236:	a6 1b       	sub	r26, r22
    2238:	b7 0b       	sbc	r27, r23

0000223a <__udivmodhi4_ep>:
    223a:	88 1f       	adc	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	5a 95       	dec	r21
    2240:	a9 f7       	brne	.-22     	; 0x222c <__udivmodhi4_loop>
    2242:	80 95       	com	r24
    2244:	90 95       	com	r25
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	08 95       	ret

0000224c <__divmodhi4>:
    224c:	97 fb       	bst	r25, 7
    224e:	09 2e       	mov	r0, r25
    2250:	07 26       	eor	r0, r23
    2252:	0a d0       	rcall	.+20     	; 0x2268 <__divmodhi4_neg1>
    2254:	77 fd       	sbrc	r23, 7
    2256:	04 d0       	rcall	.+8      	; 0x2260 <__divmodhi4_neg2>
    2258:	e5 df       	rcall	.-54     	; 0x2224 <__udivmodhi4>
    225a:	06 d0       	rcall	.+12     	; 0x2268 <__divmodhi4_neg1>
    225c:	00 20       	and	r0, r0
    225e:	1a f4       	brpl	.+6      	; 0x2266 <__divmodhi4_exit>

00002260 <__divmodhi4_neg2>:
    2260:	70 95       	com	r23
    2262:	61 95       	neg	r22
    2264:	7f 4f       	sbci	r23, 0xFF	; 255

00002266 <__divmodhi4_exit>:
    2266:	08 95       	ret

00002268 <__divmodhi4_neg1>:
    2268:	f6 f7       	brtc	.-4      	; 0x2266 <__divmodhi4_exit>
    226a:	90 95       	com	r25
    226c:	81 95       	neg	r24
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	08 95       	ret

00002272 <__prologue_saves__>:
    2272:	2f 92       	push	r2
    2274:	3f 92       	push	r3
    2276:	4f 92       	push	r4
    2278:	5f 92       	push	r5
    227a:	6f 92       	push	r6
    227c:	7f 92       	push	r7
    227e:	8f 92       	push	r8
    2280:	9f 92       	push	r9
    2282:	af 92       	push	r10
    2284:	bf 92       	push	r11
    2286:	cf 92       	push	r12
    2288:	df 92       	push	r13
    228a:	ef 92       	push	r14
    228c:	ff 92       	push	r15
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	ca 1b       	sub	r28, r26
    229c:	db 0b       	sbc	r29, r27
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	09 94       	ijmp

000022aa <__epilogue_restores__>:
    22aa:	2a 88       	ldd	r2, Y+18	; 0x12
    22ac:	39 88       	ldd	r3, Y+17	; 0x11
    22ae:	48 88       	ldd	r4, Y+16	; 0x10
    22b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    22bc:	b9 84       	ldd	r11, Y+9	; 0x09
    22be:	c8 84       	ldd	r12, Y+8	; 0x08
    22c0:	df 80       	ldd	r13, Y+7	; 0x07
    22c2:	ee 80       	ldd	r14, Y+6	; 0x06
    22c4:	fd 80       	ldd	r15, Y+5	; 0x05
    22c6:	0c 81       	ldd	r16, Y+4	; 0x04
    22c8:	1b 81       	ldd	r17, Y+3	; 0x03
    22ca:	aa 81       	ldd	r26, Y+2	; 0x02
    22cc:	b9 81       	ldd	r27, Y+1	; 0x01
    22ce:	ce 0f       	add	r28, r30
    22d0:	d1 1d       	adc	r29, r1
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	ed 01       	movw	r28, r26
    22de:	08 95       	ret

000022e0 <strlen>:
    22e0:	fc 01       	movw	r30, r24
    22e2:	01 90       	ld	r0, Z+
    22e4:	00 20       	and	r0, r0
    22e6:	e9 f7       	brne	.-6      	; 0x22e2 <strlen+0x2>
    22e8:	80 95       	com	r24
    22ea:	90 95       	com	r25
    22ec:	8e 0f       	add	r24, r30
    22ee:	9f 1f       	adc	r25, r31
    22f0:	08 95       	ret

000022f2 <_exit>:
    22f2:	f8 94       	cli

000022f4 <__stop_program>:
    22f4:	ff cf       	rjmp	.-2      	; 0x22f4 <__stop_program>
