
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00000a22  00000ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b2  00800124  00800124  00000b7a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000032b  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013c8  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000041f  00000000  00000000  000022ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c48  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00003314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008e5  00000000  00000000  0000383c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_12>
  34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_13>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e2 e2       	ldi	r30, 0x22	; 34
  a8:	fa e0       	ldi	r31, 0x0A	; 10
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	a4 32       	cpi	r26, 0x24	; 36
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
  b6:	13 e0       	ldi	r17, 0x03	; 3
  b8:	a4 e2       	ldi	r26, 0x24	; 36
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a6 3d       	cpi	r26, 0xD6	; 214
  c2:	b1 07       	cpc	r27, r17
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
  ca:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <__vector_12>:


/////////////////////////SPI////////////////////////////////////////

ISR (SPI_STC_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
	char data;
	data=SPDR;
  de:	8f b1       	in	r24, 0x0f	; 15
	// Place your code here
}
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <send_spi_char>:

void send_spi_char(char dat)
{

    SPDR=dat;
  ec:	8f b9       	out	0x0f, r24	; 15
}
  ee:	08 95       	ret

000000f0 <usart_putc>:
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
  f0:	5d 9b       	sbis	0x0b, 5	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <usart_putc>
	UDR = c;    // send character
  f4:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	97 e2       	ldi	r25, 0x27	; 39
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <usart_putc+0xa>
	_delay_ms(10);
}
  fe:	08 95       	ret

00000100 <uart_puts>:

void uart_puts (char *s) {
 100:	fc 01       	movw	r30, r24
 102:	20 e1       	ldi	r18, 0x10	; 16
 104:	37 e2       	ldi	r19, 0x27	; 39
 106:	07 c0       	rjmp	.+14     	; 0x116 <uart_puts+0x16>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 108:	5d 9b       	sbis	0x0b, 5	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <uart_puts+0x8>
	UDR = c;    // send character
 10c:	8c b9       	out	0x0c, r24	; 12
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <uart_puts+0x10>

void uart_puts (char *s) {
	//  loop until *s != NULL
	while (*s) {
		usart_putc(*s);
		s++;
 114:	31 96       	adiw	r30, 0x01	; 1
	_delay_ms(10);
}

void uart_puts (char *s) {
	//  loop until *s != NULL
	while (*s) {
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	b1 f7       	brne	.-20     	; 0x108 <uart_puts+0x8>
		usart_putc(*s);
		s++;
	}
}
 11c:	08 95       	ret

0000011e <init>:

void init(void) {
	// set baud rate
	UBRRH = (uint8_t)(UART_BAUD_CALC(UART_BAUD_RATE,F_OSC)>>8);
 11e:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)UART_BAUD_CALC(UART_BAUD_RATE,F_OSC);
 120:	83 e3       	ldi	r24, 0x33	; 51
 122:	89 b9       	out	0x09, r24	; 9

	// Enable receiver and transmitter; enable RX interrupt
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 124:	88 e9       	ldi	r24, 0x98	; 152
 126:	8a b9       	out	0x0a, r24	; 10

	//asynchronous 8N1
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
 128:	86 e8       	ldi	r24, 0x86	; 134
 12a:	80 bd       	out	0x20, r24	; 32
}
 12c:	08 95       	ret

0000012e <__vector_13>:

// INTERRUPT can be interrupted
// SIGNAL can't be interrupted
SIGNAL (SIG_UART_RECV) { // USART RX interrupt
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	
	//cli();
	unsigned char c;
	status=1;
	c = UDR;
 142:	2c b1       	in	r18, 0x0c	; 12
	if(rx_wrindex >= rx_buffersize)
 144:	80 91 98 01 	lds	r24, 0x0198
 148:	90 91 99 01 	lds	r25, 0x0199
 14c:	84 36       	cpi	r24, 0x64	; 100
 14e:	91 05       	cpc	r25, r1
 150:	54 f0       	brlt	.+20     	; 0x166 <__vector_13+0x38>
	{
		
		rx_overflow=1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 2f 01 	sts	0x012F, r25
 15a:	80 93 2e 01 	sts	0x012E, r24
		rx_wrindex=0;
 15e:	10 92 99 01 	sts	0x0199, r1
 162:	10 92 98 01 	sts	0x0198, r1
	}
	rx_buffer[rx_wrindex]=c;
 166:	80 91 98 01 	lds	r24, 0x0198
 16a:	90 91 99 01 	lds	r25, 0x0199
 16e:	fc 01       	movw	r30, r24
 170:	e0 5d       	subi	r30, 0xD0	; 208
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	20 83       	st	Z, r18
	rx_wrindex++;
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 99 01 	sts	0x0199, r25
 17c:	80 93 98 01 	sts	0x0198, r24
	status=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 25 01 	sts	0x0125, r25
 188:	80 93 24 01 	sts	0x0124, r24
	//sei();
	
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <send_spi_string>:

    SPDR=dat;
}
  
void send_spi_string(char dat[])
{
 1a0:	ac 01       	movw	r20, r24
    int i;   
	//strcpy(temp,latitude);
	//strcat(temp,longitude);
	for(i=0;i<strlen(dat);i++)
 1a2:	dc 01       	movw	r26, r24
 1a4:	0d 90       	ld	r0, X+
 1a6:	00 20       	and	r0, r0
 1a8:	e9 f7       	brne	.-6      	; 0x1a4 <send_spi_string+0x4>
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	a8 1b       	sub	r26, r24
 1ae:	b9 0b       	sbc	r27, r25
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	60 e1       	ldi	r22, 0x10	; 16
 1b6:	77 e2       	ldi	r23, 0x27	; 39
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <send_spi_string+0x2e>
    {
        send_spi_char(dat[i]);
 1ba:	fa 01       	movw	r30, r20
 1bc:	e2 0f       	add	r30, r18
 1be:	f3 1f       	adc	r31, r19
 1c0:	80 81       	ld	r24, Z
}

void send_spi_char(char dat)
{

    SPDR=dat;
 1c2:	8f b9       	out	0x0f, r24	; 15
 1c4:	fb 01       	movw	r30, r22
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <send_spi_string+0x26>
void send_spi_string(char dat[])
{
    int i;   
	//strcpy(temp,latitude);
	//strcat(temp,longitude);
	for(i=0;i<strlen(dat);i++)
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	2a 17       	cp	r18, r26
 1d0:	3b 07       	cpc	r19, r27
 1d2:	98 f3       	brcs	.-26     	; 0x1ba <send_spi_string+0x1a>
    {
        send_spi_char(dat[i]);
        _delay_ms(10);
    }
}        
 1d4:	08 95       	ret

000001d6 <process>:


void process()
{
	int i=0,j=0;
	rx_wrindex=0;
 1d6:	10 92 99 01 	sts	0x0199, r1
 1da:	10 92 98 01 	sts	0x0198, r1
	rx_overflow=0;
 1de:	10 92 2f 01 	sts	0x012F, r1
 1e2:	10 92 2e 01 	sts	0x012E, r1
	strcpy(data,rx_buffer);
 1e6:	87 ea       	ldi	r24, 0xA7	; 167
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	60 e3       	ldi	r22, 0x30	; 48
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<200;i++)
	if(data[i]=='$')
 1f6:	f9 01       	movw	r30, r18
 1f8:	e9 55       	subi	r30, 0x59	; 89
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	80 81       	ld	r24, Z
 1fe:	84 32       	cpi	r24, 0x24	; 36
 200:	61 f4       	brne	.+24     	; 0x21a <process+0x44>
	{
	/*	sprintf(lcdbuff,"$ found at%3d",i);
		LCDGotoXY(0,0);
		LCDstring(lcdbuff,strlen(lcdbuff));*/
		if(i<100)
 202:	24 36       	cpi	r18, 0x64	; 100
 204:	31 05       	cpc	r19, r1
 206:	4c f4       	brge	.+18     	; 0x21a <process+0x44>
 208:	df 01       	movw	r26, r30
 20a:	ee e7       	ldi	r30, 0x7E	; 126
 20c:	f3 e0       	ldi	r31, 0x03	; 3
		{
			for(j=0;j<80;j++)
			{
				gga[j]=data[i+j];
 20e:	8d 91       	ld	r24, X+
 210:	81 93       	st	Z+, r24
	/*	sprintf(lcdbuff,"$ found at%3d",i);
		LCDGotoXY(0,0);
		LCDstring(lcdbuff,strlen(lcdbuff));*/
		if(i<100)
		{
			for(j=0;j<80;j++)
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	ee 3c       	cpi	r30, 0xCE	; 206
 216:	f8 07       	cpc	r31, r24
 218:	d1 f7       	brne	.-12     	; 0x20e <process+0x38>
{
	int i=0,j=0;
	rx_wrindex=0;
	rx_overflow=0;
	strcpy(data,rx_buffer);
	for(i=0;i<200;i++)
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	28 3c       	cpi	r18, 0xC8	; 200
 220:	31 05       	cpc	r19, r1
 222:	49 f7       	brne	.-46     	; 0x1f6 <process+0x20>
		}
//		LCDGotoXY(0,0);
//		LCDstring(gga,16);
	}
	
}
 224:	08 95       	ret

00000226 <split1>:

void split1()
{
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
	int i=0,j=0,k=0,l=0;
	for(i=0;i<strlen(gga);i++)
 232:	ae e7       	ldi	r26, 0x7E	; 126
 234:	b3 e0       	ldi	r27, 0x03	; 3
 236:	1b c0       	rjmp	.+54     	; 0x26e <split1+0x48>
	{
		if(gga[i]!=',')
 238:	fa 01       	movw	r30, r20
 23a:	e2 58       	subi	r30, 0x82	; 130
 23c:	fc 4f       	sbci	r31, 0xFC	; 252
 23e:	60 81       	ld	r22, Z
 240:	6c 32       	cpi	r22, 0x2C	; 44
 242:	79 f0       	breq	.+30     	; 0x262 <split1+0x3c>
		{
			loc[j][k]=gga[i];
 244:	f9 01       	movw	r30, r18
 246:	74 e0       	ldi	r23, 0x04	; 4
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	7a 95       	dec	r23
 24e:	e1 f7       	brne	.-8      	; 0x248 <split1+0x22>
 250:	e2 1b       	sub	r30, r18
 252:	f3 0b       	sbc	r31, r19
 254:	e8 0f       	add	r30, r24
 256:	f9 1f       	adc	r31, r25
 258:	e1 5e       	subi	r30, 0xE1	; 225
 25a:	fd 4f       	sbci	r31, 0xFD	; 253
 25c:	60 83       	st	Z, r22
			k++;
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	04 c0       	rjmp	.+8      	; 0x26a <split1+0x44>
		}
		else
		{
			j++;
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
}

void split1()
{
	int i=0,j=0,k=0,l=0;
	for(i=0;i<strlen(gga);i++)
 26a:	4f 5f       	subi	r20, 0xFF	; 255
 26c:	5f 4f       	sbci	r21, 0xFF	; 255
 26e:	fd 01       	movw	r30, r26
 270:	01 90       	ld	r0, Z+
 272:	00 20       	and	r0, r0
 274:	e9 f7       	brne	.-6      	; 0x270 <split1+0x4a>
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	ee 57       	subi	r30, 0x7E	; 126
 27a:	f3 40       	sbci	r31, 0x03	; 3
 27c:	4e 17       	cp	r20, r30
 27e:	5f 07       	cpc	r21, r31
 280:	d8 f2       	brcs	.-74     	; 0x238 <split1+0x12>
			j++;
			k=0;
		}
	}
	
	strcpy(time,loc[1]);
 282:	85 e1       	ldi	r24, 0x15	; 21
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	6e e2       	ldi	r22, 0x2E	; 46
 288:	72 e0       	ldi	r23, 0x02	; 2
 28a:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
	
	strcpy(latitude,loc[2]);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	93 e0       	ldi	r25, 0x03	; 3
 292:	6d e3       	ldi	r22, 0x3D	; 61
 294:	72 e0       	ldi	r23, 0x02	; 2
 296:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
	strcat(latitude,loc[3]);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	93 e0       	ldi	r25, 0x03	; 3
 29e:	6c e4       	ldi	r22, 0x4C	; 76
 2a0:	72 e0       	ldi	r23, 0x02	; 2
 2a2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <strcat>
	
	strcpy(longitude,loc[4]);
 2a6:	8b e0       	ldi	r24, 0x0B	; 11
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	6b e5       	ldi	r22, 0x5B	; 91
 2ac:	72 e0       	ldi	r23, 0x02	; 2
 2ae:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
	strcat(longitude,loc[5]);
 2b2:	8b e0       	ldi	r24, 0x0B	; 11
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	6a e6       	ldi	r22, 0x6A	; 106
 2b8:	72 e0       	ldi	r23, 0x02	; 2
 2ba:	0e 94 fd 04 	call	0x9fa	; 0x9fa <strcat>
	
	strcpy(valid,loc[6]);
 2be:	86 e9       	ldi	r24, 0x96	; 150
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	69 e7       	ldi	r22, 0x79	; 121
 2c4:	72 e0       	ldi	r23, 0x02	; 2
 2c6:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
	
	strcpy(satellite,loc[7]);
 2ca:	8a e9       	ldi	r24, 0x9A	; 154
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	68 e8       	ldi	r22, 0x88	; 136
 2d0:	72 e0       	ldi	r23, 0x02	; 2
 2d2:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
	
	
	
}
 2d6:	08 95       	ret

000002d8 <initgps>:
	}
	return 0;
}

void initgps()
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
	if(status)
 2e0:	80 91 24 01 	lds	r24, 0x0124
 2e4:	90 91 25 01 	lds	r25, 0x0125
 2e8:	ca e0       	ldi	r28, 0x0A	; 10
 2ea:	d3 e0       	ldi	r29, 0x03	; 3
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <initgps+0x1a>
 2f0:	e2 c0       	rjmp	.+452    	; 0x4b6 <initgps+0x1de>
	{
		sprintf(lcdbuff,"GPS AVALIABLE");
 2f2:	ce 01       	movw	r24, r28
 2f4:	60 e6       	ldi	r22, 0x60	; 96
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
		LCDGotoXY(0,0);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
		LCDstring(lcdbuff,strlen(lcdbuff));
 308:	fe 01       	movw	r30, r28
 30a:	01 90       	ld	r0, Z+
 30c:	00 20       	and	r0, r0
 30e:	e9 f7       	brne	.-6      	; 0x30a <initgps+0x32>
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	ec 1b       	sub	r30, r28
 314:	fd 0b       	sbc	r31, r29
 316:	ce 01       	movw	r24, r28
 318:	bf 01       	movw	r22, r30
 31a:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
		sprintf(lcdbuff,"SENDING COMMANDS");
 31e:	ce 01       	movw	r24, r28
 320:	6e e6       	ldi	r22, 0x6E	; 110
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
		LCDGotoXY(0,1);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
		LCDstring(lcdbuff,strlen(lcdbuff));
 334:	fe 01       	movw	r30, r28
 336:	01 90       	ld	r0, Z+
 338:	00 20       	and	r0, r0
 33a:	e9 f7       	brne	.-6      	; 0x336 <initgps+0x5e>
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	ec 1b       	sub	r30, r28
 340:	fd 0b       	sbc	r31, r29
 342:	ce 01       	movw	r24, r28
 344:	bf 01       	movw	r22, r30
 346:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
		cli();
 34a:	f8 94       	cli
		uart_puts(input1);
 34c:	89 ea       	ldi	r24, 0xA9	; 169
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 80 00 	call	0x100	; 0x100 <uart_puts>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 354:	5d 9b       	sbis	0x0b, 5	; 11
 356:	fe cf       	rjmp	.-4      	; 0x354 <initgps+0x7c>
	UDR = c;    // send character
 358:	8d e0       	ldi	r24, 0x0D	; 13
 35a:	8c b9       	out	0x0c, r24	; 12
 35c:	80 e1       	ldi	r24, 0x10	; 16
 35e:	97 e2       	ldi	r25, 0x27	; 39
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <initgps+0x88>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 364:	5d 9b       	sbis	0x0b, 5	; 11
 366:	fe cf       	rjmp	.-4      	; 0x364 <initgps+0x8c>
	UDR = c;    // send character
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	8c b9       	out	0x0c, r24	; 12
 36c:	80 e1       	ldi	r24, 0x10	; 16
 36e:	97 e2       	ldi	r25, 0x27	; 39
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <initgps+0x98>
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	9e e4       	ldi	r25, 0x4E	; 78
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 378:	24 e6       	ldi	r18, 0x64	; 100
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	f9 01       	movw	r30, r18
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <initgps+0xa6>
 382:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 384:	d9 f7       	brne	.-10     	; 0x37c <initgps+0xa4>
		cli();
		uart_puts(input1);
		usart_putc(0x0d);
		usart_putc(0x0a);
		_delay_ms(2000);
		uart_puts(input2);
 386:	81 ec       	ldi	r24, 0xC1	; 193
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 80 00 	call	0x100	; 0x100 <uart_puts>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 38e:	5d 9b       	sbis	0x0b, 5	; 11
 390:	fe cf       	rjmp	.-4      	; 0x38e <initgps+0xb6>
	UDR = c;    // send character
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	8c b9       	out	0x0c, r24	; 12
 396:	80 e1       	ldi	r24, 0x10	; 16
 398:	97 e2       	ldi	r25, 0x27	; 39
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <initgps+0xc2>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 39e:	5d 9b       	sbis	0x0b, 5	; 11
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <initgps+0xc6>
	UDR = c;    // send character
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	8c b9       	out	0x0c, r24	; 12
 3a6:	80 e1       	ldi	r24, 0x10	; 16
 3a8:	97 e2       	ldi	r25, 0x27	; 39
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <initgps+0xd2>
 3ae:	80 e2       	ldi	r24, 0x20	; 32
 3b0:	9e e4       	ldi	r25, 0x4E	; 78
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b2:	24 e6       	ldi	r18, 0x64	; 100
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	f9 01       	movw	r30, r18
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <initgps+0xe0>
 3bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3be:	d9 f7       	brne	.-10     	; 0x3b6 <initgps+0xde>
		_delay_ms(2000);
		uart_puts(input2);
		usart_putc(0x0d);
		usart_putc(0x0a);
		_delay_ms(2000);
		uart_puts(input3);
 3c0:	89 ed       	ldi	r24, 0xD9	; 217
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 80 00 	call	0x100	; 0x100 <uart_puts>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 3c8:	5d 9b       	sbis	0x0b, 5	; 11
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <initgps+0xf0>
	UDR = c;    // send character
 3cc:	8d e0       	ldi	r24, 0x0D	; 13
 3ce:	8c b9       	out	0x0c, r24	; 12
 3d0:	80 e1       	ldi	r24, 0x10	; 16
 3d2:	97 e2       	ldi	r25, 0x27	; 39
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <initgps+0xfc>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 3d8:	5d 9b       	sbis	0x0b, 5	; 11
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <initgps+0x100>
	UDR = c;    // send character
 3dc:	8a e0       	ldi	r24, 0x0A	; 10
 3de:	8c b9       	out	0x0c, r24	; 12
 3e0:	80 e1       	ldi	r24, 0x10	; 16
 3e2:	97 e2       	ldi	r25, 0x27	; 39
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <initgps+0x10c>
 3e8:	80 e2       	ldi	r24, 0x20	; 32
 3ea:	9e e4       	ldi	r25, 0x4E	; 78
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ec:	24 e6       	ldi	r18, 0x64	; 100
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	f9 01       	movw	r30, r18
 3f2:	31 97       	sbiw	r30, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <initgps+0x11a>
 3f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f8:	d9 f7       	brne	.-10     	; 0x3f0 <initgps+0x118>
		_delay_ms(2000);
		uart_puts(input3);
		usart_putc(0x0d);
		usart_putc(0x0a);
		_delay_ms(2000);
		uart_puts(input4);
 3fa:	81 ef       	ldi	r24, 0xF1	; 241
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 80 00 	call	0x100	; 0x100 <uart_puts>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 402:	5d 9b       	sbis	0x0b, 5	; 11
 404:	fe cf       	rjmp	.-4      	; 0x402 <initgps+0x12a>
	UDR = c;    // send character
 406:	8d e0       	ldi	r24, 0x0D	; 13
 408:	8c b9       	out	0x0c, r24	; 12
 40a:	80 e1       	ldi	r24, 0x10	; 16
 40c:	97 e2       	ldi	r25, 0x27	; 39
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <initgps+0x136>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 412:	5d 9b       	sbis	0x0b, 5	; 11
 414:	fe cf       	rjmp	.-4      	; 0x412 <initgps+0x13a>
	UDR = c;    // send character
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	8c b9       	out	0x0c, r24	; 12
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	97 e2       	ldi	r25, 0x27	; 39
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <initgps+0x146>
 422:	80 e2       	ldi	r24, 0x20	; 32
 424:	9e e4       	ldi	r25, 0x4E	; 78
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 426:	24 e6       	ldi	r18, 0x64	; 100
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <initgps+0x154>
 430:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 432:	d9 f7       	brne	.-10     	; 0x42a <initgps+0x152>
		_delay_ms(2000);
		uart_puts(input4);
		usart_putc(0x0d);
		usart_putc(0x0a);
		_delay_ms(2000);
		uart_puts(input5);
 434:	89 e0       	ldi	r24, 0x09	; 9
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 80 00 	call	0x100	; 0x100 <uart_puts>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 43c:	5d 9b       	sbis	0x0b, 5	; 11
 43e:	fe cf       	rjmp	.-4      	; 0x43c <initgps+0x164>
	UDR = c;    // send character
 440:	8d e0       	ldi	r24, 0x0D	; 13
 442:	8c b9       	out	0x0c, r24	; 12
 444:	80 e1       	ldi	r24, 0x10	; 16
 446:	97 e2       	ldi	r25, 0x27	; 39
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <initgps+0x170>
////////////////////////////////////////////////////////////////////////////


void usart_putc(unsigned char c) {
   // wait until UDR ready
	while(!(UCSRA & (1 << UDRE)));
 44c:	5d 9b       	sbis	0x0b, 5	; 11
 44e:	fe cf       	rjmp	.-4      	; 0x44c <initgps+0x174>
	UDR = c;    // send character
 450:	8a e0       	ldi	r24, 0x0A	; 10
 452:	8c b9       	out	0x0c, r24	; 12
 454:	80 e1       	ldi	r24, 0x10	; 16
 456:	97 e2       	ldi	r25, 0x27	; 39
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <initgps+0x180>
 45c:	80 e2       	ldi	r24, 0x20	; 32
 45e:	9e e4       	ldi	r25, 0x4E	; 78
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 460:	24 e6       	ldi	r18, 0x64	; 100
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	f9 01       	movw	r30, r18
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <initgps+0x18e>
 46a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 46c:	d9 f7       	brne	.-10     	; 0x464 <initgps+0x18c>
		_delay_ms(2000);
		uart_puts(input5);
		usart_putc(0x0d);
		usart_putc(0x0a);
		_delay_ms(2000);
		sei();
 46e:	78 94       	sei
		sprintf(lcdbuff,"initialized");
 470:	0a e0       	ldi	r16, 0x0A	; 10
 472:	13 e0       	ldi	r17, 0x03	; 3
 474:	c8 01       	movw	r24, r16
 476:	6f e7       	ldi	r22, 0x7F	; 127
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
		LCDGotoXY(0,1);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
		LCDstring(lcdbuff,strlen(lcdbuff));
 48a:	f8 01       	movw	r30, r16
 48c:	01 90       	ld	r0, Z+
 48e:	00 20       	and	r0, r0
 490:	e9 f7       	brne	.-6      	; 0x48c <initgps+0x1b4>
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	e0 1b       	sub	r30, r16
 496:	f1 0b       	sbc	r31, r17
 498:	c8 01       	movw	r24, r16
 49a:	bf 01       	movw	r22, r30
 49c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
		rx_wrindex=0;
 4a0:	10 92 99 01 	sts	0x0199, r1
 4a4:	10 92 98 01 	sts	0x0198, r1
		while(1)
		{
		}
		
	}
	LCDclr();
 4a8:	0e 94 9f 03 	call	0x73e	; 0x73e <LCDclr>
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	08 95       	ret
		LCDstring(lcdbuff,strlen(lcdbuff));
		rx_wrindex=0;
	}
	else
	{
		sprintf(lcdbuff,"GPS NOT AVALIA");
 4b6:	ce 01       	movw	r24, r28
 4b8:	6b e8       	ldi	r22, 0x8B	; 139
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
		LCDGotoXY(0,0);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
		LCDstring(lcdbuff,strlen(lcdbuff));
 4cc:	fe 01       	movw	r30, r28
 4ce:	01 90       	ld	r0, Z+
 4d0:	00 20       	and	r0, r0
 4d2:	e9 f7       	brne	.-6      	; 0x4ce <initgps+0x1f6>
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	ea 50       	subi	r30, 0x0A	; 10
 4d8:	f3 40       	sbci	r31, 0x03	; 3
 4da:	ce 01       	movw	r24, r28
 4dc:	bf 01       	movw	r22, r30
 4de:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <initgps+0x20a>

000004e4 <main>:




int main(void) 
{
 4e4:	8f 92       	push	r8
 4e6:	9f 92       	push	r9
 4e8:	af 92       	push	r10
 4ea:	bf 92       	push	r11
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29


	///////////////////master//////////
	PORTB=0x00;
 4fc:	18 ba       	out	0x18, r1	; 24
	DDRB=0xB8;
 4fe:	88 eb       	ldi	r24, 0xB8	; 184
 500:	87 bb       	out	0x17, r24	; 23
	SPCR=0xD1;
 502:	81 ed       	ldi	r24, 0xD1	; 209
 504:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x00;
 506:	1e b8       	out	0x0e, r1	; 14
 508:	80 e2       	ldi	r24, 0x20	; 32
 50a:	9e e4       	ldi	r25, 0x4E	; 78
 50c:	24 e6       	ldi	r18, 0x64	; 100
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 516:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 518:	d9 f7       	brne	.-10     	; 0x510 <main+0x2c>
	}
}

void init(void) {
	// set baud rate
	UBRRH = (uint8_t)(UART_BAUD_CALC(UART_BAUD_RATE,F_OSC)>>8);
 51a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)UART_BAUD_CALC(UART_BAUD_RATE,F_OSC);
 51c:	83 e3       	ldi	r24, 0x33	; 51
 51e:	89 b9       	out	0x09, r24	; 9

	// Enable receiver and transmitter; enable RX interrupt
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 520:	88 e9       	ldi	r24, 0x98	; 152
 522:	8a b9       	out	0x0a, r24	; 10

	//asynchronous 8N1
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
 524:	86 e8       	ldi	r24, 0x86	; 134
 526:	80 bd       	out	0x20, r24	; 32
	
	
	
	_delay_ms(2000);
	init(); // init USART
	LCDinit();
 528:	0e 94 06 04 	call	0x80c	; 0x80c <LCDinit>
	LCDclr();
 52c:	0e 94 9f 03 	call	0x73e	; 0x73e <LCDclr>
	
	
	sei();
 530:	78 94       	sei
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	9e e4       	ldi	r25, 0x4E	; 78
 536:	24 e6       	ldi	r18, 0x64	; 100
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	f9 01       	movw	r30, r18
 53c:	31 97       	sbiw	r30, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 540:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 542:	d9 f7       	brne	.-10     	; 0x53a <main+0x56>
	_delay_ms(2000);
	initgps();
 544:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <initgps>
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	c1 2e       	mov	r12, r17
 54c:	13 e0       	ldi	r17, 0x03	; 3
 54e:	d1 2e       	mov	r13, r17
 550:	bb e0       	ldi	r27, 0x0B	; 11
 552:	eb 2e       	mov	r14, r27
 554:	b2 e0       	ldi	r27, 0x02	; 2
 556:	fb 2e       	mov	r15, r27
 558:	0a e9       	ldi	r16, 0x9A	; 154
 55a:	11 e0       	ldi	r17, 0x01	; 1
}

void send_spi_char(char dat)
{

    SPDR=dat;
 55c:	ae e5       	ldi	r26, 0x5E	; 94
 55e:	8a 2e       	mov	r8, r26
 560:	c0 e1       	ldi	r28, 0x10	; 16
 562:	d7 e2       	ldi	r29, 0x27	; 39
 564:	fa e2       	ldi	r31, 0x2A	; 42
 566:	9f 2e       	mov	r9, r31
		{
			
		}
		if(valid[0]!='1')
		{
			sprintf(lcdbuff,"DATA NOT VALID");
 568:	ea e0       	ldi	r30, 0x0A	; 10
 56a:	ae 2e       	mov	r10, r30
 56c:	e3 e0       	ldi	r30, 0x03	; 3
 56e:	be 2e       	mov	r11, r30
	while (1) 
	{
		//sprintf(lcdbuff,"%3d",rx_wrindex);
		//LCDGotoXY(0,0);
		//LCDstring(lcdbuff,strlen(lcdbuff));
		if(rx_overflow)
 570:	80 91 2e 01 	lds	r24, 0x012E
 574:	90 91 2f 01 	lds	r25, 0x012F
 578:	89 2b       	or	r24, r25
 57a:	41 f0       	breq	.+16     	; 0x58c <main+0xa8>
		{
			cli();
 57c:	f8 94       	cli
			process();
 57e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <process>
			split1();
 582:	0e 94 13 01 	call	0x226	; 0x226 <split1>
			LCDclr();
 586:	0e 94 9f 03 	call	0x73e	; 0x73e <LCDclr>
			sei();
 58a:	78 94       	sei
		}
		else
		{
			
		}
		if(valid[0]!='1')
 58c:	80 91 96 01 	lds	r24, 0x0196
 590:	81 33       	cpi	r24, 0x31	; 49
 592:	09 f4       	brne	.+2      	; 0x596 <main+0xb2>
 594:	4f c0       	rjmp	.+158    	; 0x634 <main+0x150>
		{
			sprintf(lcdbuff,"DATA NOT VALID");
 596:	8a e0       	ldi	r24, 0x0A	; 10
 598:	93 e0       	ldi	r25, 0x03	; 3
 59a:	6a e9       	ldi	r22, 0x9A	; 154
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
			LCDGotoXY(0,3);
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	63 e0       	ldi	r22, 0x03	; 3
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
			LCDstring(lcdbuff,strlen(lcdbuff));		
 5ae:	f5 01       	movw	r30, r10
 5b0:	01 90       	ld	r0, Z+
 5b2:	00 20       	and	r0, r0
 5b4:	e9 f7       	brne	.-6      	; 0x5b0 <main+0xcc>
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	ea 50       	subi	r30, 0x0A	; 10
 5ba:	f3 40       	sbci	r31, 0x03	; 3
 5bc:	8a e0       	ldi	r24, 0x0A	; 10
 5be:	93 e0       	ldi	r25, 0x03	; 3
 5c0:	bf 01       	movw	r22, r30
 5c2:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
			
			LCDGotoXY(0,1);
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
			LCDstring(latitude,strlen(latitude));
 5d2:	f6 01       	movw	r30, r12
 5d4:	01 90       	ld	r0, Z+
 5d6:	00 20       	and	r0, r0
 5d8:	e9 f7       	brne	.-6      	; 0x5d4 <main+0xf0>
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	e0 50       	subi	r30, 0x00	; 0
 5de:	f3 40       	sbci	r31, 0x03	; 3
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	93 e0       	ldi	r25, 0x03	; 3
 5e4:	bf 01       	movw	r22, r30
 5e6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
			
			LCDGotoXY(0,2);
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	62 e0       	ldi	r22, 0x02	; 2
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
			LCDstring(longitude,strlen(longitude));
 5f6:	f7 01       	movw	r30, r14
 5f8:	01 90       	ld	r0, Z+
 5fa:	00 20       	and	r0, r0
 5fc:	e9 f7       	brne	.-6      	; 0x5f8 <main+0x114>
 5fe:	31 97       	sbiw	r30, 0x01	; 1
 600:	eb 50       	subi	r30, 0x0B	; 11
 602:	f2 40       	sbci	r31, 0x02	; 2
 604:	8b e0       	ldi	r24, 0x0B	; 11
 606:	92 e0       	ldi	r25, 0x02	; 2
 608:	bf 01       	movw	r22, r30
 60a:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
			
			LCDGotoXY(14,0);
 60e:	8e e0       	ldi	r24, 0x0E	; 14
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
			LCDstring(satellite,strlen(satellite));
 61a:	f8 01       	movw	r30, r16
 61c:	01 90       	ld	r0, Z+
 61e:	00 20       	and	r0, r0
 620:	e9 f7       	brne	.-6      	; 0x61c <main+0x138>
 622:	31 97       	sbiw	r30, 0x01	; 1
 624:	ea 59       	subi	r30, 0x9A	; 154
 626:	f1 40       	sbci	r31, 0x01	; 1
 628:	8a e9       	ldi	r24, 0x9A	; 154
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	bf 01       	movw	r22, r30
 62e:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
 632:	9e cf       	rjmp	.-196    	; 0x570 <main+0x8c>
			
		/*	sprintf(lcdbuff,"DATA VALID");
			LCDGotoXY(0,3);
			LCDstring(lcdbuff,strlen(lcdbuff));
		*/	
			LCDGotoXY(0,0);
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
			LCDstring(latitude,strlen(latitude));
 640:	f6 01       	movw	r30, r12
 642:	01 90       	ld	r0, Z+
 644:	00 20       	and	r0, r0
 646:	e9 f7       	brne	.-6      	; 0x642 <main+0x15e>
 648:	31 97       	sbiw	r30, 0x01	; 1
 64a:	e0 50       	subi	r30, 0x00	; 0
 64c:	f3 40       	sbci	r31, 0x03	; 3
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	93 e0       	ldi	r25, 0x03	; 3
 652:	bf 01       	movw	r22, r30
 654:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
			
			LCDGotoXY(0,1);
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
			LCDstring(longitude,strlen(longitude));
 664:	f7 01       	movw	r30, r14
 666:	01 90       	ld	r0, Z+
 668:	00 20       	and	r0, r0
 66a:	e9 f7       	brne	.-6      	; 0x666 <main+0x182>
 66c:	31 97       	sbiw	r30, 0x01	; 1
 66e:	eb 50       	subi	r30, 0x0B	; 11
 670:	f2 40       	sbci	r31, 0x02	; 2
 672:	8b e0       	ldi	r24, 0x0B	; 11
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	bf 01       	movw	r22, r30
 678:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
			
			LCDGotoXY(14,0);
 67c:	8e e0       	ldi	r24, 0x0E	; 14
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
			LCDstring(satellite,strlen(satellite));
 688:	f8 01       	movw	r30, r16
 68a:	01 90       	ld	r0, Z+
 68c:	00 20       	and	r0, r0
 68e:	e9 f7       	brne	.-6      	; 0x68a <main+0x1a6>
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	ea 59       	subi	r30, 0x9A	; 154
 694:	f1 40       	sbci	r31, 0x01	; 1
 696:	8a e9       	ldi	r24, 0x9A	; 154
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	bf 01       	movw	r22, r30
 69c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDstring>
}

void send_spi_char(char dat)
{

    SPDR=dat;
 6a0:	8f b8       	out	0x0f, r8	; 15
 6a2:	ce 01       	movw	r24, r28
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <main+0x1c0>
			LCDGotoXY(14,0);
			LCDstring(satellite,strlen(satellite));
			
			send_spi_char('^');
			_delay_ms(10);
			send_spi_string(latitude);
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	93 e0       	ldi	r25, 0x03	; 3
 6ac:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <send_spi_string>
}

void send_spi_char(char dat)
{

    SPDR=dat;
 6b0:	9f b8       	out	0x0f, r9	; 15
 6b2:	ce 01       	movw	r24, r28
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <main+0x1d0>
			send_spi_char('^');
			_delay_ms(10);
			send_spi_string(latitude);
			send_spi_char('*');
			_delay_ms(10);
			send_spi_string(longitude);
 6b8:	8b e0       	ldi	r24, 0x0B	; 11
 6ba:	92 e0       	ldi	r25, 0x02	; 2
 6bc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <send_spi_string>
 6c0:	57 cf       	rjmp	.-338    	; 0x570 <main+0x8c>

000006c2 <LCDsendChar>:
 6c2:	28 2f       	mov	r18, r24
 6c4:	20 7f       	andi	r18, 0xF0	; 240
 6c6:	25 bb       	out	0x15, r18	; 21
 6c8:	a8 9a       	sbi	0x15, 0	; 21
 6ca:	aa 9a       	sbi	0x15, 2	; 21
 6cc:	28 ee       	ldi	r18, 0xE8	; 232
 6ce:	33 e0       	ldi	r19, 0x03	; 3
 6d0:	f9 01       	movw	r30, r18
 6d2:	31 97       	sbiw	r30, 0x01	; 1
 6d4:	f1 f7       	brne	.-4      	; 0x6d2 <LCDsendChar+0x10>
 6d6:	aa 98       	cbi	0x15, 2	; 21
 6d8:	a8 98       	cbi	0x15, 0	; 21
 6da:	f9 01       	movw	r30, r18
 6dc:	31 97       	sbiw	r30, 0x01	; 1
 6de:	f1 f7       	brne	.-4      	; 0x6dc <LCDsendChar+0x1a>
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	44 e0       	ldi	r20, 0x04	; 4
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	4a 95       	dec	r20
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <LCDsendChar+0x22>
 6ec:	85 bb       	out	0x15, r24	; 21
 6ee:	a8 9a       	sbi	0x15, 0	; 21
 6f0:	aa 9a       	sbi	0x15, 2	; 21
 6f2:	c9 01       	movw	r24, r18
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <LCDsendChar+0x32>
 6f8:	aa 98       	cbi	0x15, 2	; 21
 6fa:	a8 98       	cbi	0x15, 0	; 21
 6fc:	c9 01       	movw	r24, r18
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <LCDsendChar+0x3c>
 702:	08 95       	ret

00000704 <LCDsendCommand>:
 704:	28 2f       	mov	r18, r24
 706:	20 7f       	andi	r18, 0xF0	; 240
 708:	25 bb       	out	0x15, r18	; 21
 70a:	aa 9a       	sbi	0x15, 2	; 21
 70c:	28 ee       	ldi	r18, 0xE8	; 232
 70e:	33 e0       	ldi	r19, 0x03	; 3
 710:	f9 01       	movw	r30, r18
 712:	31 97       	sbiw	r30, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <LCDsendCommand+0xe>
 716:	aa 98       	cbi	0x15, 2	; 21
 718:	f9 01       	movw	r30, r18
 71a:	31 97       	sbiw	r30, 0x01	; 1
 71c:	f1 f7       	brne	.-4      	; 0x71a <LCDsendCommand+0x16>
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	54 e0       	ldi	r21, 0x04	; 4
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	5a 95       	dec	r21
 728:	e1 f7       	brne	.-8      	; 0x722 <LCDsendCommand+0x1e>
 72a:	85 bb       	out	0x15, r24	; 21
 72c:	aa 9a       	sbi	0x15, 2	; 21
 72e:	c9 01       	movw	r24, r18
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <LCDsendCommand+0x2c>
 734:	aa 98       	cbi	0x15, 2	; 21
 736:	c9 01       	movw	r24, r18
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <LCDsendCommand+0x34>
 73c:	08 95       	ret

0000073e <LCDclr>:
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 744:	08 95       	ret

00000746 <LCDhome>:
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 74c:	08 95       	ret

0000074e <LCDstring>:
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	06 2f       	mov	r16, r22
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	49 f0       	breq	.+18     	; 0x76e <LCDstring+0x20>
 75c:	ec 01       	movw	r28, r24
 75e:	10 e0       	ldi	r17, 0x00	; 0
 760:	04 c0       	rjmp	.+8      	; 0x76a <LCDstring+0x1c>
 762:	89 91       	ld	r24, Y+
 764:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCDsendChar>
 768:	1f 5f       	subi	r17, 0xFF	; 255
 76a:	10 17       	cp	r17, r16
 76c:	d0 f3       	brcs	.-12     	; 0x762 <LCDstring+0x14>
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	08 95       	ret

00000778 <LCDGotoXY>:
 778:	62 30       	cpi	r22, 0x02	; 2
 77a:	31 f0       	breq	.+12     	; 0x788 <LCDGotoXY+0x10>
 77c:	63 30       	cpi	r22, 0x03	; 3
 77e:	31 f0       	breq	.+12     	; 0x78c <LCDGotoXY+0x14>
 780:	61 30       	cpi	r22, 0x01	; 1
 782:	29 f4       	brne	.+10     	; 0x78e <LCDGotoXY+0x16>
 784:	80 5c       	subi	r24, 0xC0	; 192
 786:	03 c0       	rjmp	.+6      	; 0x78e <LCDGotoXY+0x16>
 788:	8c 5e       	subi	r24, 0xEC	; 236
 78a:	01 c0       	rjmp	.+2      	; 0x78e <LCDGotoXY+0x16>
 78c:	8c 5a       	subi	r24, 0xAC	; 172
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 794:	08 95       	ret

00000796 <CopyStringtoLCD>:
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	ec 01       	movw	r28, r24
 79e:	86 2f       	mov	r24, r22
 7a0:	64 2f       	mov	r22, r20
 7a2:	0e 94 bc 03 	call	0x778	; 0x778 <LCDGotoXY>
 7a6:	10 e0       	ldi	r17, 0x00	; 0
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <CopyStringtoLCD+0x1a>
 7aa:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCDsendChar>
 7ae:	1f 5f       	subi	r17, 0xFF	; 255
 7b0:	fe 01       	movw	r30, r28
 7b2:	e1 0f       	add	r30, r17
 7b4:	f1 1d       	adc	r31, r1
 7b6:	84 91       	lpm	r24, Z+
 7b8:	88 23       	and	r24, r24
 7ba:	b9 f7       	brne	.-18     	; 0x7aa <CopyStringtoLCD+0x14>
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	08 95       	ret

000007c4 <LCDdefinechar>:
 7c4:	ef 92       	push	r14
 7c6:	ff 92       	push	r15
 7c8:	0f 93       	push	r16
 7ca:	1f 93       	push	r17
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	7c 01       	movw	r14, r24
 7d2:	16 2f       	mov	r17, r22
 7d4:	11 0f       	add	r17, r17
 7d6:	11 0f       	add	r17, r17
 7d8:	11 0f       	add	r17, r17
 7da:	10 64       	ori	r17, 0x40	; 64
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
 7de:	d0 e0       	ldi	r29, 0x00	; 0
 7e0:	f7 01       	movw	r30, r14
 7e2:	ec 0f       	add	r30, r28
 7e4:	fd 1f       	adc	r31, r29
 7e6:	04 91       	lpm	r16, Z+
 7e8:	81 2f       	mov	r24, r17
 7ea:	8c 0f       	add	r24, r28
 7ec:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 7f0:	80 2f       	mov	r24, r16
 7f2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCDsendChar>
 7f6:	21 96       	adiw	r28, 0x01	; 1
 7f8:	c8 30       	cpi	r28, 0x08	; 8
 7fa:	d1 05       	cpc	r29, r1
 7fc:	89 f7       	brne	.-30     	; 0x7e0 <LCDdefinechar+0x1c>
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	ff 90       	pop	r15
 808:	ef 90       	pop	r14
 80a:	08 95       	ret

0000080c <LCDinit>:
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	88 e9       	ldi	r24, 0x98	; 152
 814:	9a e3       	ldi	r25, 0x3A	; 58
 816:	01 97       	sbiw	r24, 0x01	; 1
 818:	f1 f7       	brne	.-4      	; 0x816 <LCDinit+0xa>
 81a:	15 ba       	out	0x15, r1	; 21
 81c:	15 ba       	out	0x15, r1	; 21
 81e:	84 b3       	in	r24, 0x14	; 20
 820:	80 6f       	ori	r24, 0xF0	; 240
 822:	84 bb       	out	0x14, r24	; 20
 824:	84 b3       	in	r24, 0x14	; 20
 826:	87 60       	ori	r24, 0x07	; 7
 828:	84 bb       	out	0x14, r24	; 20
 82a:	80 e3       	ldi	r24, 0x30	; 48
 82c:	85 bb       	out	0x15, r24	; 21
 82e:	aa 9a       	sbi	0x15, 2	; 21
 830:	28 ee       	ldi	r18, 0xE8	; 232
 832:	33 e0       	ldi	r19, 0x03	; 3
 834:	f9 01       	movw	r30, r18
 836:	31 97       	sbiw	r30, 0x01	; 1
 838:	f1 f7       	brne	.-4      	; 0x836 <LCDinit+0x2a>
 83a:	aa 98       	cbi	0x15, 2	; 21
 83c:	f9 01       	movw	r30, r18
 83e:	31 97       	sbiw	r30, 0x01	; 1
 840:	f1 f7       	brne	.-4      	; 0x83e <LCDinit+0x32>
 842:	85 bb       	out	0x15, r24	; 21
 844:	aa 9a       	sbi	0x15, 2	; 21
 846:	c9 01       	movw	r24, r18
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <LCDinit+0x3c>
 84c:	aa 98       	cbi	0x15, 2	; 21
 84e:	c9 01       	movw	r24, r18
 850:	01 97       	sbiw	r24, 0x01	; 1
 852:	f1 f7       	brne	.-4      	; 0x850 <LCDinit+0x44>
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	85 bb       	out	0x15, r24	; 21
 858:	aa 9a       	sbi	0x15, 2	; 21
 85a:	c9 01       	movw	r24, r18
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	f1 f7       	brne	.-4      	; 0x85c <LCDinit+0x50>
 860:	aa 98       	cbi	0x15, 2	; 21
 862:	c9 01       	movw	r24, r18
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
 868:	88 e2       	ldi	r24, 0x28	; 40
 86a:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 86e:	8c e0       	ldi	r24, 0x0C	; 12
 870:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 874:	c4 e5       	ldi	r28, 0x54	; 84
 876:	d0 e0       	ldi	r29, 0x00	; 0
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	16 2f       	mov	r17, r22
 87c:	1f 5f       	subi	r17, 0xFF	; 255
 87e:	ce 01       	movw	r24, r28
 880:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCDdefinechar>
 884:	28 96       	adiw	r28, 0x08	; 8
 886:	61 2f       	mov	r22, r17
 888:	18 30       	cpi	r17, 0x08	; 8
 88a:	b9 f7       	brne	.-18     	; 0x87a <__stack+0x1b>
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	1f 91       	pop	r17
 892:	08 95       	ret

00000894 <LCDshiftLeft>:
 894:	0f 93       	push	r16
 896:	1f 93       	push	r17
 898:	08 2f       	mov	r16, r24
 89a:	10 e0       	ldi	r17, 0x00	; 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <LCDshiftLeft+0x12>
 89e:	8e e1       	ldi	r24, 0x1E	; 30
 8a0:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 8a4:	1f 5f       	subi	r17, 0xFF	; 255
 8a6:	10 17       	cp	r17, r16
 8a8:	d0 f3       	brcs	.-12     	; 0x89e <LCDshiftLeft+0xa>
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	08 95       	ret

000008b0 <LCDshiftRight>:
 8b0:	0f 93       	push	r16
 8b2:	1f 93       	push	r17
 8b4:	08 2f       	mov	r16, r24
 8b6:	10 e0       	ldi	r17, 0x00	; 0
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <LCDshiftRight+0x12>
 8ba:	88 e1       	ldi	r24, 0x18	; 24
 8bc:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 8c0:	1f 5f       	subi	r17, 0xFF	; 255
 8c2:	10 17       	cp	r17, r16
 8c4:	d0 f3       	brcs	.-12     	; 0x8ba <LCDshiftRight+0xa>
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	08 95       	ret

000008cc <LCDcursorOn>:
 8cc:	8e e0       	ldi	r24, 0x0E	; 14
 8ce:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 8d2:	08 95       	ret

000008d4 <LCDcursorOnBlink>:
 8d4:	8f e0       	ldi	r24, 0x0F	; 15
 8d6:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 8da:	08 95       	ret

000008dc <LCDcursorOFF>:
 8dc:	8c e0       	ldi	r24, 0x0C	; 12
 8de:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 8e2:	08 95       	ret

000008e4 <LCDblank>:
 8e4:	88 e0       	ldi	r24, 0x08	; 8
 8e6:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 8ea:	08 95       	ret

000008ec <LCDvisible>:
 8ec:	8c e0       	ldi	r24, 0x0C	; 12
 8ee:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 8f2:	08 95       	ret

000008f4 <LCDcursorLeft>:
 8f4:	0f 93       	push	r16
 8f6:	1f 93       	push	r17
 8f8:	08 2f       	mov	r16, r24
 8fa:	10 e0       	ldi	r17, 0x00	; 0
 8fc:	04 c0       	rjmp	.+8      	; 0x906 <LCDcursorLeft+0x12>
 8fe:	80 e1       	ldi	r24, 0x10	; 16
 900:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 904:	1f 5f       	subi	r17, 0xFF	; 255
 906:	10 17       	cp	r17, r16
 908:	d0 f3       	brcs	.-12     	; 0x8fe <LCDcursorLeft+0xa>
 90a:	1f 91       	pop	r17
 90c:	0f 91       	pop	r16
 90e:	08 95       	ret

00000910 <LCDcursorRight>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	08 2f       	mov	r16, r24
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	04 c0       	rjmp	.+8      	; 0x922 <LCDcursorRight+0x12>
 91a:	84 e1       	ldi	r24, 0x14	; 20
 91c:	0e 94 82 03 	call	0x704	; 0x704 <LCDsendCommand>
 920:	1f 5f       	subi	r17, 0xFF	; 255
 922:	10 17       	cp	r17, r16
 924:	d0 f3       	brcs	.-12     	; 0x91a <LCDcursorRight+0xa>
 926:	1f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	08 95       	ret

0000092c <LCDprogressBar>:
 92c:	df 92       	push	r13
 92e:	ef 92       	push	r14
 930:	ff 92       	push	r15
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	d4 2e       	mov	r13, r20
 93c:	96 e0       	ldi	r25, 0x06	; 6
 93e:	89 9f       	mul	r24, r25
 940:	c0 01       	movw	r24, r0
 942:	11 24       	eor	r1, r1
 944:	24 2f       	mov	r18, r20
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	ac 01       	movw	r20, r24
 94a:	42 9f       	mul	r20, r18
 94c:	c0 01       	movw	r24, r0
 94e:	43 9f       	mul	r20, r19
 950:	90 0d       	add	r25, r0
 952:	52 9f       	mul	r21, r18
 954:	90 0d       	add	r25, r0
 956:	11 24       	eor	r1, r1
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__divmodhi4>
 95e:	eb 01       	movw	r28, r22
 960:	cb 01       	movw	r24, r22
 962:	66 e0       	ldi	r22, 0x06	; 6
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__udivmodhi4>
 96a:	e8 2e       	mov	r14, r24
 96c:	ff 24       	eor	r15, r15
 96e:	00 e0       	ldi	r16, 0x00	; 0
 970:	10 e0       	ldi	r17, 0x00	; 0
 972:	12 c0       	rjmp	.+36     	; 0x998 <LCDprogressBar+0x6c>
 974:	c8 01       	movw	r24, r16
 976:	05 96       	adiw	r24, 0x05	; 5
 978:	c8 17       	cp	r28, r24
 97a:	d9 07       	cpc	r29, r25
 97c:	10 f0       	brcs	.+4      	; 0x982 <LCDprogressBar+0x56>
 97e:	85 e0       	ldi	r24, 0x05	; 5
 980:	06 c0       	rjmp	.+12     	; 0x98e <LCDprogressBar+0x62>
 982:	c0 17       	cp	r28, r16
 984:	d1 07       	cpc	r29, r17
 986:	10 f0       	brcs	.+4      	; 0x98c <LCDprogressBar+0x60>
 988:	8e 2d       	mov	r24, r14
 98a:	01 c0       	rjmp	.+2      	; 0x98e <LCDprogressBar+0x62>
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCDsendChar>
 992:	f3 94       	inc	r15
 994:	0a 5f       	subi	r16, 0xFA	; 250
 996:	1f 4f       	sbci	r17, 0xFF	; 255
 998:	fd 14       	cp	r15, r13
 99a:	60 f3       	brcs	.-40     	; 0x974 <LCDprogressBar+0x48>
 99c:	df 91       	pop	r29
 99e:	cf 91       	pop	r28
 9a0:	1f 91       	pop	r17
 9a2:	0f 91       	pop	r16
 9a4:	ff 90       	pop	r15
 9a6:	ef 90       	pop	r14
 9a8:	df 90       	pop	r13
 9aa:	08 95       	ret

000009ac <__udivmodhi4>:
 9ac:	aa 1b       	sub	r26, r26
 9ae:	bb 1b       	sub	r27, r27
 9b0:	51 e1       	ldi	r21, 0x11	; 17
 9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__udivmodhi4_ep>

000009b4 <__udivmodhi4_loop>:
 9b4:	aa 1f       	adc	r26, r26
 9b6:	bb 1f       	adc	r27, r27
 9b8:	a6 17       	cp	r26, r22
 9ba:	b7 07       	cpc	r27, r23
 9bc:	10 f0       	brcs	.+4      	; 0x9c2 <__udivmodhi4_ep>
 9be:	a6 1b       	sub	r26, r22
 9c0:	b7 0b       	sbc	r27, r23

000009c2 <__udivmodhi4_ep>:
 9c2:	88 1f       	adc	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	5a 95       	dec	r21
 9c8:	a9 f7       	brne	.-22     	; 0x9b4 <__udivmodhi4_loop>
 9ca:	80 95       	com	r24
 9cc:	90 95       	com	r25
 9ce:	bc 01       	movw	r22, r24
 9d0:	cd 01       	movw	r24, r26
 9d2:	08 95       	ret

000009d4 <__divmodhi4>:
 9d4:	97 fb       	bst	r25, 7
 9d6:	09 2e       	mov	r0, r25
 9d8:	07 26       	eor	r0, r23
 9da:	0a d0       	rcall	.+20     	; 0x9f0 <__divmodhi4_neg1>
 9dc:	77 fd       	sbrc	r23, 7
 9de:	04 d0       	rcall	.+8      	; 0x9e8 <__divmodhi4_neg2>
 9e0:	e5 df       	rcall	.-54     	; 0x9ac <__udivmodhi4>
 9e2:	06 d0       	rcall	.+12     	; 0x9f0 <__divmodhi4_neg1>
 9e4:	00 20       	and	r0, r0
 9e6:	1a f4       	brpl	.+6      	; 0x9ee <__divmodhi4_exit>

000009e8 <__divmodhi4_neg2>:
 9e8:	70 95       	com	r23
 9ea:	61 95       	neg	r22
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255

000009ee <__divmodhi4_exit>:
 9ee:	08 95       	ret

000009f0 <__divmodhi4_neg1>:
 9f0:	f6 f7       	brtc	.-4      	; 0x9ee <__divmodhi4_exit>
 9f2:	90 95       	com	r25
 9f4:	81 95       	neg	r24
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	08 95       	ret

000009fa <strcat>:
 9fa:	fb 01       	movw	r30, r22
 9fc:	dc 01       	movw	r26, r24
 9fe:	0d 90       	ld	r0, X+
 a00:	00 20       	and	r0, r0
 a02:	e9 f7       	brne	.-6      	; 0x9fe <strcat+0x4>
 a04:	11 97       	sbiw	r26, 0x01	; 1
 a06:	01 90       	ld	r0, Z+
 a08:	0d 92       	st	X+, r0
 a0a:	00 20       	and	r0, r0
 a0c:	e1 f7       	brne	.-8      	; 0xa06 <strcat+0xc>
 a0e:	08 95       	ret

00000a10 <strcpy>:
 a10:	fb 01       	movw	r30, r22
 a12:	dc 01       	movw	r26, r24
 a14:	01 90       	ld	r0, Z+
 a16:	0d 92       	st	X+, r0
 a18:	00 20       	and	r0, r0
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <strcpy+0x4>
 a1c:	08 95       	ret

00000a1e <_exit>:
 a1e:	f8 94       	cli

00000a20 <__stop_program>:
 a20:	ff cf       	rjmp	.-2      	; 0xa20 <__stop_program>
