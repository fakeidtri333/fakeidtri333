
spimaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000005c2  2**0
                  ALLOC
  2 .stab         00001590  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cf6  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 36       	cpi	r26, 0x62	; 98
  ac:	b1 07       	cpc	r27, r17
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
  b4:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
  bc:	28 2f       	mov	r18, r24
  be:	20 7f       	andi	r18, 0xF0	; 240
  c0:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
  c2:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
  c4:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	28 ee       	ldi	r18, 0xE8	; 232
  c8:	33 e0       	ldi	r19, 0x03	; 3
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
  d0:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
  d2:	a8 98       	cbi	0x15, 0	; 21
  d4:	f9 01       	movw	r30, r18
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	44 e0       	ldi	r20, 0x04	; 4
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	4a 95       	dec	r20
  e4:	e1 f7       	brne	.-8      	; 0xde <LCDsendChar+0x22>
  e6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
  e8:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
  ea:	aa 9a       	sbi	0x15, 2	; 21
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
  f2:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
  f4:	a8 98       	cbi	0x15, 0	; 21
  f6:	c9 01       	movw	r24, r18
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
  fc:	08 95       	ret

000000fe <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
  fe:	28 2f       	mov	r18, r24
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 104:	aa 9a       	sbi	0x15, 2	; 21
 106:	28 ee       	ldi	r18, 0xE8	; 232
 108:	33 e0       	ldi	r19, 0x03	; 3
 10a:	f9 01       	movw	r30, r18
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 110:	aa 98       	cbi	0x15, 2	; 21
 112:	f9 01       	movw	r30, r18
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	54 e0       	ldi	r21, 0x04	; 4
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	5a 95       	dec	r21
 122:	e1 f7       	brne	.-8      	; 0x11c <LCDsendCommand+0x1e>
 124:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 126:	aa 9a       	sbi	0x15, 2	; 21
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 12e:	aa 98       	cbi	0x15, 2	; 21
 130:	c9 01       	movw	r24, r18
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 136:	08 95       	ret

00000138 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
}
 13e:	08 95       	ret

00000140 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
}
 146:	08 95       	ret

00000148 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	49 f0       	breq	.+18     	; 0x168 <LCDstring+0x20>
 156:	ec 01       	movw	r28, r24
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	04 c0       	rjmp	.+8      	; 0x164 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 15c:	89 91       	ld	r24, Y+
 15e:	0e 94 5e 00 	call	0xbc	; 0xbc <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 162:	1f 5f       	subi	r17, 0xFF	; 255
 164:	10 17       	cp	r17, r16
 166:	d0 f3       	brcs	.-12     	; 0x15c <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	31 f0       	breq	.+12     	; 0x182 <LCDGotoXY+0x10>
 176:	63 30       	cpi	r22, 0x03	; 3
 178:	31 f0       	breq	.+12     	; 0x186 <LCDGotoXY+0x14>
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	29 f4       	brne	.+10     	; 0x188 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 17e:	80 5c       	subi	r24, 0xC0	; 192
 180:	03 c0       	rjmp	.+6      	; 0x188 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 182:	8c 5e       	subi	r24, 0xEC	; 236
 184:	01 c0       	rjmp	.+2      	; 0x188 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 186:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
	
}
 18e:	08 95       	ret

00000190 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 19a:	64 2f       	mov	r22, r20
 19c:	0e 94 b9 00 	call	0x172	; 0x172 <LCDGotoXY>
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 1a4:	0e 94 5e 00 	call	0xbc	; 0xbc <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 1a8:	1f 5f       	subi	r17, 0xFF	; 255
 1aa:	fe 01       	movw	r30, r28
 1ac:	e1 0f       	add	r30, r17
 1ae:	f1 1d       	adc	r31, r1
 1b0:	84 91       	lpm	r24, Z+
 1b2:	88 23       	and	r24, r24
 1b4:	b9 f7       	brne	.-18     	; 0x1a4 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	08 95       	ret

000001be <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	7c 01       	movw	r14, r24
 1cc:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1ce:	11 0f       	add	r17, r17
 1d0:	11 0f       	add	r17, r17
 1d2:	11 0f       	add	r17, r17
 1d4:	10 64       	ori	r17, 0x40	; 64
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 1da:	f7 01       	movw	r30, r14
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 1e2:	81 2f       	mov	r24, r17
 1e4:	8c 0f       	add	r24, r28
 1e6:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
		LCDsendChar(pcc);
 1ea:	80 2f       	mov	r24, r16
 1ec:	0e 94 5e 00 	call	0xbc	; 0xbc <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1f0:	21 96       	adiw	r28, 0x01	; 1
 1f2:	c8 30       	cpi	r28, 0x08	; 8
 1f4:	d1 05       	cpc	r29, r1
 1f6:	89 f7       	brne	.-30     	; 0x1da <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	08 95       	ret

00000206 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	88 e9       	ldi	r24, 0x98	; 152
 20e:	9a e3       	ldi	r25, 0x3A	; 58
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 214:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 216:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 218:	84 b3       	in	r24, 0x14	; 20
 21a:	80 6f       	ori	r24, 0xF0	; 240
 21c:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 21e:	84 b3       	in	r24, 0x14	; 20
 220:	87 60       	ori	r24, 0x07	; 7
 222:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 228:	aa 9a       	sbi	0x15, 2	; 21
 22a:	28 ee       	ldi	r18, 0xE8	; 232
 22c:	33 e0       	ldi	r19, 0x03	; 3
 22e:	f9 01       	movw	r30, r18
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 234:	aa 98       	cbi	0x15, 2	; 21
 236:	f9 01       	movw	r30, r18
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 23c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 23e:	aa 9a       	sbi	0x15, 2	; 21
 240:	c9 01       	movw	r24, r18
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 246:	aa 98       	cbi	0x15, 2	; 21
 248:	c9 01       	movw	r24, r18
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 252:	aa 9a       	sbi	0x15, 2	; 21
 254:	c9 01       	movw	r24, r18
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 25a:	aa 98       	cbi	0x15, 2	; 21
 25c:	c9 01       	movw	r24, r18
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 262:	88 e2       	ldi	r24, 0x28	; 40
 264:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
 26e:	c4 e5       	ldi	r28, 0x54	; 84
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 274:	16 2f       	mov	r17, r22
 276:	1f 5f       	subi	r17, 0xFF	; 255
 278:	ce 01       	movw	r24, r28
 27a:	0e 94 df 00 	call	0x1be	; 0x1be <LCDdefinechar>
 27e:	28 96       	adiw	r28, 0x08	; 8
 280:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 282:	18 30       	cpi	r17, 0x08	; 8
 284:	b9 f7       	brne	.-18     	; 0x274 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	08 95       	ret

0000028e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 29a:	08 2f       	mov	r16, r24
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 2a0:	8e e1       	ldi	r24, 0x1E	; 30
 2a2:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 2a6:	21 96       	adiw	r28, 0x01	; 1
 2a8:	c0 17       	cp	r28, r16
 2aa:	d1 07       	cpc	r29, r17
 2ac:	cc f3       	brlt	.-14     	; 0x2a0 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 2c4:	08 2f       	mov	r16, r24
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 2ca:	88 e1       	ldi	r24, 0x18	; 24
 2cc:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	c0 17       	cp	r28, r16
 2d4:	d1 07       	cpc	r29, r17
 2d6:	cc f3       	brlt	.-14     	; 0x2ca <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 2e2:	8e e0       	ldi	r24, 0x0E	; 14
 2e4:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
}
 2e8:	08 95       	ret

000002ea <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 2ea:	8f e0       	ldi	r24, 0x0F	; 15
 2ec:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
}
 2f0:	08 95       	ret

000002f2 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 2f2:	8c e0       	ldi	r24, 0x0C	; 12
 2f4:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
}
 2f8:	08 95       	ret

000002fa <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
}
 300:	08 95       	ret

00000302 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
}
 308:	08 95       	ret

0000030a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 316:	08 2f       	mov	r16, r24
 318:	10 e0       	ldi	r17, 0x00	; 0
 31a:	04 c0       	rjmp	.+8      	; 0x324 <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 322:	21 96       	adiw	r28, 0x01	; 1
 324:	c0 17       	cp	r28, r16
 326:	d1 07       	cpc	r29, r17
 328:	cc f3       	brlt	.-14     	; 0x31c <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	08 95       	ret

00000334 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 33e:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 340:	08 2f       	mov	r16, r24
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	04 c0       	rjmp	.+8      	; 0x34e <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 346:	84 e1       	ldi	r24, 0x14	; 20
 348:	0e 94 7f 00 	call	0xfe	; 0xfe <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 34c:	21 96       	adiw	r28, 0x01	; 1
 34e:	c0 17       	cp	r28, r16
 350:	d1 07       	cpc	r29, r17
 352:	cc f3       	brlt	.-14     	; 0x346 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 36e:	96 e0       	ldi	r25, 0x06	; 6
 370:	89 9f       	mul	r24, r25
 372:	c0 01       	movw	r24, r0
 374:	11 24       	eor	r1, r1
 376:	24 2f       	mov	r18, r20
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	ac 01       	movw	r20, r24
 37c:	42 9f       	mul	r20, r18
 37e:	c0 01       	movw	r24, r0
 380:	43 9f       	mul	r20, r19
 382:	90 0d       	add	r25, r0
 384:	52 9f       	mul	r21, r18
 386:	90 0d       	add	r25, r0
 388:	11 24       	eor	r1, r1
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	0e 94 92 02 	call	0x524	; 0x524 <__divmodhi4>
 390:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 392:	cb 01       	movw	r24, r22
 394:	66 e0       	ldi	r22, 0x06	; 6
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__udivmodhi4>
 39c:	e8 2e       	mov	r14, r24
 39e:	ff 24       	eor	r15, r15
 3a0:	00 e0       	ldi	r16, 0x00	; 0
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	12 c0       	rjmp	.+36     	; 0x3ca <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3a6:	c8 01       	movw	r24, r16
 3a8:	05 96       	adiw	r24, 0x05	; 5
 3aa:	c8 17       	cp	r28, r24
 3ac:	d9 07       	cpc	r29, r25
 3ae:	10 f0       	brcs	.+4      	; 0x3b4 <LCDprogressBar+0x56>
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3b4:	c0 17       	cp	r28, r16
 3b6:	d1 07       	cpc	r29, r17
 3b8:	10 f0       	brcs	.+4      	; 0x3be <LCDprogressBar+0x60>
 3ba:	8e 2d       	mov	r24, r14
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <LCDprogressBar+0x62>
 3be:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3c0:	0e 94 5e 00 	call	0xbc	; 0xbc <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3c4:	f3 94       	inc	r15
 3c6:	0a 5f       	subi	r16, 0xFA	; 250
 3c8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ca:	fd 14       	cp	r15, r13
 3cc:	60 f3       	brcs	.-40     	; 0x3a6 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	df 90       	pop	r13
 3dc:	08 95       	ret

000003de <set_spi_master>:
#include<avr/io.h>

int spiint=0;
void set_spi_master()
{
	DDRB|=(1<<5);// set mosi pin
 3de:	bd 9a       	sbi	0x17, 5	; 23
	DDRB|=(1<<7);// set sck pin
 3e0:	bf 9a       	sbi	0x17, 7	; 23
	DDRB|=(1<<4);///set ss pin
 3e2:	bc 9a       	sbi	0x17, 4	; 23
	DDRB&=~(1<<6);// set miso pin
 3e4:	be 98       	cbi	0x17, 6	; 23
	SPCR|=(1<<MSTR);
 3e6:	6c 9a       	sbi	0x0d, 4	; 13
	SPCR|=(1<<SPE);
 3e8:	6e 9a       	sbi	0x0d, 6	; 13
}
 3ea:	08 95       	ret

000003ec <set_spi_slave>:

void set_spi_slave()
{
	DDRB&=~(1<<5);// set mosi pin
 3ec:	bd 98       	cbi	0x17, 5	; 23
	DDRB&=~(1<<7);// set sck pin
 3ee:	bf 98       	cbi	0x17, 7	; 23
	DDRB&=~(1<<4);// set ss pin
 3f0:	bc 98       	cbi	0x17, 4	; 23
	DDRB|=(1<<6);// set miso pin
 3f2:	be 9a       	sbi	0x17, 6	; 23
	SPCR&=~(1<<MSTR);
 3f4:	6c 98       	cbi	0x0d, 4	; 13
	SPCR|=(1<<SPE);
 3f6:	6e 9a       	sbi	0x0d, 6	; 13
}
 3f8:	08 95       	ret

000003fa <sendchar_spi>:


unsigned char sendchar_spi(unsigned char data)
{
 3fa:	28 2f       	mov	r18, r24
	if(spiint)
 3fc:	80 91 60 00 	lds	r24, 0x0060
 400:	90 91 61 00 	lds	r25, 0x0061
 404:	89 2b       	or	r24, r25
 406:	19 f0       	breq	.+6      	; 0x40e <sendchar_spi+0x14>
	{
		SPDR=data;
 408:	2f b9       	out	0x0f, r18	; 15
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
		return 0;
	}
	else
	{
		SPDR=data;
 40e:	2f b9       	out	0x0f, r18	; 15
		while ((SPSR & (1<<7))==0);//SPIF
 410:	77 9b       	sbis	0x0e, 7	; 14
 412:	fe cf       	rjmp	.-4      	; 0x410 <sendchar_spi+0x16>
		return SPDR;
 414:	8f b1       	in	r24, 0x0f	; 15
	}

}
 416:	08 95       	ret

00000418 <set_spi_prescalar>:
void set_spi_prescalar(int pre)
{
	int ii,jj;
	ii=pre&0b00000011;
	SPCR&=0b11111100;
 418:	2d b1       	in	r18, 0x0d	; 13
 41a:	2c 7f       	andi	r18, 0xFC	; 252
 41c:	2d b9       	out	0x0d, r18	; 13
	SPCR|=ii;
 41e:	4d b1       	in	r20, 0x0d	; 13
 420:	9c 01       	movw	r18, r24
 422:	23 70       	andi	r18, 0x03	; 3
 424:	30 70       	andi	r19, 0x00	; 0
 426:	42 2b       	or	r20, r18
 428:	4d b9       	out	0x0d, r20	; 13
	jj=pre&0b00000100;
 42a:	84 70       	andi	r24, 0x04	; 4
 42c:	90 70       	andi	r25, 0x00	; 0
	jj=jj>>2;
	SPSR&=0b11111110;
 42e:	70 98       	cbi	0x0e, 0	; 14
	SPSR|=jj;
 430:	2e b1       	in	r18, 0x0e	; 14
 432:	95 95       	asr	r25
 434:	87 95       	ror	r24
 436:	95 95       	asr	r25
 438:	87 95       	ror	r24
 43a:	28 2b       	or	r18, r24
 43c:	2e b9       	out	0x0e, r18	; 14
}
 43e:	08 95       	ret

00000440 <enable_spiint>:

void enable_spiint()
{
	SPCR|=(1<<SPIE);
 440:	6f 9a       	sbi	0x0d, 7	; 13
	spiint=1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	90 93 61 00 	sts	0x0061, r25
 44a:	80 93 60 00 	sts	0x0060, r24
}
 44e:	08 95       	ret

00000450 <Disable_spiint>:

void Disable_spiint()
{
	SPCR&=~(1<<SPIE);
 450:	6f 98       	cbi	0x0d, 7	; 13
	spiint=0;
 452:	10 92 61 00 	sts	0x0061, r1
 456:	10 92 60 00 	sts	0x0060, r1
}
 45a:	08 95       	ret

0000045c <set_spi_lsbfirst>:

void set_spi_lsbfirst()
{
	SPCR|=(1<<DORD);
 45c:	6d 9a       	sbi	0x0d, 5	; 13
}
 45e:	08 95       	ret

00000460 <set_spi_msbfirst>:

void set_spi_msbfirst()
{
	SPCR&=~(1<<DORD);
 460:	6d 98       	cbi	0x0d, 5	; 13
}
 462:	08 95       	ret

00000464 <set_spi_clkpolarity>:

void set_spi_clkpolarity(int cpol)
{
	cpol=cpol%2;
	SPCR&=~(1<<CPOL);
 464:	6b 98       	cbi	0x0d, 3	; 13
	SPCR|=(cpol<<CPOL);
 466:	2d b1       	in	r18, 0x0d	; 13
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	0e 94 92 02 	call	0x524	; 0x524 <__divmodhi4>
 470:	43 e0       	ldi	r20, 0x03	; 3
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	4a 95       	dec	r20
 478:	e1 f7       	brne	.-8      	; 0x472 <set_spi_clkpolarity+0xe>
 47a:	28 2b       	or	r18, r24
 47c:	2d b9       	out	0x0d, r18	; 13
}
 47e:	08 95       	ret

00000480 <set_spi_clkphase>:

void set_spi_clkphase(int cpha)
{
	cpha=cpha%2;
	SPCR=~(1<<CPHA);
 480:	2b ef       	ldi	r18, 0xFB	; 251
 482:	2d b9       	out	0x0d, r18	; 13
	SPCR|=(cpha<<CPHA);
 484:	2d b1       	in	r18, 0x0d	; 13
 486:	62 e0       	ldi	r22, 0x02	; 2
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	0e 94 92 02 	call	0x524	; 0x524 <__divmodhi4>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	28 2b       	or	r18, r24
 498:	2d b9       	out	0x0d, r18	; 13
}
 49a:	08 95       	ret

0000049c <main>:
 */

#include <avr/io.h>
#include<util/delay.h>
void main()
{
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
	char d;
	LCDinit();
 4a2:	0e 94 03 01 	call	0x206	; 0x206 <LCDinit>
	LCDclr();
 4a6:	0e 94 9c 00 	call	0x138	; 0x138 <LCDclr>
	set_spi_prescalar(3);
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 0c 02 	call	0x418	; 0x418 <set_spi_prescalar>
	set_spi_master();
 4b2:	0e 94 ef 01 	call	0x3de	; 0x3de <set_spi_master>
	set_spi_lsbfirst();
 4b6:	0e 94 2e 02 	call	0x45c	; 0x45c <set_spi_lsbfirst>
	set_spi_clkpolarity(1);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 32 02 	call	0x464	; 0x464 <set_spi_clkpolarity>
	set_spi_clkphase(1);
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 40 02 	call	0x480	; 0x480 <set_spi_clkphase>
 4ca:	c4 e6       	ldi	r28, 0x64	; 100
 4cc:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		d=sendchar_spi('D');
 4ce:	84 e4       	ldi	r24, 0x44	; 68
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sendchar_spi>
 4d6:	18 2f       	mov	r17, r24
		LCDGotoXY(0,0);
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	0e 94 b9 00 	call	0x172	; 0x172 <LCDGotoXY>
		LCDsendChar(d);
 4e4:	81 2f       	mov	r24, r17
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 5e 00 	call	0xbc	; 0xbc <LCDsendChar>
 4ec:	80 e1       	ldi	r24, 0x10	; 16
 4ee:	97 e2       	ldi	r25, 0x27	; 39
 4f0:	fe 01       	movw	r30, r28
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <main+0x56>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4f8:	d9 f7       	brne	.-10     	; 0x4f0 <main+0x54>
 4fa:	e9 cf       	rjmp	.-46     	; 0x4ce <main+0x32>

000004fc <__udivmodhi4>:
 4fc:	aa 1b       	sub	r26, r26
 4fe:	bb 1b       	sub	r27, r27
 500:	51 e1       	ldi	r21, 0x11	; 17
 502:	07 c0       	rjmp	.+14     	; 0x512 <__udivmodhi4_ep>

00000504 <__udivmodhi4_loop>:
 504:	aa 1f       	adc	r26, r26
 506:	bb 1f       	adc	r27, r27
 508:	a6 17       	cp	r26, r22
 50a:	b7 07       	cpc	r27, r23
 50c:	10 f0       	brcs	.+4      	; 0x512 <__udivmodhi4_ep>
 50e:	a6 1b       	sub	r26, r22
 510:	b7 0b       	sbc	r27, r23

00000512 <__udivmodhi4_ep>:
 512:	88 1f       	adc	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	5a 95       	dec	r21
 518:	a9 f7       	brne	.-22     	; 0x504 <__udivmodhi4_loop>
 51a:	80 95       	com	r24
 51c:	90 95       	com	r25
 51e:	bc 01       	movw	r22, r24
 520:	cd 01       	movw	r24, r26
 522:	08 95       	ret

00000524 <__divmodhi4>:
 524:	97 fb       	bst	r25, 7
 526:	09 2e       	mov	r0, r25
 528:	07 26       	eor	r0, r23
 52a:	0a d0       	rcall	.+20     	; 0x540 <__divmodhi4_neg1>
 52c:	77 fd       	sbrc	r23, 7
 52e:	04 d0       	rcall	.+8      	; 0x538 <__divmodhi4_neg2>
 530:	e5 df       	rcall	.-54     	; 0x4fc <__udivmodhi4>
 532:	06 d0       	rcall	.+12     	; 0x540 <__divmodhi4_neg1>
 534:	00 20       	and	r0, r0
 536:	1a f4       	brpl	.+6      	; 0x53e <__divmodhi4_exit>

00000538 <__divmodhi4_neg2>:
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255

0000053e <__divmodhi4_exit>:
 53e:	08 95       	ret

00000540 <__divmodhi4_neg1>:
 540:	f6 f7       	brtc	.-4      	; 0x53e <__divmodhi4_exit>
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
