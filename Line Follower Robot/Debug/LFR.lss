
LFR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b38  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000b38  00000bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012b4  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d32  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e8 e3       	ldi	r30, 0x38	; 56
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	a2 38       	cpi	r26, 0x82	; 130
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
  b6:	0e 94 01 02 	call	0x402	; 0x402 <main>
  ba:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
  c2:	28 2f       	mov	r18, r24
  c4:	20 7f       	andi	r18, 0xF0	; 240
  c6:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
  c8:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
  ca:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	28 ee       	ldi	r18, 0xE8	; 232
  ce:	33 e0       	ldi	r19, 0x03	; 3
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
  d6:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
  d8:	a8 98       	cbi	0x15, 0	; 21
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	44 e0       	ldi	r20, 0x04	; 4
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	4a 95       	dec	r20
  ea:	e1 f7       	brne	.-8      	; 0xe4 <LCDsendChar+0x22>
  ec:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
  ee:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
  f0:	aa 9a       	sbi	0x15, 2	; 21
  f2:	c9 01       	movw	r24, r18
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
  f8:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
  fa:	a8 98       	cbi	0x15, 0	; 21
  fc:	c9 01       	movw	r24, r18
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 102:	08 95       	ret

00000104 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 104:	28 2f       	mov	r18, r24
 106:	20 7f       	andi	r18, 0xF0	; 240
 108:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 10a:	aa 9a       	sbi	0x15, 2	; 21
 10c:	28 ee       	ldi	r18, 0xE8	; 232
 10e:	33 e0       	ldi	r19, 0x03	; 3
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 116:	aa 98       	cbi	0x15, 2	; 21
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	54 e0       	ldi	r21, 0x04	; 4
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	5a 95       	dec	r21
 128:	e1 f7       	brne	.-8      	; 0x122 <LCDsendCommand+0x1e>
 12a:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 12c:	aa 9a       	sbi	0x15, 2	; 21
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 134:	aa 98       	cbi	0x15, 2	; 21
 136:	c9 01       	movw	r24, r18
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 13c:	08 95       	ret

0000013e <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
}
 144:	08 95       	ret

00000146 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
}
 14c:	08 95       	ret

0000014e <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	49 f0       	breq	.+18     	; 0x16e <LCDstring+0x20>
 15c:	ec 01       	movw	r28, r24
 15e:	10 e0       	ldi	r17, 0x00	; 0
 160:	04 c0       	rjmp	.+8      	; 0x16a <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 162:	89 91       	ld	r24, Y+
 164:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 168:	1f 5f       	subi	r17, 0xFF	; 255
 16a:	10 17       	cp	r17, r16
 16c:	d0 f3       	brcs	.-12     	; 0x162 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 178:	62 30       	cpi	r22, 0x02	; 2
 17a:	31 f0       	breq	.+12     	; 0x188 <LCDGotoXY+0x10>
 17c:	63 30       	cpi	r22, 0x03	; 3
 17e:	31 f0       	breq	.+12     	; 0x18c <LCDGotoXY+0x14>
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	29 f4       	brne	.+10     	; 0x18e <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 184:	80 5c       	subi	r24, 0xC0	; 192
 186:	03 c0       	rjmp	.+6      	; 0x18e <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 188:	8c 5e       	subi	r24, 0xEC	; 236
 18a:	01 c0       	rjmp	.+2      	; 0x18e <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 18c:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
	
}
 194:	08 95       	ret

00000196 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
 19e:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 1a0:	64 2f       	mov	r22, r20
 1a2:	0e 94 bc 00 	call	0x178	; 0x178 <LCDGotoXY>
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 1aa:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 1ae:	1f 5f       	subi	r17, 0xFF	; 255
 1b0:	fe 01       	movw	r30, r28
 1b2:	e1 0f       	add	r30, r17
 1b4:	f1 1d       	adc	r31, r1
 1b6:	84 91       	lpm	r24, Z+
 1b8:	88 23       	and	r24, r24
 1ba:	b9 f7       	brne	.-18     	; 0x1aa <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	08 95       	ret

000001c4 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	7c 01       	movw	r14, r24
 1d2:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1d4:	11 0f       	add	r17, r17
 1d6:	11 0f       	add	r17, r17
 1d8:	11 0f       	add	r17, r17
 1da:	10 64       	ori	r17, 0x40	; 64
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 1e0:	f7 01       	movw	r30, r14
 1e2:	ec 0f       	add	r30, r28
 1e4:	fd 1f       	adc	r31, r29
 1e6:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 1e8:	81 2f       	mov	r24, r17
 1ea:	8c 0f       	add	r24, r28
 1ec:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
		LCDsendChar(pcc);
 1f0:	80 2f       	mov	r24, r16
 1f2:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 1f6:	21 96       	adiw	r28, 0x01	; 1
 1f8:	c8 30       	cpi	r28, 0x08	; 8
 1fa:	d1 05       	cpc	r29, r1
 1fc:	89 f7       	brne	.-30     	; 0x1e0 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	88 e9       	ldi	r24, 0x98	; 152
 214:	9a e3       	ldi	r25, 0x3A	; 58
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 21a:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 21c:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 21e:	84 b3       	in	r24, 0x14	; 20
 220:	80 6f       	ori	r24, 0xF0	; 240
 222:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 224:	84 b3       	in	r24, 0x14	; 20
 226:	87 60       	ori	r24, 0x07	; 7
 228:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 22a:	80 e3       	ldi	r24, 0x30	; 48
 22c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 22e:	aa 9a       	sbi	0x15, 2	; 21
 230:	28 ee       	ldi	r18, 0xE8	; 232
 232:	33 e0       	ldi	r19, 0x03	; 3
 234:	f9 01       	movw	r30, r18
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 23a:	aa 98       	cbi	0x15, 2	; 21
 23c:	f9 01       	movw	r30, r18
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 242:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 244:	aa 9a       	sbi	0x15, 2	; 21
 246:	c9 01       	movw	r24, r18
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 24c:	aa 98       	cbi	0x15, 2	; 21
 24e:	c9 01       	movw	r24, r18
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 258:	aa 9a       	sbi	0x15, 2	; 21
 25a:	c9 01       	movw	r24, r18
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 260:	aa 98       	cbi	0x15, 2	; 21
 262:	c9 01       	movw	r24, r18
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 26e:	8c e0       	ldi	r24, 0x0C	; 12
 270:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
 274:	c4 e5       	ldi	r28, 0x54	; 84
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 27a:	16 2f       	mov	r17, r22
 27c:	1f 5f       	subi	r17, 0xFF	; 255
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCDdefinechar>
 284:	28 96       	adiw	r28, 0x08	; 8
 286:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 288:	18 30       	cpi	r17, 0x08	; 8
 28a:	b9 f7       	brne	.-18     	; 0x27a <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	08 95       	ret

00000294 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 2a0:	08 2f       	mov	r16, r24
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 2a6:	8e e1       	ldi	r24, 0x1E	; 30
 2a8:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 2ac:	21 96       	adiw	r28, 0x01	; 1
 2ae:	c0 17       	cp	r28, r16
 2b0:	d1 07       	cpc	r29, r17
 2b2:	cc f3       	brlt	.-14     	; 0x2a6 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 2ca:	08 2f       	mov	r16, r24
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 2d0:	88 e1       	ldi	r24, 0x18	; 24
 2d2:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	c0 17       	cp	r28, r16
 2da:	d1 07       	cpc	r29, r17
 2dc:	cc f3       	brlt	.-14     	; 0x2d0 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

000002e8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 2e8:	8e e0       	ldi	r24, 0x0E	; 14
 2ea:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
}
 2ee:	08 95       	ret

000002f0 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 2f0:	8f e0       	ldi	r24, 0x0F	; 15
 2f2:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
}
 2f6:	08 95       	ret

000002f8 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
}
 2fe:	08 95       	ret

00000300 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 300:	88 e0       	ldi	r24, 0x08	; 8
 302:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
}
 306:	08 95       	ret

00000308 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
}
 30e:	08 95       	ret

00000310 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	c0 e0       	ldi	r28, 0x00	; 0
 31a:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 31c:	08 2f       	mov	r16, r24
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	04 c0       	rjmp	.+8      	; 0x32a <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 322:	80 e1       	ldi	r24, 0x10	; 16
 324:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 328:	21 96       	adiw	r28, 0x01	; 1
 32a:	c0 17       	cp	r28, r16
 32c:	d1 07       	cpc	r29, r17
 32e:	cc f3       	brlt	.-14     	; 0x322 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	08 95       	ret

0000033a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	c0 e0       	ldi	r28, 0x00	; 0
 344:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 346:	08 2f       	mov	r16, r24
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	04 c0       	rjmp	.+8      	; 0x354 <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 34c:	84 e1       	ldi	r24, 0x14	; 20
 34e:	0e 94 82 00 	call	0x104	; 0x104 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 352:	21 96       	adiw	r28, 0x01	; 1
 354:	c0 17       	cp	r28, r16
 356:	d1 07       	cpc	r29, r17
 358:	cc f3       	brlt	.-14     	; 0x34c <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 364:	df 92       	push	r13
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 374:	96 e0       	ldi	r25, 0x06	; 6
 376:	89 9f       	mul	r24, r25
 378:	c0 01       	movw	r24, r0
 37a:	11 24       	eor	r1, r1
 37c:	24 2f       	mov	r18, r20
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	42 9f       	mul	r20, r18
 384:	c0 01       	movw	r24, r0
 386:	43 9f       	mul	r20, r19
 388:	90 0d       	add	r25, r0
 38a:	52 9f       	mul	r21, r18
 38c:	90 0d       	add	r25, r0
 38e:	11 24       	eor	r1, r1
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__divmodhi4>
 396:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 398:	cb 01       	movw	r24, r22
 39a:	66 e0       	ldi	r22, 0x06	; 6
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	0e 94 3c 05 	call	0xa78	; 0xa78 <__udivmodhi4>
 3a2:	e8 2e       	mov	r14, r24
 3a4:	ff 24       	eor	r15, r15
 3a6:	00 e0       	ldi	r16, 0x00	; 0
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3ac:	c8 01       	movw	r24, r16
 3ae:	05 96       	adiw	r24, 0x05	; 5
 3b0:	c8 17       	cp	r28, r24
 3b2:	d9 07       	cpc	r29, r25
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <LCDprogressBar+0x56>
 3b6:	85 e0       	ldi	r24, 0x05	; 5
 3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3ba:	c0 17       	cp	r28, r16
 3bc:	d1 07       	cpc	r29, r17
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <LCDprogressBar+0x60>
 3c0:	8e 2d       	mov	r24, r14
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <LCDprogressBar+0x62>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3c6:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3ca:	f3 94       	inc	r15
 3cc:	0a 5f       	subi	r16, 0xFA	; 250
 3ce:	1f 4f       	sbci	r17, 0xFF	; 255
 3d0:	fd 14       	cp	r15, r13
 3d2:	60 f3       	brcs	.-40     	; 0x3ac <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	08 95       	ret

000003e4 <read_adc>:
#include<stdio.h>
#define ADC_VREF_TYPE 0b00000000

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input){
ADMUX=adc_input|ADC_VREF_TYPE;
 3e4:	87 b9       	out	0x07, r24	; 7
ADCSRA|=0x40;                 // Start the AD conversion
 3e6:	36 9a       	sbi	0x06, 6	; 6
while ((ADCSRA & 0x10)==0);  // Wait for the AD conversion to complete
 3e8:	34 9b       	sbis	0x06, 4	; 6
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <read_adc+0x4>
ADCSRA|=0x10;
 3ec:	34 9a       	sbi	0x06, 4	; 6
return ADCW;
 3ee:	24 b1       	in	r18, 0x04	; 4
 3f0:	35 b1       	in	r19, 0x05	; 5
}
 3f2:	c9 01       	movw	r24, r18
 3f4:	08 95       	ret

000003f6 <ADCinit>:



int ADCinit(void)
{
	ADMUX=0;
 3f6:	17 b8       	out	0x07, r1	; 7
	ADCSRA=0b10000101;
 3f8:	85 e8       	ldi	r24, 0x85	; 133
 3fa:	86 b9       	out	0x06, r24	; 6
	return 0;
}
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret

00000402 <main>:
int main()
{
 402:	af 92       	push	r10
 404:	bf 92       	push	r11
 406:	cf 92       	push	r12
 408:	df 92       	push	r13
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	df 93       	push	r29
 414:	cf 93       	push	r28
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
 41a:	64 97       	sbiw	r28, 0x14	; 20
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
char A[20]= "     ";
 426:	de 01       	movw	r26, r28
 428:	11 96       	adiw	r26, 0x01	; 1
 42a:	ed e6       	ldi	r30, 0x6D	; 109
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	01 90       	ld	r0, Z+
 432:	0d 92       	st	X+, r0
 434:	81 50       	subi	r24, 0x01	; 1
 436:	e1 f7       	brne	.-8      	; 0x430 <main+0x2e>
 438:	fe 01       	movw	r30, r28
 43a:	37 96       	adiw	r30, 0x07	; 7
 43c:	8e e0       	ldi	r24, 0x0E	; 14
 43e:	df 01       	movw	r26, r30
 440:	1d 92       	st	X+, r1
 442:	8a 95       	dec	r24
 444:	e9 f7       	brne	.-6      	; 0x440 <main+0x3e>
int s1,s2;
DDRD=255;
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	81 bb       	out	0x11, r24	; 17



int ADCinit(void)
{
	ADMUX=0;
 44a:	17 b8       	out	0x07, r1	; 7
	ADCSRA=0b10000101;
 44c:	85 e8       	ldi	r24, 0x85	; 133
 44e:	86 b9       	out	0x06, r24	; 6
{
char A[20]= "     ";
int s1,s2;
DDRD=255;
ADCinit();
LCDinit();
 450:	0e 94 06 01 	call	0x20c	; 0x20c <LCDinit>
LCDclr();
 454:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDclr>
#include<stdio.h>
#define ADC_VREF_TYPE 0b00000000

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input){
ADMUX=adc_input|ADC_VREF_TYPE;
 458:	aa 24       	eor	r10, r10
 45a:	a3 94       	inc	r10
{
  s1=read_adc(0);
  s2=read_adc(1);

  if(s1<850&s2<850)  /// change the value according the sensor value
  PORTD=0b10010000;// forward when both sensor are in white surface
 45c:	30 e9       	ldi	r19, 0x90	; 144
 45e:	d3 2e       	mov	r13, r19

  if(s1>850&s2<850)
  PORTD=0b10100000;// right when one sensor in black & one sensor in white surface
 460:	20 ea       	ldi	r18, 0xA0	; 160
 462:	b2 2e       	mov	r11, r18

  if(s1<850&s2>850)
  PORTD=0b01010000;// left when one sensor in white & one sensor in black surface
 464:	90 e5       	ldi	r25, 0x50	; 80
 466:	c9 2e       	mov	r12, r25

  if(s1>850&s2>850)
  PORTD=0b10010000;// forward when both sensor are in black surface

  sprintf(A, "s1=%d s2=%d ", s1,s2);
 468:	8e 01       	movw	r16, r28
 46a:	0f 5f       	subi	r16, 0xFF	; 255
 46c:	1f 4f       	sbci	r17, 0xFF	; 255
 46e:	80 e6       	ldi	r24, 0x60	; 96
 470:	e8 2e       	mov	r14, r24
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	f8 2e       	mov	r15, r24
#include<stdio.h>
#define ADC_VREF_TYPE 0b00000000

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input){
ADMUX=adc_input|ADC_VREF_TYPE;
 476:	17 b8       	out	0x07, r1	; 7
ADCSRA|=0x40;                 // Start the AD conversion
 478:	36 9a       	sbi	0x06, 6	; 6
while ((ADCSRA & 0x10)==0);  // Wait for the AD conversion to complete
 47a:	34 9b       	sbis	0x06, 4	; 6
 47c:	fe cf       	rjmp	.-4      	; 0x47a <__stack+0x1b>
ADCSRA|=0x10;
 47e:	34 9a       	sbi	0x06, 4	; 6
return ADCW;
 480:	44 b1       	in	r20, 0x04	; 4
 482:	55 b1       	in	r21, 0x05	; 5
#include<stdio.h>
#define ADC_VREF_TYPE 0b00000000

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input){
ADMUX=adc_input|ADC_VREF_TYPE;
 484:	a7 b8       	out	0x07, r10	; 7
ADCSRA|=0x40;                 // Start the AD conversion
 486:	36 9a       	sbi	0x06, 6	; 6
while ((ADCSRA & 0x10)==0);  // Wait for the AD conversion to complete
 488:	34 9b       	sbis	0x06, 4	; 6
 48a:	fe cf       	rjmp	.-4      	; 0x488 <__stack+0x29>
ADCSRA|=0x10;
 48c:	34 9a       	sbi	0x06, 4	; 6
return ADCW;
 48e:	24 b1       	in	r18, 0x04	; 4
 490:	35 b1       	in	r19, 0x05	; 5
while(1)
{
  s1=read_adc(0);
  s2=read_adc(1);

  if(s1<850&s2<850)  /// change the value according the sensor value
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	b3 e0       	ldi	r27, 0x03	; 3
 496:	42 35       	cpi	r20, 0x52	; 82
 498:	5b 07       	cpc	r21, r27
 49a:	0c f4       	brge	.+2      	; 0x49e <__stack+0x3f>
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	22 35       	cpi	r18, 0x52	; 82
 4a4:	36 07       	cpc	r19, r22
 4a6:	0c f4       	brge	.+2      	; 0x4aa <__stack+0x4b>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	99 23       	and	r25, r25
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	81 11       	cpse	r24, r1
  PORTD=0b10010000;// forward when both sensor are in white surface
 4b0:	d2 ba       	out	0x12, r13	; 18

  if(s1>850&s2<850)
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	73 e0       	ldi	r23, 0x03	; 3
 4b6:	43 35       	cpi	r20, 0x53	; 83
 4b8:	57 07       	cpc	r21, r23
 4ba:	1c f0       	brlt	.+6      	; 0x4c2 <__stack+0x63>
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	81 11       	cpse	r24, r1
  PORTD=0b10100000;// right when one sensor in black & one sensor in white surface
 4c0:	b2 ba       	out	0x12, r11	; 18

  if(s1<850&s2>850)
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	a3 e0       	ldi	r26, 0x03	; 3
 4c6:	23 35       	cpi	r18, 0x53	; 83
 4c8:	3a 07       	cpc	r19, r26
 4ca:	0c f0       	brlt	.+2      	; 0x4ce <__stack+0x6f>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	99 23       	and	r25, r25
 4d0:	11 f0       	breq	.+4      	; 0x4d6 <__stack+0x77>
 4d2:	81 11       	cpse	r24, r1
  PORTD=0b01010000;// left when one sensor in white & one sensor in black surface
 4d4:	c2 ba       	out	0x12, r12	; 18

  if(s1>850&s2>850)
 4d6:	66 23       	and	r22, r22
 4d8:	11 f0       	breq	.+4      	; 0x4de <__stack+0x7f>
 4da:	81 11       	cpse	r24, r1
  PORTD=0b10010000;// forward when both sensor are in black surface
 4dc:	d2 ba       	out	0x12, r13	; 18

  sprintf(A, "s1=%d s2=%d ", s1,s2);
 4de:	6d b7       	in	r22, 0x3d	; 61
 4e0:	7e b7       	in	r23, 0x3e	; 62
 4e2:	68 50       	subi	r22, 0x08	; 8
 4e4:	70 40       	sbci	r23, 0x00	; 0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	7e bf       	out	0x3e, r23	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	6d bf       	out	0x3d, r22	; 61
 4f0:	ed b7       	in	r30, 0x3d	; 61
 4f2:	fe b7       	in	r31, 0x3e	; 62
 4f4:	31 96       	adiw	r30, 0x01	; 1
 4f6:	ad b7       	in	r26, 0x3d	; 61
 4f8:	be b7       	in	r27, 0x3e	; 62
 4fa:	12 96       	adiw	r26, 0x02	; 2
 4fc:	1c 93       	st	X, r17
 4fe:	0e 93       	st	-X, r16
 500:	11 97       	sbiw	r26, 0x01	; 1
 502:	f3 82       	std	Z+3, r15	; 0x03
 504:	e2 82       	std	Z+2, r14	; 0x02
 506:	55 83       	std	Z+5, r21	; 0x05
 508:	44 83       	std	Z+4, r20	; 0x04
 50a:	37 83       	std	Z+7, r19	; 0x07
 50c:	26 83       	std	Z+6, r18	; 0x06
 50e:	0e 94 9b 02 	call	0x536	; 0x536 <sprintf>
  LCDGotoXY(0,0);
 512:	6d b7       	in	r22, 0x3d	; 61
 514:	7e b7       	in	r23, 0x3e	; 62
 516:	68 5f       	subi	r22, 0xF8	; 248
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	7e bf       	out	0x3e, r23	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	6d bf       	out	0x3d, r22	; 61
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	0e 94 bc 00 	call	0x178	; 0x178 <LCDGotoXY>
  LCDstring(A,14);
 52c:	c8 01       	movw	r24, r16
 52e:	6e e0       	ldi	r22, 0x0E	; 14
 530:	0e 94 a7 00 	call	0x14e	; 0x14e <LCDstring>
 534:	a0 cf       	rjmp	.-192    	; 0x476 <__stack+0x17>

00000536 <sprintf>:
 536:	ae e0       	ldi	r26, 0x0E	; 14
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	e1 ea       	ldi	r30, 0xA1	; 161
 53c:	f2 e0       	ldi	r31, 0x02	; 2
 53e:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__prologue_saves__+0x1c>
 542:	0d 89       	ldd	r16, Y+21	; 0x15
 544:	1e 89       	ldd	r17, Y+22	; 0x16
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	8c 83       	std	Y+4, r24	; 0x04
 54a:	1a 83       	std	Y+2, r17	; 0x02
 54c:	09 83       	std	Y+1, r16	; 0x01
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	9f e7       	ldi	r25, 0x7F	; 127
 552:	9e 83       	std	Y+6, r25	; 0x06
 554:	8d 83       	std	Y+5, r24	; 0x05
 556:	9e 01       	movw	r18, r28
 558:	27 5e       	subi	r18, 0xE7	; 231
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	ce 01       	movw	r24, r28
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	6f 89       	ldd	r22, Y+23	; 0x17
 562:	78 8d       	ldd	r23, Y+24	; 0x18
 564:	a9 01       	movw	r20, r18
 566:	0e 94 bf 02 	call	0x57e	; 0x57e <vfprintf>
 56a:	2f 81       	ldd	r18, Y+7	; 0x07
 56c:	38 85       	ldd	r19, Y+8	; 0x08
 56e:	02 0f       	add	r16, r18
 570:	13 1f       	adc	r17, r19
 572:	f8 01       	movw	r30, r16
 574:	10 82       	st	Z, r1
 576:	2e 96       	adiw	r28, 0x0e	; 14
 578:	e4 e0       	ldi	r30, 0x04	; 4
 57a:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__epilogue_restores__+0x1c>

0000057e <vfprintf>:
 57e:	ab e0       	ldi	r26, 0x0B	; 11
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e5 ec       	ldi	r30, 0xC5	; 197
 584:	f2 e0       	ldi	r31, 0x02	; 2
 586:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__prologue_saves__>
 58a:	3c 01       	movw	r6, r24
 58c:	2b 01       	movw	r4, r22
 58e:	5a 01       	movw	r10, r20
 590:	fc 01       	movw	r30, r24
 592:	17 82       	std	Z+7, r1	; 0x07
 594:	16 82       	std	Z+6, r1	; 0x06
 596:	83 81       	ldd	r24, Z+3	; 0x03
 598:	81 fd       	sbrc	r24, 1
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <vfprintf+0x24>
 59c:	6f ef       	ldi	r22, 0xFF	; 255
 59e:	7f ef       	ldi	r23, 0xFF	; 255
 5a0:	c6 c1       	rjmp	.+908    	; 0x92e <vfprintf+0x3b0>
 5a2:	9a e0       	ldi	r25, 0x0A	; 10
 5a4:	89 2e       	mov	r8, r25
 5a6:	1e 01       	movw	r2, r28
 5a8:	08 94       	sec
 5aa:	21 1c       	adc	r2, r1
 5ac:	31 1c       	adc	r3, r1
 5ae:	f3 01       	movw	r30, r6
 5b0:	23 81       	ldd	r18, Z+3	; 0x03
 5b2:	f2 01       	movw	r30, r4
 5b4:	23 fd       	sbrc	r18, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	23 ff       	sbrs	r18, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	2f 01       	movw	r4, r30
 5be:	88 23       	and	r24, r24
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <vfprintf+0x46>
 5c2:	b2 c1       	rjmp	.+868    	; 0x928 <vfprintf+0x3aa>
 5c4:	85 32       	cpi	r24, 0x25	; 37
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <vfprintf+0x58>
 5c8:	23 fd       	sbrc	r18, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	23 ff       	sbrs	r18, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	2f 01       	movw	r4, r30
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <vfprintf+0x62>
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	b3 01       	movw	r22, r6
 5da:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 5de:	e7 cf       	rjmp	.-50     	; 0x5ae <vfprintf+0x30>
 5e0:	98 2f       	mov	r25, r24
 5e2:	ff 24       	eor	r15, r15
 5e4:	ee 24       	eor	r14, r14
 5e6:	99 24       	eor	r9, r9
 5e8:	ff e1       	ldi	r31, 0x1F	; 31
 5ea:	ff 15       	cp	r31, r15
 5ec:	d0 f0       	brcs	.+52     	; 0x622 <vfprintf+0xa4>
 5ee:	9b 32       	cpi	r25, 0x2B	; 43
 5f0:	69 f0       	breq	.+26     	; 0x60c <vfprintf+0x8e>
 5f2:	9c 32       	cpi	r25, 0x2C	; 44
 5f4:	28 f4       	brcc	.+10     	; 0x600 <vfprintf+0x82>
 5f6:	90 32       	cpi	r25, 0x20	; 32
 5f8:	59 f0       	breq	.+22     	; 0x610 <vfprintf+0x92>
 5fa:	93 32       	cpi	r25, 0x23	; 35
 5fc:	91 f4       	brne	.+36     	; 0x622 <vfprintf+0xa4>
 5fe:	0e c0       	rjmp	.+28     	; 0x61c <vfprintf+0x9e>
 600:	9d 32       	cpi	r25, 0x2D	; 45
 602:	49 f0       	breq	.+18     	; 0x616 <vfprintf+0x98>
 604:	90 33       	cpi	r25, 0x30	; 48
 606:	69 f4       	brne	.+26     	; 0x622 <vfprintf+0xa4>
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	24 c0       	rjmp	.+72     	; 0x654 <vfprintf+0xd6>
 60c:	52 e0       	ldi	r21, 0x02	; 2
 60e:	f5 2a       	or	r15, r21
 610:	84 e0       	ldi	r24, 0x04	; 4
 612:	f8 2a       	or	r15, r24
 614:	28 c0       	rjmp	.+80     	; 0x666 <vfprintf+0xe8>
 616:	98 e0       	ldi	r25, 0x08	; 8
 618:	f9 2a       	or	r15, r25
 61a:	25 c0       	rjmp	.+74     	; 0x666 <vfprintf+0xe8>
 61c:	e0 e1       	ldi	r30, 0x10	; 16
 61e:	fe 2a       	or	r15, r30
 620:	22 c0       	rjmp	.+68     	; 0x666 <vfprintf+0xe8>
 622:	f7 fc       	sbrc	r15, 7
 624:	29 c0       	rjmp	.+82     	; 0x678 <vfprintf+0xfa>
 626:	89 2f       	mov	r24, r25
 628:	80 53       	subi	r24, 0x30	; 48
 62a:	8a 30       	cpi	r24, 0x0A	; 10
 62c:	70 f4       	brcc	.+28     	; 0x64a <vfprintf+0xcc>
 62e:	f6 fe       	sbrs	r15, 6
 630:	05 c0       	rjmp	.+10     	; 0x63c <vfprintf+0xbe>
 632:	98 9c       	mul	r9, r8
 634:	90 2c       	mov	r9, r0
 636:	11 24       	eor	r1, r1
 638:	98 0e       	add	r9, r24
 63a:	15 c0       	rjmp	.+42     	; 0x666 <vfprintf+0xe8>
 63c:	e8 9c       	mul	r14, r8
 63e:	e0 2c       	mov	r14, r0
 640:	11 24       	eor	r1, r1
 642:	e8 0e       	add	r14, r24
 644:	f0 e2       	ldi	r31, 0x20	; 32
 646:	ff 2a       	or	r15, r31
 648:	0e c0       	rjmp	.+28     	; 0x666 <vfprintf+0xe8>
 64a:	9e 32       	cpi	r25, 0x2E	; 46
 64c:	29 f4       	brne	.+10     	; 0x658 <vfprintf+0xda>
 64e:	f6 fc       	sbrc	r15, 6
 650:	6b c1       	rjmp	.+726    	; 0x928 <vfprintf+0x3aa>
 652:	40 e4       	ldi	r20, 0x40	; 64
 654:	f4 2a       	or	r15, r20
 656:	07 c0       	rjmp	.+14     	; 0x666 <vfprintf+0xe8>
 658:	9c 36       	cpi	r25, 0x6C	; 108
 65a:	19 f4       	brne	.+6      	; 0x662 <vfprintf+0xe4>
 65c:	50 e8       	ldi	r21, 0x80	; 128
 65e:	f5 2a       	or	r15, r21
 660:	02 c0       	rjmp	.+4      	; 0x666 <vfprintf+0xe8>
 662:	98 36       	cpi	r25, 0x68	; 104
 664:	49 f4       	brne	.+18     	; 0x678 <vfprintf+0xfa>
 666:	f2 01       	movw	r30, r4
 668:	23 fd       	sbrc	r18, 3
 66a:	95 91       	lpm	r25, Z+
 66c:	23 ff       	sbrs	r18, 3
 66e:	91 91       	ld	r25, Z+
 670:	2f 01       	movw	r4, r30
 672:	99 23       	and	r25, r25
 674:	09 f0       	breq	.+2      	; 0x678 <vfprintf+0xfa>
 676:	b8 cf       	rjmp	.-144    	; 0x5e8 <vfprintf+0x6a>
 678:	89 2f       	mov	r24, r25
 67a:	85 54       	subi	r24, 0x45	; 69
 67c:	83 30       	cpi	r24, 0x03	; 3
 67e:	18 f0       	brcs	.+6      	; 0x686 <vfprintf+0x108>
 680:	80 52       	subi	r24, 0x20	; 32
 682:	83 30       	cpi	r24, 0x03	; 3
 684:	38 f4       	brcc	.+14     	; 0x694 <vfprintf+0x116>
 686:	44 e0       	ldi	r20, 0x04	; 4
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	a4 0e       	add	r10, r20
 68c:	b5 1e       	adc	r11, r21
 68e:	5f e3       	ldi	r21, 0x3F	; 63
 690:	59 83       	std	Y+1, r21	; 0x01
 692:	0f c0       	rjmp	.+30     	; 0x6b2 <vfprintf+0x134>
 694:	93 36       	cpi	r25, 0x63	; 99
 696:	31 f0       	breq	.+12     	; 0x6a4 <vfprintf+0x126>
 698:	93 37       	cpi	r25, 0x73	; 115
 69a:	79 f0       	breq	.+30     	; 0x6ba <vfprintf+0x13c>
 69c:	93 35       	cpi	r25, 0x53	; 83
 69e:	09 f0       	breq	.+2      	; 0x6a2 <vfprintf+0x124>
 6a0:	56 c0       	rjmp	.+172    	; 0x74e <vfprintf+0x1d0>
 6a2:	20 c0       	rjmp	.+64     	; 0x6e4 <vfprintf+0x166>
 6a4:	f5 01       	movw	r30, r10
 6a6:	80 81       	ld	r24, Z
 6a8:	89 83       	std	Y+1, r24	; 0x01
 6aa:	42 e0       	ldi	r20, 0x02	; 2
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	a4 0e       	add	r10, r20
 6b0:	b5 1e       	adc	r11, r21
 6b2:	61 01       	movw	r12, r2
 6b4:	01 e0       	ldi	r16, 0x01	; 1
 6b6:	10 e0       	ldi	r17, 0x00	; 0
 6b8:	12 c0       	rjmp	.+36     	; 0x6de <vfprintf+0x160>
 6ba:	f5 01       	movw	r30, r10
 6bc:	c0 80       	ld	r12, Z
 6be:	d1 80       	ldd	r13, Z+1	; 0x01
 6c0:	f6 fc       	sbrc	r15, 6
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <vfprintf+0x14c>
 6c4:	6f ef       	ldi	r22, 0xFF	; 255
 6c6:	7f ef       	ldi	r23, 0xFF	; 255
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <vfprintf+0x150>
 6ca:	69 2d       	mov	r22, r9
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	42 e0       	ldi	r20, 0x02	; 2
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	a4 0e       	add	r10, r20
 6d4:	b5 1e       	adc	r11, r21
 6d6:	c6 01       	movw	r24, r12
 6d8:	0e 94 a7 04 	call	0x94e	; 0x94e <strnlen>
 6dc:	8c 01       	movw	r16, r24
 6de:	5f e7       	ldi	r21, 0x7F	; 127
 6e0:	f5 22       	and	r15, r21
 6e2:	14 c0       	rjmp	.+40     	; 0x70c <vfprintf+0x18e>
 6e4:	f5 01       	movw	r30, r10
 6e6:	c0 80       	ld	r12, Z
 6e8:	d1 80       	ldd	r13, Z+1	; 0x01
 6ea:	f6 fc       	sbrc	r15, 6
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <vfprintf+0x176>
 6ee:	6f ef       	ldi	r22, 0xFF	; 255
 6f0:	7f ef       	ldi	r23, 0xFF	; 255
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0x17a>
 6f4:	69 2d       	mov	r22, r9
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	42 e0       	ldi	r20, 0x02	; 2
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	a4 0e       	add	r10, r20
 6fe:	b5 1e       	adc	r11, r21
 700:	c6 01       	movw	r24, r12
 702:	0e 94 9c 04 	call	0x938	; 0x938 <strnlen_P>
 706:	8c 01       	movw	r16, r24
 708:	50 e8       	ldi	r21, 0x80	; 128
 70a:	f5 2a       	or	r15, r21
 70c:	f3 fe       	sbrs	r15, 3
 70e:	07 c0       	rjmp	.+14     	; 0x71e <vfprintf+0x1a0>
 710:	1a c0       	rjmp	.+52     	; 0x746 <vfprintf+0x1c8>
 712:	80 e2       	ldi	r24, 0x20	; 32
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	b3 01       	movw	r22, r6
 718:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 71c:	ea 94       	dec	r14
 71e:	8e 2d       	mov	r24, r14
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	08 17       	cp	r16, r24
 724:	19 07       	cpc	r17, r25
 726:	a8 f3       	brcs	.-22     	; 0x712 <vfprintf+0x194>
 728:	0e c0       	rjmp	.+28     	; 0x746 <vfprintf+0x1c8>
 72a:	f6 01       	movw	r30, r12
 72c:	f7 fc       	sbrc	r15, 7
 72e:	85 91       	lpm	r24, Z+
 730:	f7 fe       	sbrs	r15, 7
 732:	81 91       	ld	r24, Z+
 734:	6f 01       	movw	r12, r30
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b3 01       	movw	r22, r6
 73a:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 73e:	e1 10       	cpse	r14, r1
 740:	ea 94       	dec	r14
 742:	01 50       	subi	r16, 0x01	; 1
 744:	10 40       	sbci	r17, 0x00	; 0
 746:	01 15       	cp	r16, r1
 748:	11 05       	cpc	r17, r1
 74a:	79 f7       	brne	.-34     	; 0x72a <vfprintf+0x1ac>
 74c:	ea c0       	rjmp	.+468    	; 0x922 <vfprintf+0x3a4>
 74e:	94 36       	cpi	r25, 0x64	; 100
 750:	11 f0       	breq	.+4      	; 0x756 <vfprintf+0x1d8>
 752:	99 36       	cpi	r25, 0x69	; 105
 754:	69 f5       	brne	.+90     	; 0x7b0 <vfprintf+0x232>
 756:	f7 fe       	sbrs	r15, 7
 758:	08 c0       	rjmp	.+16     	; 0x76a <vfprintf+0x1ec>
 75a:	f5 01       	movw	r30, r10
 75c:	20 81       	ld	r18, Z
 75e:	31 81       	ldd	r19, Z+1	; 0x01
 760:	42 81       	ldd	r20, Z+2	; 0x02
 762:	53 81       	ldd	r21, Z+3	; 0x03
 764:	84 e0       	ldi	r24, 0x04	; 4
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0a c0       	rjmp	.+20     	; 0x77e <vfprintf+0x200>
 76a:	f5 01       	movw	r30, r10
 76c:	80 81       	ld	r24, Z
 76e:	91 81       	ldd	r25, Z+1	; 0x01
 770:	9c 01       	movw	r18, r24
 772:	44 27       	eor	r20, r20
 774:	37 fd       	sbrc	r19, 7
 776:	40 95       	com	r20
 778:	54 2f       	mov	r21, r20
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	a8 0e       	add	r10, r24
 780:	b9 1e       	adc	r11, r25
 782:	9f e6       	ldi	r25, 0x6F	; 111
 784:	f9 22       	and	r15, r25
 786:	57 ff       	sbrs	r21, 7
 788:	09 c0       	rjmp	.+18     	; 0x79c <vfprintf+0x21e>
 78a:	50 95       	com	r21
 78c:	40 95       	com	r20
 78e:	30 95       	com	r19
 790:	21 95       	neg	r18
 792:	3f 4f       	sbci	r19, 0xFF	; 255
 794:	4f 4f       	sbci	r20, 0xFF	; 255
 796:	5f 4f       	sbci	r21, 0xFF	; 255
 798:	e0 e8       	ldi	r30, 0x80	; 128
 79a:	fe 2a       	or	r15, r30
 79c:	ca 01       	movw	r24, r20
 79e:	b9 01       	movw	r22, r18
 7a0:	a1 01       	movw	r20, r2
 7a2:	2a e0       	ldi	r18, 0x0A	; 10
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	0e 94 de 04 	call	0x9bc	; 0x9bc <__ultoa_invert>
 7aa:	d8 2e       	mov	r13, r24
 7ac:	d2 18       	sub	r13, r2
 7ae:	40 c0       	rjmp	.+128    	; 0x830 <vfprintf+0x2b2>
 7b0:	95 37       	cpi	r25, 0x75	; 117
 7b2:	29 f4       	brne	.+10     	; 0x7be <vfprintf+0x240>
 7b4:	1f 2d       	mov	r17, r15
 7b6:	1f 7e       	andi	r17, 0xEF	; 239
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	1d c0       	rjmp	.+58     	; 0x7f8 <vfprintf+0x27a>
 7be:	1f 2d       	mov	r17, r15
 7c0:	19 7f       	andi	r17, 0xF9	; 249
 7c2:	9f 36       	cpi	r25, 0x6F	; 111
 7c4:	61 f0       	breq	.+24     	; 0x7de <vfprintf+0x260>
 7c6:	90 37       	cpi	r25, 0x70	; 112
 7c8:	20 f4       	brcc	.+8      	; 0x7d2 <vfprintf+0x254>
 7ca:	98 35       	cpi	r25, 0x58	; 88
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <vfprintf+0x252>
 7ce:	ac c0       	rjmp	.+344    	; 0x928 <vfprintf+0x3aa>
 7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <vfprintf+0x272>
 7d2:	90 37       	cpi	r25, 0x70	; 112
 7d4:	39 f0       	breq	.+14     	; 0x7e4 <vfprintf+0x266>
 7d6:	98 37       	cpi	r25, 0x78	; 120
 7d8:	09 f0       	breq	.+2      	; 0x7dc <vfprintf+0x25e>
 7da:	a6 c0       	rjmp	.+332    	; 0x928 <vfprintf+0x3aa>
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <vfprintf+0x268>
 7de:	28 e0       	ldi	r18, 0x08	; 8
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <vfprintf+0x27a>
 7e4:	10 61       	ori	r17, 0x10	; 16
 7e6:	14 fd       	sbrc	r17, 4
 7e8:	14 60       	ori	r17, 0x04	; 4
 7ea:	20 e1       	ldi	r18, 0x10	; 16
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <vfprintf+0x27a>
 7f0:	14 fd       	sbrc	r17, 4
 7f2:	16 60       	ori	r17, 0x06	; 6
 7f4:	20 e1       	ldi	r18, 0x10	; 16
 7f6:	32 e0       	ldi	r19, 0x02	; 2
 7f8:	17 ff       	sbrs	r17, 7
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <vfprintf+0x28e>
 7fc:	f5 01       	movw	r30, r10
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	44 e0       	ldi	r20, 0x04	; 4
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	08 c0       	rjmp	.+16     	; 0x81c <vfprintf+0x29e>
 80c:	f5 01       	movw	r30, r10
 80e:	80 81       	ld	r24, Z
 810:	91 81       	ldd	r25, Z+1	; 0x01
 812:	bc 01       	movw	r22, r24
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	42 e0       	ldi	r20, 0x02	; 2
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	a4 0e       	add	r10, r20
 81e:	b5 1e       	adc	r11, r21
 820:	a1 01       	movw	r20, r2
 822:	0e 94 de 04 	call	0x9bc	; 0x9bc <__ultoa_invert>
 826:	d8 2e       	mov	r13, r24
 828:	d2 18       	sub	r13, r2
 82a:	8f e7       	ldi	r24, 0x7F	; 127
 82c:	f8 2e       	mov	r15, r24
 82e:	f1 22       	and	r15, r17
 830:	f6 fe       	sbrs	r15, 6
 832:	0b c0       	rjmp	.+22     	; 0x84a <vfprintf+0x2cc>
 834:	5e ef       	ldi	r21, 0xFE	; 254
 836:	f5 22       	and	r15, r21
 838:	d9 14       	cp	r13, r9
 83a:	38 f4       	brcc	.+14     	; 0x84a <vfprintf+0x2cc>
 83c:	f4 fe       	sbrs	r15, 4
 83e:	07 c0       	rjmp	.+14     	; 0x84e <vfprintf+0x2d0>
 840:	f2 fc       	sbrc	r15, 2
 842:	05 c0       	rjmp	.+10     	; 0x84e <vfprintf+0x2d0>
 844:	8f ee       	ldi	r24, 0xEF	; 239
 846:	f8 22       	and	r15, r24
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x2d0>
 84a:	1d 2d       	mov	r17, r13
 84c:	01 c0       	rjmp	.+2      	; 0x850 <vfprintf+0x2d2>
 84e:	19 2d       	mov	r17, r9
 850:	f4 fe       	sbrs	r15, 4
 852:	0d c0       	rjmp	.+26     	; 0x86e <vfprintf+0x2f0>
 854:	fe 01       	movw	r30, r28
 856:	ed 0d       	add	r30, r13
 858:	f1 1d       	adc	r31, r1
 85a:	80 81       	ld	r24, Z
 85c:	80 33       	cpi	r24, 0x30	; 48
 85e:	19 f4       	brne	.+6      	; 0x866 <vfprintf+0x2e8>
 860:	99 ee       	ldi	r25, 0xE9	; 233
 862:	f9 22       	and	r15, r25
 864:	08 c0       	rjmp	.+16     	; 0x876 <vfprintf+0x2f8>
 866:	1f 5f       	subi	r17, 0xFF	; 255
 868:	f2 fe       	sbrs	r15, 2
 86a:	05 c0       	rjmp	.+10     	; 0x876 <vfprintf+0x2f8>
 86c:	03 c0       	rjmp	.+6      	; 0x874 <vfprintf+0x2f6>
 86e:	8f 2d       	mov	r24, r15
 870:	86 78       	andi	r24, 0x86	; 134
 872:	09 f0       	breq	.+2      	; 0x876 <vfprintf+0x2f8>
 874:	1f 5f       	subi	r17, 0xFF	; 255
 876:	0f 2d       	mov	r16, r15
 878:	f3 fc       	sbrc	r15, 3
 87a:	14 c0       	rjmp	.+40     	; 0x8a4 <vfprintf+0x326>
 87c:	f0 fe       	sbrs	r15, 0
 87e:	0f c0       	rjmp	.+30     	; 0x89e <vfprintf+0x320>
 880:	1e 15       	cp	r17, r14
 882:	10 f0       	brcs	.+4      	; 0x888 <vfprintf+0x30a>
 884:	9d 2c       	mov	r9, r13
 886:	0b c0       	rjmp	.+22     	; 0x89e <vfprintf+0x320>
 888:	9d 2c       	mov	r9, r13
 88a:	9e 0c       	add	r9, r14
 88c:	91 1a       	sub	r9, r17
 88e:	1e 2d       	mov	r17, r14
 890:	06 c0       	rjmp	.+12     	; 0x89e <vfprintf+0x320>
 892:	80 e2       	ldi	r24, 0x20	; 32
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	b3 01       	movw	r22, r6
 898:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 89c:	1f 5f       	subi	r17, 0xFF	; 255
 89e:	1e 15       	cp	r17, r14
 8a0:	c0 f3       	brcs	.-16     	; 0x892 <vfprintf+0x314>
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <vfprintf+0x32e>
 8a4:	1e 15       	cp	r17, r14
 8a6:	10 f4       	brcc	.+4      	; 0x8ac <vfprintf+0x32e>
 8a8:	e1 1a       	sub	r14, r17
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <vfprintf+0x330>
 8ac:	ee 24       	eor	r14, r14
 8ae:	04 ff       	sbrs	r16, 4
 8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <vfprintf+0x352>
 8b2:	80 e3       	ldi	r24, 0x30	; 48
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	b3 01       	movw	r22, r6
 8b8:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8bc:	02 ff       	sbrs	r16, 2
 8be:	1d c0       	rjmp	.+58     	; 0x8fa <vfprintf+0x37c>
 8c0:	01 fd       	sbrc	r16, 1
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x34c>
 8c4:	88 e7       	ldi	r24, 0x78	; 120
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <vfprintf+0x368>
 8ca:	88 e5       	ldi	r24, 0x58	; 88
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0b c0       	rjmp	.+22     	; 0x8e6 <vfprintf+0x368>
 8d0:	80 2f       	mov	r24, r16
 8d2:	86 78       	andi	r24, 0x86	; 134
 8d4:	91 f0       	breq	.+36     	; 0x8fa <vfprintf+0x37c>
 8d6:	01 ff       	sbrs	r16, 1
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <vfprintf+0x360>
 8da:	8b e2       	ldi	r24, 0x2B	; 43
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <vfprintf+0x362>
 8de:	80 e2       	ldi	r24, 0x20	; 32
 8e0:	f7 fc       	sbrc	r15, 7
 8e2:	8d e2       	ldi	r24, 0x2D	; 45
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	b3 01       	movw	r22, r6
 8e8:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <vfprintf+0x37c>
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	b3 01       	movw	r22, r6
 8f4:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8f8:	9a 94       	dec	r9
 8fa:	d9 14       	cp	r13, r9
 8fc:	c0 f3       	brcs	.-16     	; 0x8ee <vfprintf+0x370>
 8fe:	da 94       	dec	r13
 900:	f1 01       	movw	r30, r2
 902:	ed 0d       	add	r30, r13
 904:	f1 1d       	adc	r31, r1
 906:	80 81       	ld	r24, Z
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	b3 01       	movw	r22, r6
 90c:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 910:	dd 20       	and	r13, r13
 912:	a9 f7       	brne	.-22     	; 0x8fe <vfprintf+0x380>
 914:	06 c0       	rjmp	.+12     	; 0x922 <vfprintf+0x3a4>
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	b3 01       	movw	r22, r6
 91c:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 920:	ea 94       	dec	r14
 922:	ee 20       	and	r14, r14
 924:	c1 f7       	brne	.-16     	; 0x916 <vfprintf+0x398>
 926:	43 ce       	rjmp	.-890    	; 0x5ae <vfprintf+0x30>
 928:	f3 01       	movw	r30, r6
 92a:	66 81       	ldd	r22, Z+6	; 0x06
 92c:	77 81       	ldd	r23, Z+7	; 0x07
 92e:	cb 01       	movw	r24, r22
 930:	2b 96       	adiw	r28, 0x0b	; 11
 932:	e2 e1       	ldi	r30, 0x12	; 18
 934:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__epilogue_restores__>

00000938 <strnlen_P>:
 938:	fc 01       	movw	r30, r24
 93a:	05 90       	lpm	r0, Z+
 93c:	61 50       	subi	r22, 0x01	; 1
 93e:	70 40       	sbci	r23, 0x00	; 0
 940:	01 10       	cpse	r0, r1
 942:	d8 f7       	brcc	.-10     	; 0x93a <strnlen_P+0x2>
 944:	80 95       	com	r24
 946:	90 95       	com	r25
 948:	8e 0f       	add	r24, r30
 94a:	9f 1f       	adc	r25, r31
 94c:	08 95       	ret

0000094e <strnlen>:
 94e:	fc 01       	movw	r30, r24
 950:	61 50       	subi	r22, 0x01	; 1
 952:	70 40       	sbci	r23, 0x00	; 0
 954:	01 90       	ld	r0, Z+
 956:	01 10       	cpse	r0, r1
 958:	d8 f7       	brcc	.-10     	; 0x950 <strnlen+0x2>
 95a:	80 95       	com	r24
 95c:	90 95       	com	r25
 95e:	8e 0f       	add	r24, r30
 960:	9f 1f       	adc	r25, r31
 962:	08 95       	ret

00000964 <fputc>:
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	8c 01       	movw	r16, r24
 96e:	eb 01       	movw	r28, r22
 970:	8b 81       	ldd	r24, Y+3	; 0x03
 972:	81 ff       	sbrs	r24, 1
 974:	1b c0       	rjmp	.+54     	; 0x9ac <fputc+0x48>
 976:	82 ff       	sbrs	r24, 2
 978:	0d c0       	rjmp	.+26     	; 0x994 <fputc+0x30>
 97a:	2e 81       	ldd	r18, Y+6	; 0x06
 97c:	3f 81       	ldd	r19, Y+7	; 0x07
 97e:	8c 81       	ldd	r24, Y+4	; 0x04
 980:	9d 81       	ldd	r25, Y+5	; 0x05
 982:	28 17       	cp	r18, r24
 984:	39 07       	cpc	r19, r25
 986:	64 f4       	brge	.+24     	; 0x9a0 <fputc+0x3c>
 988:	e8 81       	ld	r30, Y
 98a:	f9 81       	ldd	r31, Y+1	; 0x01
 98c:	01 93       	st	Z+, r16
 98e:	f9 83       	std	Y+1, r31	; 0x01
 990:	e8 83       	st	Y, r30
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <fputc+0x3c>
 994:	e8 85       	ldd	r30, Y+8	; 0x08
 996:	f9 85       	ldd	r31, Y+9	; 0x09
 998:	80 2f       	mov	r24, r16
 99a:	09 95       	icall
 99c:	89 2b       	or	r24, r25
 99e:	31 f4       	brne	.+12     	; 0x9ac <fputc+0x48>
 9a0:	8e 81       	ldd	r24, Y+6	; 0x06
 9a2:	9f 81       	ldd	r25, Y+7	; 0x07
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	9f 83       	std	Y+7, r25	; 0x07
 9a8:	8e 83       	std	Y+6, r24	; 0x06
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <fputc+0x4c>
 9ac:	0f ef       	ldi	r16, 0xFF	; 255
 9ae:	1f ef       	ldi	r17, 0xFF	; 255
 9b0:	c8 01       	movw	r24, r16
 9b2:	df 91       	pop	r29
 9b4:	cf 91       	pop	r28
 9b6:	1f 91       	pop	r17
 9b8:	0f 91       	pop	r16
 9ba:	08 95       	ret

000009bc <__ultoa_invert>:
 9bc:	fa 01       	movw	r30, r20
 9be:	aa 27       	eor	r26, r26
 9c0:	28 30       	cpi	r18, 0x08	; 8
 9c2:	51 f1       	breq	.+84     	; 0xa18 <__ultoa_invert+0x5c>
 9c4:	20 31       	cpi	r18, 0x10	; 16
 9c6:	81 f1       	breq	.+96     	; 0xa28 <__ultoa_invert+0x6c>
 9c8:	e8 94       	clt
 9ca:	6f 93       	push	r22
 9cc:	6e 7f       	andi	r22, 0xFE	; 254
 9ce:	6e 5f       	subi	r22, 0xFE	; 254
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	af 4f       	sbci	r26, 0xFF	; 255
 9d8:	b1 e0       	ldi	r27, 0x01	; 1
 9da:	3e d0       	rcall	.+124    	; 0xa58 <__ultoa_invert+0x9c>
 9dc:	b4 e0       	ldi	r27, 0x04	; 4
 9de:	3c d0       	rcall	.+120    	; 0xa58 <__ultoa_invert+0x9c>
 9e0:	67 0f       	add	r22, r23
 9e2:	78 1f       	adc	r23, r24
 9e4:	89 1f       	adc	r24, r25
 9e6:	9a 1f       	adc	r25, r26
 9e8:	a1 1d       	adc	r26, r1
 9ea:	68 0f       	add	r22, r24
 9ec:	79 1f       	adc	r23, r25
 9ee:	8a 1f       	adc	r24, r26
 9f0:	91 1d       	adc	r25, r1
 9f2:	a1 1d       	adc	r26, r1
 9f4:	6a 0f       	add	r22, r26
 9f6:	71 1d       	adc	r23, r1
 9f8:	81 1d       	adc	r24, r1
 9fa:	91 1d       	adc	r25, r1
 9fc:	a1 1d       	adc	r26, r1
 9fe:	20 d0       	rcall	.+64     	; 0xa40 <__ultoa_invert+0x84>
 a00:	09 f4       	brne	.+2      	; 0xa04 <__ultoa_invert+0x48>
 a02:	68 94       	set
 a04:	3f 91       	pop	r19
 a06:	2a e0       	ldi	r18, 0x0A	; 10
 a08:	26 9f       	mul	r18, r22
 a0a:	11 24       	eor	r1, r1
 a0c:	30 19       	sub	r19, r0
 a0e:	30 5d       	subi	r19, 0xD0	; 208
 a10:	31 93       	st	Z+, r19
 a12:	de f6       	brtc	.-74     	; 0x9ca <__ultoa_invert+0xe>
 a14:	cf 01       	movw	r24, r30
 a16:	08 95       	ret
 a18:	46 2f       	mov	r20, r22
 a1a:	47 70       	andi	r20, 0x07	; 7
 a1c:	40 5d       	subi	r20, 0xD0	; 208
 a1e:	41 93       	st	Z+, r20
 a20:	b3 e0       	ldi	r27, 0x03	; 3
 a22:	0f d0       	rcall	.+30     	; 0xa42 <__ultoa_invert+0x86>
 a24:	c9 f7       	brne	.-14     	; 0xa18 <__ultoa_invert+0x5c>
 a26:	f6 cf       	rjmp	.-20     	; 0xa14 <__ultoa_invert+0x58>
 a28:	46 2f       	mov	r20, r22
 a2a:	4f 70       	andi	r20, 0x0F	; 15
 a2c:	40 5d       	subi	r20, 0xD0	; 208
 a2e:	4a 33       	cpi	r20, 0x3A	; 58
 a30:	18 f0       	brcs	.+6      	; 0xa38 <__ultoa_invert+0x7c>
 a32:	49 5d       	subi	r20, 0xD9	; 217
 a34:	31 fd       	sbrc	r19, 1
 a36:	40 52       	subi	r20, 0x20	; 32
 a38:	41 93       	st	Z+, r20
 a3a:	02 d0       	rcall	.+4      	; 0xa40 <__ultoa_invert+0x84>
 a3c:	a9 f7       	brne	.-22     	; 0xa28 <__ultoa_invert+0x6c>
 a3e:	ea cf       	rjmp	.-44     	; 0xa14 <__ultoa_invert+0x58>
 a40:	b4 e0       	ldi	r27, 0x04	; 4
 a42:	a6 95       	lsr	r26
 a44:	97 95       	ror	r25
 a46:	87 95       	ror	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	ba 95       	dec	r27
 a4e:	c9 f7       	brne	.-14     	; 0xa42 <__ultoa_invert+0x86>
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	61 05       	cpc	r22, r1
 a54:	71 05       	cpc	r23, r1
 a56:	08 95       	ret
 a58:	9b 01       	movw	r18, r22
 a5a:	ac 01       	movw	r20, r24
 a5c:	0a 2e       	mov	r0, r26
 a5e:	06 94       	lsr	r0
 a60:	57 95       	ror	r21
 a62:	47 95       	ror	r20
 a64:	37 95       	ror	r19
 a66:	27 95       	ror	r18
 a68:	ba 95       	dec	r27
 a6a:	c9 f7       	brne	.-14     	; 0xa5e <__ultoa_invert+0xa2>
 a6c:	62 0f       	add	r22, r18
 a6e:	73 1f       	adc	r23, r19
 a70:	84 1f       	adc	r24, r20
 a72:	95 1f       	adc	r25, r21
 a74:	a0 1d       	adc	r26, r0
 a76:	08 95       	ret

00000a78 <__udivmodhi4>:
 a78:	aa 1b       	sub	r26, r26
 a7a:	bb 1b       	sub	r27, r27
 a7c:	51 e1       	ldi	r21, 0x11	; 17
 a7e:	07 c0       	rjmp	.+14     	; 0xa8e <__udivmodhi4_ep>

00000a80 <__udivmodhi4_loop>:
 a80:	aa 1f       	adc	r26, r26
 a82:	bb 1f       	adc	r27, r27
 a84:	a6 17       	cp	r26, r22
 a86:	b7 07       	cpc	r27, r23
 a88:	10 f0       	brcs	.+4      	; 0xa8e <__udivmodhi4_ep>
 a8a:	a6 1b       	sub	r26, r22
 a8c:	b7 0b       	sbc	r27, r23

00000a8e <__udivmodhi4_ep>:
 a8e:	88 1f       	adc	r24, r24
 a90:	99 1f       	adc	r25, r25
 a92:	5a 95       	dec	r21
 a94:	a9 f7       	brne	.-22     	; 0xa80 <__udivmodhi4_loop>
 a96:	80 95       	com	r24
 a98:	90 95       	com	r25
 a9a:	bc 01       	movw	r22, r24
 a9c:	cd 01       	movw	r24, r26
 a9e:	08 95       	ret

00000aa0 <__divmodhi4>:
 aa0:	97 fb       	bst	r25, 7
 aa2:	09 2e       	mov	r0, r25
 aa4:	07 26       	eor	r0, r23
 aa6:	0a d0       	rcall	.+20     	; 0xabc <__divmodhi4_neg1>
 aa8:	77 fd       	sbrc	r23, 7
 aaa:	04 d0       	rcall	.+8      	; 0xab4 <__divmodhi4_neg2>
 aac:	e5 df       	rcall	.-54     	; 0xa78 <__udivmodhi4>
 aae:	06 d0       	rcall	.+12     	; 0xabc <__divmodhi4_neg1>
 ab0:	00 20       	and	r0, r0
 ab2:	1a f4       	brpl	.+6      	; 0xaba <__divmodhi4_exit>

00000ab4 <__divmodhi4_neg2>:
 ab4:	70 95       	com	r23
 ab6:	61 95       	neg	r22
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255

00000aba <__divmodhi4_exit>:
 aba:	08 95       	ret

00000abc <__divmodhi4_neg1>:
 abc:	f6 f7       	brtc	.-4      	; 0xaba <__divmodhi4_exit>
 abe:	90 95       	com	r25
 ac0:	81 95       	neg	r24
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	08 95       	ret

00000ac6 <__prologue_saves__>:
 ac6:	2f 92       	push	r2
 ac8:	3f 92       	push	r3
 aca:	4f 92       	push	r4
 acc:	5f 92       	push	r5
 ace:	6f 92       	push	r6
 ad0:	7f 92       	push	r7
 ad2:	8f 92       	push	r8
 ad4:	9f 92       	push	r9
 ad6:	af 92       	push	r10
 ad8:	bf 92       	push	r11
 ada:	cf 92       	push	r12
 adc:	df 92       	push	r13
 ade:	ef 92       	push	r14
 ae0:	ff 92       	push	r15
 ae2:	0f 93       	push	r16
 ae4:	1f 93       	push	r17
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
 aea:	cd b7       	in	r28, 0x3d	; 61
 aec:	de b7       	in	r29, 0x3e	; 62
 aee:	ca 1b       	sub	r28, r26
 af0:	db 0b       	sbc	r29, r27
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	f8 94       	cli
 af6:	de bf       	out	0x3e, r29	; 62
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	cd bf       	out	0x3d, r28	; 61
 afc:	09 94       	ijmp

00000afe <__epilogue_restores__>:
 afe:	2a 88       	ldd	r2, Y+18	; 0x12
 b00:	39 88       	ldd	r3, Y+17	; 0x11
 b02:	48 88       	ldd	r4, Y+16	; 0x10
 b04:	5f 84       	ldd	r5, Y+15	; 0x0f
 b06:	6e 84       	ldd	r6, Y+14	; 0x0e
 b08:	7d 84       	ldd	r7, Y+13	; 0x0d
 b0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b10:	b9 84       	ldd	r11, Y+9	; 0x09
 b12:	c8 84       	ldd	r12, Y+8	; 0x08
 b14:	df 80       	ldd	r13, Y+7	; 0x07
 b16:	ee 80       	ldd	r14, Y+6	; 0x06
 b18:	fd 80       	ldd	r15, Y+5	; 0x05
 b1a:	0c 81       	ldd	r16, Y+4	; 0x04
 b1c:	1b 81       	ldd	r17, Y+3	; 0x03
 b1e:	aa 81       	ldd	r26, Y+2	; 0x02
 b20:	b9 81       	ldd	r27, Y+1	; 0x01
 b22:	ce 0f       	add	r28, r30
 b24:	d1 1d       	adc	r29, r1
 b26:	0f b6       	in	r0, 0x3f	; 63
 b28:	f8 94       	cli
 b2a:	de bf       	out	0x3e, r29	; 62
 b2c:	0f be       	out	0x3f, r0	; 63
 b2e:	cd bf       	out	0x3d, r28	; 61
 b30:	ed 01       	movw	r28, r26
 b32:	08 95       	ret

00000b34 <_exit>:
 b34:	f8 94       	cli

00000b36 <__stop_program>:
 b36:	ff cf       	rjmp	.-2      	; 0xb36 <__stop_program>
