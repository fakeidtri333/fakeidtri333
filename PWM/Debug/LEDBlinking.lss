
LEDBlinking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000e0e  00000e82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ca4  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ee0  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ee e0       	ldi	r30, 0x0E	; 14
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	a4 36       	cpi	r26, 0x64	; 100
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  ba:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:
#include<util/delay.h>
#include<avr/interrupt.h>


void main()
{
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	60 97       	sbiw	r28, 0x10	; 16
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xff;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	81 bb       	out	0x11, r24	; 17
	char buff[16];
	LCDinit();
  e6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCDinit>
	LCDclr();
  ea:	0e 94 0c 01 	call	0x218	; 0x218 <LCDclr>
	set_timer1_prescalar(1);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 c2 03 	call	0x784	; 0x784 <set_timer1_prescalar>
	OCR1A=255;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	9b bd       	out	0x2b, r25	; 43
  fc:	8a bd       	out	0x2a, r24	; 42
	set_timer1_PWMa(2);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 8e 03 	call	0x71c	; 0x71c <set_timer1_PWMa>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	94 e6       	ldi	r25, 0x64	; 100
 108:	c9 2e       	mov	r12, r25
 10a:	d1 2c       	mov	r13, r1
	{
		OCR1A++;
		_delay_ms(100);
		if(OCR1A>254)
			OCR1A=0;
		sprintf(buff,"%3d",OCR1A);
 10c:	8e 01       	movw	r16, r28
 10e:	0f 5f       	subi	r16, 0xFF	; 255
 110:	1f 4f       	sbci	r17, 0xFF	; 255
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	e8 2e       	mov	r14, r24
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	f8 2e       	mov	r15, r24
	set_timer1_prescalar(1);
	OCR1A=255;
	set_timer1_PWMa(2);
	while(1)
	{
		OCR1A++;
 11a:	8a b5       	in	r24, 0x2a	; 42
 11c:	9b b5       	in	r25, 0x2b	; 43
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	9b bd       	out	0x2b, r25	; 43
 122:	8a bd       	out	0x2a, r24	; 42
 124:	88 ee       	ldi	r24, 0xE8	; 232
 126:	93 e0       	ldi	r25, 0x03	; 3
 128:	f6 01       	movw	r30, r12
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x68>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x66>
		_delay_ms(100);
		if(OCR1A>254)
 132:	8a b5       	in	r24, 0x2a	; 42
 134:	9b b5       	in	r25, 0x2b	; 43
 136:	8f 3f       	cpi	r24, 0xFF	; 255
 138:	91 05       	cpc	r25, r1
 13a:	10 f0       	brcs	.+4      	; 0x140 <main+0x7e>
			OCR1A=0;
 13c:	1b bc       	out	0x2b, r1	; 43
 13e:	1a bc       	out	0x2a, r1	; 42
		sprintf(buff,"%3d",OCR1A);
 140:	8a b5       	in	r24, 0x2a	; 42
 142:	9b b5       	in	r25, 0x2b	; 43
 144:	00 d0       	rcall	.+0      	; 0x146 <main+0x84>
 146:	00 d0       	rcall	.+0      	; 0x148 <main+0x86>
 148:	00 d0       	rcall	.+0      	; 0x14a <main+0x88>
 14a:	ed b7       	in	r30, 0x3d	; 61
 14c:	fe b7       	in	r31, 0x3e	; 62
 14e:	31 96       	adiw	r30, 0x01	; 1
 150:	ad b7       	in	r26, 0x3d	; 61
 152:	be b7       	in	r27, 0x3e	; 62
 154:	12 96       	adiw	r26, 0x02	; 2
 156:	1c 93       	st	X, r17
 158:	0e 93       	st	-X, r16
 15a:	11 97       	sbiw	r26, 0x01	; 1
 15c:	f3 82       	std	Z+3, r15	; 0x03
 15e:	e2 82       	std	Z+2, r14	; 0x02
 160:	95 83       	std	Z+5, r25	; 0x05
 162:	84 83       	std	Z+4, r24	; 0x04
 164:	0e 94 2d 04 	call	0x85a	; 0x85a <sprintf>
		LCDGotoXY(0,1);
 168:	8d b7       	in	r24, 0x3d	; 61
 16a:	9e b7       	in	r25, 0x3e	; 62
 16c:	06 96       	adiw	r24, 0x06	; 6
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	9e bf       	out	0x3e, r25	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	8d bf       	out	0x3d, r24	; 61
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	0e 94 29 01 	call	0x252	; 0x252 <LCDGotoXY>
		LCDstring(buff,strlen(buff));
 184:	f8 01       	movw	r30, r16
 186:	01 90       	ld	r0, Z+
 188:	00 20       	and	r0, r0
 18a:	e9 f7       	brne	.-6      	; 0x186 <main+0xc4>
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	e0 1b       	sub	r30, r16
 190:	f1 0b       	sbc	r31, r17
 192:	c8 01       	movw	r24, r16
 194:	bf 01       	movw	r22, r30
 196:	0e 94 14 01 	call	0x228	; 0x228 <LCDstring>
 19a:	bf cf       	rjmp	.-130    	; 0x11a <main+0x58>

0000019c <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 19c:	28 2f       	mov	r18, r24
 19e:	20 7f       	andi	r18, 0xF0	; 240
 1a0:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
 1a2:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 1a4:	aa 9a       	sbi	0x15, 2	; 21
 1a6:	28 ee       	ldi	r18, 0xE8	; 232
 1a8:	33 e0       	ldi	r19, 0x03	; 3
 1aa:	f9 01       	movw	r30, r18
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1b0:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 1b2:	a8 98       	cbi	0x15, 0	; 21
 1b4:	f9 01       	movw	r30, r18
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	44 e0       	ldi	r20, 0x04	; 4
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	4a 95       	dec	r20
 1c4:	e1 f7       	brne	.-8      	; 0x1be <LCDsendChar+0x22>
 1c6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 1c8:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 1ca:	aa 9a       	sbi	0x15, 2	; 21
 1cc:	c9 01       	movw	r24, r18
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1d2:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 1d4:	a8 98       	cbi	0x15, 0	; 21
 1d6:	c9 01       	movw	r24, r18
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 1dc:	08 95       	ret

000001de <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 1de:	28 2f       	mov	r18, r24
 1e0:	20 7f       	andi	r18, 0xF0	; 240
 1e2:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 1e4:	aa 9a       	sbi	0x15, 2	; 21
 1e6:	28 ee       	ldi	r18, 0xE8	; 232
 1e8:	33 e0       	ldi	r19, 0x03	; 3
 1ea:	f9 01       	movw	r30, r18
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1f0:	aa 98       	cbi	0x15, 2	; 21
 1f2:	f9 01       	movw	r30, r18
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	54 e0       	ldi	r21, 0x04	; 4
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	5a 95       	dec	r21
 202:	e1 f7       	brne	.-8      	; 0x1fc <LCDsendCommand+0x1e>
 204:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 206:	aa 9a       	sbi	0x15, 2	; 21
 208:	c9 01       	movw	r24, r18
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 20e:	aa 98       	cbi	0x15, 2	; 21
 210:	c9 01       	movw	r24, r18
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 216:	08 95       	ret

00000218 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
}
 21e:	08 95       	ret

00000220 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
}
 226:	08 95       	ret

00000228 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	49 f0       	breq	.+18     	; 0x248 <LCDstring+0x20>
 236:	ec 01       	movw	r28, r24
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	04 c0       	rjmp	.+8      	; 0x244 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 23c:	89 91       	ld	r24, Y+
 23e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 242:	1f 5f       	subi	r17, 0xFF	; 255
 244:	10 17       	cp	r17, r16
 246:	d0 f3       	brcs	.-12     	; 0x23c <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 252:	62 30       	cpi	r22, 0x02	; 2
 254:	31 f0       	breq	.+12     	; 0x262 <LCDGotoXY+0x10>
 256:	63 30       	cpi	r22, 0x03	; 3
 258:	31 f0       	breq	.+12     	; 0x266 <LCDGotoXY+0x14>
 25a:	61 30       	cpi	r22, 0x01	; 1
 25c:	29 f4       	brne	.+10     	; 0x268 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 25e:	80 5c       	subi	r24, 0xC0	; 192
 260:	03 c0       	rjmp	.+6      	; 0x268 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 262:	8c 5e       	subi	r24, 0xEC	; 236
 264:	01 c0       	rjmp	.+2      	; 0x268 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 266:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
	
}
 26e:	08 95       	ret

00000270 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
 278:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 27a:	64 2f       	mov	r22, r20
 27c:	0e 94 29 01 	call	0x252	; 0x252 <LCDGotoXY>
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	03 c0       	rjmp	.+6      	; 0x28a <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 284:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 288:	1f 5f       	subi	r17, 0xFF	; 255
 28a:	fe 01       	movw	r30, r28
 28c:	e1 0f       	add	r30, r17
 28e:	f1 1d       	adc	r31, r1
 290:	84 91       	lpm	r24, Z+
 292:	88 23       	and	r24, r24
 294:	b9 f7       	brne	.-18     	; 0x284 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	08 95       	ret

0000029e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	7c 01       	movw	r14, r24
 2ac:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 2ae:	11 0f       	add	r17, r17
 2b0:	11 0f       	add	r17, r17
 2b2:	11 0f       	add	r17, r17
 2b4:	10 64       	ori	r17, 0x40	; 64
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 2ba:	f7 01       	movw	r30, r14
 2bc:	ec 0f       	add	r30, r28
 2be:	fd 1f       	adc	r31, r29
 2c0:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 2c2:	81 2f       	mov	r24, r17
 2c4:	8c 0f       	add	r24, r28
 2c6:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
		LCDsendChar(pcc);
 2ca:	80 2f       	mov	r24, r16
 2cc:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	c8 30       	cpi	r28, 0x08	; 8
 2d4:	d1 05       	cpc	r29, r1
 2d6:	89 f7       	brne	.-30     	; 0x2ba <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	08 95       	ret

000002e6 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	88 e9       	ldi	r24, 0x98	; 152
 2ee:	9a e3       	ldi	r25, 0x3A	; 58
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2f4:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 2f6:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2f8:	84 b3       	in	r24, 0x14	; 20
 2fa:	80 6f       	ori	r24, 0xF0	; 240
 2fc:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2fe:	84 b3       	in	r24, 0x14	; 20
 300:	87 60       	ori	r24, 0x07	; 7
 302:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 304:	80 e3       	ldi	r24, 0x30	; 48
 306:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 308:	aa 9a       	sbi	0x15, 2	; 21
 30a:	28 ee       	ldi	r18, 0xE8	; 232
 30c:	33 e0       	ldi	r19, 0x03	; 3
 30e:	f9 01       	movw	r30, r18
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 314:	aa 98       	cbi	0x15, 2	; 21
 316:	f9 01       	movw	r30, r18
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 31c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 31e:	aa 9a       	sbi	0x15, 2	; 21
 320:	c9 01       	movw	r24, r18
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 326:	aa 98       	cbi	0x15, 2	; 21
 328:	c9 01       	movw	r24, r18
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 32e:	80 e2       	ldi	r24, 0x20	; 32
 330:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 332:	aa 9a       	sbi	0x15, 2	; 21
 334:	c9 01       	movw	r24, r18
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 33a:	aa 98       	cbi	0x15, 2	; 21
 33c:	c9 01       	movw	r24, r18
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 342:	88 e2       	ldi	r24, 0x28	; 40
 344:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
 34e:	c4 e5       	ldi	r28, 0x54	; 84
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 354:	16 2f       	mov	r17, r22
 356:	1f 5f       	subi	r17, 0xFF	; 255
 358:	ce 01       	movw	r24, r28
 35a:	0e 94 4f 01 	call	0x29e	; 0x29e <LCDdefinechar>
 35e:	28 96       	adiw	r28, 0x08	; 8
 360:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 362:	18 30       	cpi	r17, 0x08	; 8
 364:	b9 f7       	brne	.-18     	; 0x354 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	08 95       	ret

0000036e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 37a:	08 2f       	mov	r16, r24
 37c:	10 e0       	ldi	r17, 0x00	; 0
 37e:	04 c0       	rjmp	.+8      	; 0x388 <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 380:	8e e1       	ldi	r24, 0x1E	; 30
 382:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 386:	21 96       	adiw	r28, 0x01	; 1
 388:	c0 17       	cp	r28, r16
 38a:	d1 07       	cpc	r29, r17
 38c:	cc f3       	brlt	.-14     	; 0x380 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	08 95       	ret

00000398 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	c0 e0       	ldi	r28, 0x00	; 0
 3a2:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 3a4:	08 2f       	mov	r16, r24
 3a6:	10 e0       	ldi	r17, 0x00	; 0
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 3aa:	88 e1       	ldi	r24, 0x18	; 24
 3ac:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	c0 17       	cp	r28, r16
 3b4:	d1 07       	cpc	r29, r17
 3b6:	cc f3       	brlt	.-14     	; 0x3aa <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 3c2:	8e e0       	ldi	r24, 0x0E	; 14
 3c4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
}
 3c8:	08 95       	ret

000003ca <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 3ca:	8f e0       	ldi	r24, 0x0F	; 15
 3cc:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
}
 3d0:	08 95       	ret

000003d2 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 3d2:	8c e0       	ldi	r24, 0x0C	; 12
 3d4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
}
 3d8:	08 95       	ret

000003da <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 3da:	88 e0       	ldi	r24, 0x08	; 8
 3dc:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
}
 3e0:	08 95       	ret

000003e2 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
}
 3e8:	08 95       	ret

000003ea <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 3f6:	08 2f       	mov	r16, r24
 3f8:	10 e0       	ldi	r17, 0x00	; 0
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 3fc:	80 e1       	ldi	r24, 0x10	; 16
 3fe:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 402:	21 96       	adiw	r28, 0x01	; 1
 404:	c0 17       	cp	r28, r16
 406:	d1 07       	cpc	r29, r17
 408:	cc f3       	brlt	.-14     	; 0x3fc <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 420:	08 2f       	mov	r16, r24
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	04 c0       	rjmp	.+8      	; 0x42e <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 426:	84 e1       	ldi	r24, 0x14	; 20
 428:	0e 94 ef 00 	call	0x1de	; 0x1de <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 42c:	21 96       	adiw	r28, 0x01	; 1
 42e:	c0 17       	cp	r28, r16
 430:	d1 07       	cpc	r29, r17
 432:	cc f3       	brlt	.-14     	; 0x426 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 44e:	96 e0       	ldi	r25, 0x06	; 6
 450:	89 9f       	mul	r24, r25
 452:	c0 01       	movw	r24, r0
 454:	11 24       	eor	r1, r1
 456:	24 2f       	mov	r18, r20
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	ac 01       	movw	r20, r24
 45c:	42 9f       	mul	r20, r18
 45e:	c0 01       	movw	r24, r0
 460:	43 9f       	mul	r20, r19
 462:	90 0d       	add	r25, r0
 464:	52 9f       	mul	r21, r18
 466:	90 0d       	add	r25, r0
 468:	11 24       	eor	r1, r1
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	0e 94 1a 04 	call	0x834	; 0x834 <__divmodhi4>
 470:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 472:	cb 01       	movw	r24, r22
 474:	66 e0       	ldi	r22, 0x06	; 6
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	0e 94 06 04 	call	0x80c	; 0x80c <__udivmodhi4>
 47c:	e8 2e       	mov	r14, r24
 47e:	ff 24       	eor	r15, r15
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	12 c0       	rjmp	.+36     	; 0x4aa <__stack+0x4b>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 486:	c8 01       	movw	r24, r16
 488:	05 96       	adiw	r24, 0x05	; 5
 48a:	c8 17       	cp	r28, r24
 48c:	d9 07       	cpc	r29, r25
 48e:	10 f0       	brcs	.+4      	; 0x494 <__stack+0x35>
 490:	85 e0       	ldi	r24, 0x05	; 5
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <__stack+0x41>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 494:	c0 17       	cp	r28, r16
 496:	d1 07       	cpc	r29, r17
 498:	10 f0       	brcs	.+4      	; 0x49e <__stack+0x3f>
 49a:	8e 2d       	mov	r24, r14
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <__stack+0x41>
 49e:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 4a0:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 4a4:	f3 94       	inc	r15
 4a6:	0a 5f       	subi	r16, 0xFA	; 250
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
 4aa:	fd 14       	cp	r15, r13
 4ac:	60 f3       	brcs	.-40     	; 0x486 <__stack+0x27>
		
		// write character to display
		LCDsendChar(c);
	}

}
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	df 90       	pop	r13
 4bc:	08 95       	ret

000004be <set_timer0_normal>:



void set_timer0_normal()
{
	TCCR0&=~(1<<WGM00);
 4be:	83 b7       	in	r24, 0x33	; 51
 4c0:	8f 7b       	andi	r24, 0xBF	; 191
 4c2:	83 bf       	out	0x33, r24	; 51
	TCCR0&=~(1<<WGM01);
 4c4:	83 b7       	in	r24, 0x33	; 51
 4c6:	87 7f       	andi	r24, 0xF7	; 247
 4c8:	83 bf       	out	0x33, r24	; 51
	
}
 4ca:	08 95       	ret

000004cc <set_timer0_ctc>:



void set_timer0_ctc(int i)
{
 4cc:	9c 01       	movw	r18, r24
	TCCR0&=~(1<<WGM00);
 4ce:	83 b7       	in	r24, 0x33	; 51
 4d0:	8f 7b       	andi	r24, 0xBF	; 191
 4d2:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(1<<WGM01);
 4d4:	83 b7       	in	r24, 0x33	; 51
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	83 bf       	out	0x33, r24	; 51
	switch(i)
 4da:	21 30       	cpi	r18, 0x01	; 1
 4dc:	31 05       	cpc	r19, r1
 4de:	81 f0       	breq	.+32     	; 0x500 <set_timer0_ctc+0x34>
 4e0:	22 30       	cpi	r18, 0x02	; 2
 4e2:	31 05       	cpc	r19, r1
 4e4:	1c f4       	brge	.+6      	; 0x4ec <set_timer0_ctc+0x20>
 4e6:	23 2b       	or	r18, r19
 4e8:	41 f0       	breq	.+16     	; 0x4fa <set_timer0_ctc+0x2e>
 4ea:	08 95       	ret
 4ec:	22 30       	cpi	r18, 0x02	; 2
 4ee:	31 05       	cpc	r19, r1
 4f0:	69 f0       	breq	.+26     	; 0x50c <set_timer0_ctc+0x40>
 4f2:	23 30       	cpi	r18, 0x03	; 3
 4f4:	31 05       	cpc	r19, r1
 4f6:	b9 f4       	brne	.+46     	; 0x526 <set_timer0_ctc+0x5a>
 4f8:	10 c0       	rjmp	.+32     	; 0x51a <set_timer0_ctc+0x4e>
	{
		case 0:////OC0 disconnected
				TCCR0&=~(1<<COM00);
 4fa:	83 b7       	in	r24, 0x33	; 51
 4fc:	8f 7e       	andi	r24, 0xEF	; 239
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <set_timer0_ctc+0x38>
				TCCR0&=~(1<<COM01);
				break;
		case 1:////toggle OC0 on compare match
				TCCR0|=(1<<COM00);
 500:	83 b7       	in	r24, 0x33	; 51
 502:	80 61       	ori	r24, 0x10	; 16
 504:	83 bf       	out	0x33, r24	; 51
				TCCR0&=~(1<<COM01);
 506:	83 b7       	in	r24, 0x33	; 51
 508:	8f 7d       	andi	r24, 0xDF	; 223
 50a:	05 c0       	rjmp	.+10     	; 0x516 <set_timer0_ctc+0x4a>
				break;
		case 2:////clear OC0 on compare match
				TCCR0&=~(1<<COM00);
 50c:	83 b7       	in	r24, 0x33	; 51
 50e:	8f 7e       	andi	r24, 0xEF	; 239
 510:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<COM01);
 512:	83 b7       	in	r24, 0x33	; 51
 514:	80 62       	ori	r24, 0x20	; 32
 516:	83 bf       	out	0x33, r24	; 51
 518:	08 95       	ret
				break;
		case 3:////set OC0 on compare match
				TCCR0|=(1<<COM00);
 51a:	83 b7       	in	r24, 0x33	; 51
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<COM01);
 520:	83 b7       	in	r24, 0x33	; 51
 522:	80 62       	ori	r24, 0x20	; 32
 524:	83 bf       	out	0x33, r24	; 51
 526:	08 95       	ret

00000528 <set_timer0_PWM>:
	}
	
}

void set_timer0_PWM(int i)
{
 528:	9c 01       	movw	r18, r24
	TCCR0|=(1<<WGM00);
 52a:	83 b7       	in	r24, 0x33	; 51
 52c:	80 64       	ori	r24, 0x40	; 64
 52e:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(1<<WGM01);
 530:	83 b7       	in	r24, 0x33	; 51
 532:	88 60       	ori	r24, 0x08	; 8
 534:	83 bf       	out	0x33, r24	; 51
	switch(i)
 536:	22 30       	cpi	r18, 0x02	; 2
 538:	31 05       	cpc	r19, r1
 53a:	59 f0       	breq	.+22     	; 0x552 <set_timer0_PWM+0x2a>
 53c:	23 30       	cpi	r18, 0x03	; 3
 53e:	31 05       	cpc	r19, r1
 540:	79 f0       	breq	.+30     	; 0x560 <set_timer0_PWM+0x38>
 542:	23 2b       	or	r18, r19
 544:	99 f4       	brne	.+38     	; 0x56c <set_timer0_PWM+0x44>
	{
		case 0:////OC0 disconnected
				TCCR0&=~(1<<COM00);
 546:	83 b7       	in	r24, 0x33	; 51
 548:	8f 7e       	andi	r24, 0xEF	; 239
 54a:	83 bf       	out	0x33, r24	; 51
				TCCR0&=~(1<<COM01);
 54c:	83 b7       	in	r24, 0x33	; 51
 54e:	8f 7d       	andi	r24, 0xDF	; 223
 550:	05 c0       	rjmp	.+10     	; 0x55c <set_timer0_PWM+0x34>
				break;
		case 1:
				break;
		case 2:////clear OC0 on compare match
				TCCR0&=~(1<<COM00);
 552:	83 b7       	in	r24, 0x33	; 51
 554:	8f 7e       	andi	r24, 0xEF	; 239
 556:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<COM01);
 558:	83 b7       	in	r24, 0x33	; 51
 55a:	80 62       	ori	r24, 0x20	; 32
 55c:	83 bf       	out	0x33, r24	; 51
 55e:	08 95       	ret
				break;
		case 3:////set OC0 on compare match
				TCCR0|=(1<<COM00);
 560:	83 b7       	in	r24, 0x33	; 51
 562:	80 61       	ori	r24, 0x10	; 16
 564:	83 bf       	out	0x33, r24	; 51
				TCCR0|=(1<<COM01);
 566:	83 b7       	in	r24, 0x33	; 51
 568:	80 62       	ori	r24, 0x20	; 32
 56a:	83 bf       	out	0x33, r24	; 51
 56c:	08 95       	ret

0000056e <set_timer0_prescalar>:

}


void set_timer0_prescalar(int i)
{
 56e:	9c 01       	movw	r18, r24
	if(i<8)
 570:	88 30       	cpi	r24, 0x08	; 8
 572:	91 05       	cpc	r25, r1
 574:	34 f4       	brge	.+12     	; 0x582 <set_timer0_prescalar+0x14>
	{
		TCCR0&=0b11111000;
 576:	83 b7       	in	r24, 0x33	; 51
 578:	88 7f       	andi	r24, 0xF8	; 248
 57a:	83 bf       	out	0x33, r24	; 51
		TCCR0|=i;
 57c:	83 b7       	in	r24, 0x33	; 51
 57e:	82 2b       	or	r24, r18
 580:	83 bf       	out	0x33, r24	; 51
 582:	08 95       	ret

00000584 <enable_timer0_overflowint>:



void enable_timer0_overflowint()
{
	TIMSK|=(1<<TOIE0);
 584:	89 b7       	in	r24, 0x39	; 57
 586:	81 60       	ori	r24, 0x01	; 1
 588:	89 bf       	out	0x39, r24	; 57
	//TIFR|=(1<<TOV0);
}
 58a:	08 95       	ret

0000058c <enable_timer0_ctcint>:

void enable_timer0_ctcint()
{
	TIMSK|=(1<<OCIE0);
 58c:	89 b7       	in	r24, 0x39	; 57
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	89 bf       	out	0x39, r24	; 57
	TIFR|=(1<<OCF0);
 592:	88 b7       	in	r24, 0x38	; 56
 594:	82 60       	ori	r24, 0x02	; 2
 596:	88 bf       	out	0x38, r24	; 56
}
 598:	08 95       	ret

0000059a <disable_timer0_overflowint>:

void disable_timer0_overflowint()
{
	TIMSK&=~(1<<TOIE0);
 59a:	89 b7       	in	r24, 0x39	; 57
 59c:	8e 7f       	andi	r24, 0xFE	; 254
 59e:	89 bf       	out	0x39, r24	; 57
	TIFR&=~(1<<TOV0);
 5a0:	88 b7       	in	r24, 0x38	; 56
 5a2:	8e 7f       	andi	r24, 0xFE	; 254
 5a4:	88 bf       	out	0x38, r24	; 56
}
 5a6:	08 95       	ret

000005a8 <disable_timer0_ctcint>:

void disable_timer0_ctcint()
{
	TIMSK&=~(1<<OCIE0);
 5a8:	89 b7       	in	r24, 0x39	; 57
 5aa:	8d 7f       	andi	r24, 0xFD	; 253
 5ac:	89 bf       	out	0x39, r24	; 57
	TIFR&=~(1<<OCF0);
 5ae:	88 b7       	in	r24, 0x38	; 56
 5b0:	8d 7f       	andi	r24, 0xFD	; 253
 5b2:	88 bf       	out	0x38, r24	; 56
}
 5b4:	08 95       	ret

000005b6 <set_timer0value>:

void set_timer0value(int i)
{
	TCNT0=i;
 5b6:	82 bf       	out	0x32, r24	; 50
}
 5b8:	08 95       	ret

000005ba <set_OCR0value>:

void set_OCR0value(int i)
{
	OCR0=i;
 5ba:	8c bf       	out	0x3c, r24	; 60
}
 5bc:	08 95       	ret

000005be <stop_timer0>:

void set_timer0_prescalar(int i)
{
	if(i<8)
	{
		TCCR0&=0b11111000;
 5be:	83 b7       	in	r24, 0x33	; 51
 5c0:	88 7f       	andi	r24, 0xF8	; 248
 5c2:	83 bf       	out	0x33, r24	; 51
		TCCR0|=i;
 5c4:	83 b7       	in	r24, 0x33	; 51
 5c6:	83 bf       	out	0x33, r24	; 51
}

void stop_timer0()
{
	set_timer0_prescalar(0);
}
 5c8:	08 95       	ret

000005ca <set_timer1_normal>:



void set_timer1_normal()
{
	TCCR1A&=~(1<<WGM10);
 5ca:	8f b5       	in	r24, 0x2f	; 47
 5cc:	8e 7f       	andi	r24, 0xFE	; 254
 5ce:	8f bd       	out	0x2f, r24	; 47
	TCCR1A&=~(1<<WGM11);
 5d0:	8f b5       	in	r24, 0x2f	; 47
 5d2:	8d 7f       	andi	r24, 0xFD	; 253
 5d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B&=~(1<<WGM12);
 5d6:	8e b5       	in	r24, 0x2e	; 46
 5d8:	87 7f       	andi	r24, 0xF7	; 247
 5da:	8e bd       	out	0x2e, r24	; 46
	TCCR1B&=~(1<<WGM13);
 5dc:	8e b5       	in	r24, 0x2e	; 46
 5de:	8f 7e       	andi	r24, 0xEF	; 239
 5e0:	8e bd       	out	0x2e, r24	; 46
}
 5e2:	08 95       	ret

000005e4 <set_timer1_ctca>:



void set_timer1_ctca(int i)
{
 5e4:	9c 01       	movw	r18, r24
	TCCR1A&=~(1<<WGM10);
 5e6:	8f b5       	in	r24, 0x2f	; 47
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	8f bd       	out	0x2f, r24	; 47
	TCCR1A&=~(1<<WGM11);
 5ec:	8f b5       	in	r24, 0x2f	; 47
 5ee:	8d 7f       	andi	r24, 0xFD	; 253
 5f0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12);
 5f2:	8e b5       	in	r24, 0x2e	; 46
 5f4:	88 60       	ori	r24, 0x08	; 8
 5f6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B&=~(1<<WGM13);
 5f8:	8e b5       	in	r24, 0x2e	; 46
 5fa:	8f 7e       	andi	r24, 0xEF	; 239
 5fc:	8e bd       	out	0x2e, r24	; 46
	switch(i)
 5fe:	21 30       	cpi	r18, 0x01	; 1
 600:	31 05       	cpc	r19, r1
 602:	81 f0       	breq	.+32     	; 0x624 <set_timer1_ctca+0x40>
 604:	22 30       	cpi	r18, 0x02	; 2
 606:	31 05       	cpc	r19, r1
 608:	1c f4       	brge	.+6      	; 0x610 <set_timer1_ctca+0x2c>
 60a:	23 2b       	or	r18, r19
 60c:	41 f0       	breq	.+16     	; 0x61e <set_timer1_ctca+0x3a>
 60e:	08 95       	ret
 610:	22 30       	cpi	r18, 0x02	; 2
 612:	31 05       	cpc	r19, r1
 614:	69 f0       	breq	.+26     	; 0x630 <set_timer1_ctca+0x4c>
 616:	23 30       	cpi	r18, 0x03	; 3
 618:	31 05       	cpc	r19, r1
 61a:	b9 f4       	brne	.+46     	; 0x64a <set_timer1_ctca+0x66>
 61c:	10 c0       	rjmp	.+32     	; 0x63e <set_timer1_ctca+0x5a>
	{
		case 0:////OC1 disconnected
				TCCR1A&=~(1<<COM1A0);
 61e:	8f b5       	in	r24, 0x2f	; 47
 620:	8f 7b       	andi	r24, 0xBF	; 191
 622:	02 c0       	rjmp	.+4      	; 0x628 <set_timer1_ctca+0x44>
				TCCR1A&=~(1<<COM1A1);
				break;
		case 1:////toggle OC1A on compare match
				TCCR1A|=(1<<COM1A0);
 624:	8f b5       	in	r24, 0x2f	; 47
 626:	80 64       	ori	r24, 0x40	; 64
 628:	8f bd       	out	0x2f, r24	; 47
				TCCR1A&=~(1<<COM1A1);
 62a:	8f b5       	in	r24, 0x2f	; 47
 62c:	8f 77       	andi	r24, 0x7F	; 127
 62e:	05 c0       	rjmp	.+10     	; 0x63a <set_timer1_ctca+0x56>
				break;
		case 2:////clear OC1A on compare match
				TCCR1A&=~(1<<COM1A0);
 630:	8f b5       	in	r24, 0x2f	; 47
 632:	8f 7b       	andi	r24, 0xBF	; 191
 634:	8f bd       	out	0x2f, r24	; 47
				TCCR1A|=(1<<COM1A1);
 636:	8f b5       	in	r24, 0x2f	; 47
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	8f bd       	out	0x2f, r24	; 47
 63c:	08 95       	ret
				break;
		case 3:////set OC1A on compare match
				TCCR1A|=(1<<COM1A0);
 63e:	8f b5       	in	r24, 0x2f	; 47
 640:	80 64       	ori	r24, 0x40	; 64
 642:	8f bd       	out	0x2f, r24	; 47
				TCCR1A|=(1<<COM1A1);
 644:	8f b5       	in	r24, 0x2f	; 47
 646:	80 68       	ori	r24, 0x80	; 128
 648:	8f bd       	out	0x2f, r24	; 47
 64a:	08 95       	ret

0000064c <set_timer1_ctcb>:
	
}


void set_timer1_ctcb(int i)
{
 64c:	9c 01       	movw	r18, r24
	TCCR1A&=~(1<<WGM10);
 64e:	8f b5       	in	r24, 0x2f	; 47
 650:	8e 7f       	andi	r24, 0xFE	; 254
 652:	8f bd       	out	0x2f, r24	; 47
	TCCR1A&=~(1<<WGM11);
 654:	8f b5       	in	r24, 0x2f	; 47
 656:	8d 7f       	andi	r24, 0xFD	; 253
 658:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12);
 65a:	8e b5       	in	r24, 0x2e	; 46
 65c:	88 60       	ori	r24, 0x08	; 8
 65e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B&=~(1<<WGM13);
 660:	8e b5       	in	r24, 0x2e	; 46
 662:	8f 7e       	andi	r24, 0xEF	; 239
 664:	8e bd       	out	0x2e, r24	; 46
	switch(i)
 666:	21 30       	cpi	r18, 0x01	; 1
 668:	31 05       	cpc	r19, r1
 66a:	81 f0       	breq	.+32     	; 0x68c <set_timer1_ctcb+0x40>
 66c:	22 30       	cpi	r18, 0x02	; 2
 66e:	31 05       	cpc	r19, r1
 670:	1c f4       	brge	.+6      	; 0x678 <set_timer1_ctcb+0x2c>
 672:	23 2b       	or	r18, r19
 674:	41 f0       	breq	.+16     	; 0x686 <set_timer1_ctcb+0x3a>
 676:	08 95       	ret
 678:	22 30       	cpi	r18, 0x02	; 2
 67a:	31 05       	cpc	r19, r1
 67c:	69 f0       	breq	.+26     	; 0x698 <set_timer1_ctcb+0x4c>
 67e:	23 30       	cpi	r18, 0x03	; 3
 680:	31 05       	cpc	r19, r1
 682:	b9 f4       	brne	.+46     	; 0x6b2 <set_timer1_ctcb+0x66>
 684:	10 c0       	rjmp	.+32     	; 0x6a6 <set_timer1_ctcb+0x5a>
	{
		case 0:////OC1B disconnected
				TCCR1A&=~(1<<COM1B0);
 686:	8f b5       	in	r24, 0x2f	; 47
 688:	8f 7e       	andi	r24, 0xEF	; 239
 68a:	02 c0       	rjmp	.+4      	; 0x690 <set_timer1_ctcb+0x44>
				TCCR1A&=~(1<<COM1B1);
				break;
		case 1:////toggle OC1B on compare match
				TCCR1A|=(1<<COM1B0);
 68c:	8f b5       	in	r24, 0x2f	; 47
 68e:	80 61       	ori	r24, 0x10	; 16
 690:	8f bd       	out	0x2f, r24	; 47
				TCCR1A&=~(1<<COM1B1);
 692:	8f b5       	in	r24, 0x2f	; 47
 694:	8f 7d       	andi	r24, 0xDF	; 223
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <set_timer1_ctcb+0x56>
				break;
		case 2:////clear OC1B on compare match
				TCCR1A&=~(1<<COM1B0);
 698:	8f b5       	in	r24, 0x2f	; 47
 69a:	8f 7e       	andi	r24, 0xEF	; 239
 69c:	8f bd       	out	0x2f, r24	; 47
				TCCR1A|=(1<<COM1B1);
 69e:	8f b5       	in	r24, 0x2f	; 47
 6a0:	80 62       	ori	r24, 0x20	; 32
 6a2:	8f bd       	out	0x2f, r24	; 47
 6a4:	08 95       	ret
				break;
		case 3:////set OC1B on compare match
				TCCR1A|=(1<<COM1B0);
 6a6:	8f b5       	in	r24, 0x2f	; 47
 6a8:	80 61       	ori	r24, 0x10	; 16
 6aa:	8f bd       	out	0x2f, r24	; 47
				TCCR1A|=(1<<COM1B1);
 6ac:	8f b5       	in	r24, 0x2f	; 47
 6ae:	80 62       	ori	r24, 0x20	; 32
 6b0:	8f bd       	out	0x2f, r24	; 47
 6b2:	08 95       	ret

000006b4 <set_timer1_PWMb>:
	}
	
}

void set_timer1_PWMb(int i)
{
 6b4:	9c 01       	movw	r18, r24
	TCCR1A|=(1<<WGM10);
 6b6:	8f b5       	in	r24, 0x2f	; 47
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	8f bd       	out	0x2f, r24	; 47
			TCCR1A|=(1<<WGM11);
 6bc:	8f b5       	in	r24, 0x2f	; 47
 6be:	82 60       	ori	r24, 0x02	; 2
 6c0:	8f bd       	out	0x2f, r24	; 47
			TCCR1B|=(1<<WGM12);
 6c2:	8e b5       	in	r24, 0x2e	; 46
 6c4:	88 60       	ori	r24, 0x08	; 8
 6c6:	8e bd       	out	0x2e, r24	; 46
			TCCR1B|=(1<<WGM13);
 6c8:	8e b5       	in	r24, 0x2e	; 46
 6ca:	80 61       	ori	r24, 0x10	; 16
 6cc:	8e bd       	out	0x2e, r24	; 46
	switch(i)
 6ce:	21 30       	cpi	r18, 0x01	; 1
 6d0:	31 05       	cpc	r19, r1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <set_timer1_PWMb+0x40>
 6d4:	22 30       	cpi	r18, 0x02	; 2
 6d6:	31 05       	cpc	r19, r1
 6d8:	1c f4       	brge	.+6      	; 0x6e0 <set_timer1_PWMb+0x2c>
 6da:	23 2b       	or	r18, r19
 6dc:	41 f0       	breq	.+16     	; 0x6ee <set_timer1_PWMb+0x3a>
 6de:	08 95       	ret
 6e0:	22 30       	cpi	r18, 0x02	; 2
 6e2:	31 05       	cpc	r19, r1
 6e4:	69 f0       	breq	.+26     	; 0x700 <set_timer1_PWMb+0x4c>
 6e6:	23 30       	cpi	r18, 0x03	; 3
 6e8:	31 05       	cpc	r19, r1
 6ea:	b9 f4       	brne	.+46     	; 0x71a <set_timer1_PWMb+0x66>
 6ec:	10 c0       	rjmp	.+32     	; 0x70e <set_timer1_PWMb+0x5a>
		{
			case 0:////OC1B disconnected
					TCCR1A&=~(1<<COM1B0);
 6ee:	8f b5       	in	r24, 0x2f	; 47
 6f0:	8f 7e       	andi	r24, 0xEF	; 239
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <set_timer1_PWMb+0x44>
					TCCR1A&=~(1<<COM1B1);
					break;
			case 1:////toggle OC1B on compare match
					TCCR1A|=(1<<COM1B0);
 6f4:	8f b5       	in	r24, 0x2f	; 47
 6f6:	80 61       	ori	r24, 0x10	; 16
 6f8:	8f bd       	out	0x2f, r24	; 47
					TCCR1A&=~(1<<COM1B1);
 6fa:	8f b5       	in	r24, 0x2f	; 47
 6fc:	8f 7d       	andi	r24, 0xDF	; 223
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <set_timer1_PWMb+0x56>
					break;
			case 2:////clear OC1B on compare match
					TCCR1A&=~(1<<COM1B0);
 700:	8f b5       	in	r24, 0x2f	; 47
 702:	8f 7e       	andi	r24, 0xEF	; 239
 704:	8f bd       	out	0x2f, r24	; 47
					TCCR1A|=(1<<COM1B1);
 706:	8f b5       	in	r24, 0x2f	; 47
 708:	80 62       	ori	r24, 0x20	; 32
 70a:	8f bd       	out	0x2f, r24	; 47
 70c:	08 95       	ret
					break;
			case 3:////set OC1B on compare match
					TCCR1A|=(1<<COM1B0);
 70e:	8f b5       	in	r24, 0x2f	; 47
 710:	80 61       	ori	r24, 0x10	; 16
 712:	8f bd       	out	0x2f, r24	; 47
					TCCR1A|=(1<<COM1B1);
 714:	8f b5       	in	r24, 0x2f	; 47
 716:	80 62       	ori	r24, 0x20	; 32
 718:	8f bd       	out	0x2f, r24	; 47
 71a:	08 95       	ret

0000071c <set_timer1_PWMa>:
					break;
		}
}

void set_timer1_PWMa(int i)
{
 71c:	9c 01       	movw	r18, r24
		TCCR1A|=(1<<WGM10);
 71e:	8f b5       	in	r24, 0x2f	; 47
 720:	81 60       	ori	r24, 0x01	; 1
 722:	8f bd       	out	0x2f, r24	; 47
		TCCR1A&=~(1<<WGM11);
 724:	8f b5       	in	r24, 0x2f	; 47
 726:	8d 7f       	andi	r24, 0xFD	; 253
 728:	8f bd       	out	0x2f, r24	; 47
		TCCR1B|=(1<<WGM12);
 72a:	8e b5       	in	r24, 0x2e	; 46
 72c:	88 60       	ori	r24, 0x08	; 8
 72e:	8e bd       	out	0x2e, r24	; 46
		TCCR1B&=~(1<<WGM13);
 730:	8e b5       	in	r24, 0x2e	; 46
 732:	8f 7e       	andi	r24, 0xEF	; 239
 734:	8e bd       	out	0x2e, r24	; 46
	switch(i)
 736:	21 30       	cpi	r18, 0x01	; 1
 738:	31 05       	cpc	r19, r1
 73a:	81 f0       	breq	.+32     	; 0x75c <set_timer1_PWMa+0x40>
 73c:	22 30       	cpi	r18, 0x02	; 2
 73e:	31 05       	cpc	r19, r1
 740:	1c f4       	brge	.+6      	; 0x748 <set_timer1_PWMa+0x2c>
 742:	23 2b       	or	r18, r19
 744:	41 f0       	breq	.+16     	; 0x756 <set_timer1_PWMa+0x3a>
 746:	08 95       	ret
 748:	22 30       	cpi	r18, 0x02	; 2
 74a:	31 05       	cpc	r19, r1
 74c:	69 f0       	breq	.+26     	; 0x768 <set_timer1_PWMa+0x4c>
 74e:	23 30       	cpi	r18, 0x03	; 3
 750:	31 05       	cpc	r19, r1
 752:	b9 f4       	brne	.+46     	; 0x782 <set_timer1_PWMa+0x66>
 754:	10 c0       	rjmp	.+32     	; 0x776 <set_timer1_PWMa+0x5a>
		{
			case 0:////OC1B disconnected
					TCCR1A&=~(1<<COM1A0);
 756:	8f b5       	in	r24, 0x2f	; 47
 758:	8f 7b       	andi	r24, 0xBF	; 191
 75a:	02 c0       	rjmp	.+4      	; 0x760 <set_timer1_PWMa+0x44>
					TCCR1A&=~(1<<COM1A1);
					break;
			case 1:////toggle OC1B on compare match
					TCCR1A|=(1<<COM1A0);
 75c:	8f b5       	in	r24, 0x2f	; 47
 75e:	80 64       	ori	r24, 0x40	; 64
 760:	8f bd       	out	0x2f, r24	; 47
					TCCR1A&=~(1<<COM1A1);
 762:	8f b5       	in	r24, 0x2f	; 47
 764:	8f 77       	andi	r24, 0x7F	; 127
 766:	05 c0       	rjmp	.+10     	; 0x772 <set_timer1_PWMa+0x56>
					break;
			case 2:////clear OC1B on compare match
					TCCR1A&=~(1<<COM1A0);
 768:	8f b5       	in	r24, 0x2f	; 47
 76a:	8f 7b       	andi	r24, 0xBF	; 191
 76c:	8f bd       	out	0x2f, r24	; 47
					TCCR1A|=(1<<COM1A1);
 76e:	8f b5       	in	r24, 0x2f	; 47
 770:	80 68       	ori	r24, 0x80	; 128
 772:	8f bd       	out	0x2f, r24	; 47
 774:	08 95       	ret
					break;
			case 3:////set OC1B on compare match
					TCCR1A|=(1<<COM1A0);
 776:	8f b5       	in	r24, 0x2f	; 47
 778:	80 64       	ori	r24, 0x40	; 64
 77a:	8f bd       	out	0x2f, r24	; 47
					TCCR1A|=(1<<COM1A1);
 77c:	8f b5       	in	r24, 0x2f	; 47
 77e:	80 68       	ori	r24, 0x80	; 128
 780:	8f bd       	out	0x2f, r24	; 47
 782:	08 95       	ret

00000784 <set_timer1_prescalar>:
					break;
		}
}

void set_timer1_prescalar(int i)
{
 784:	9c 01       	movw	r18, r24
	if(i<8)
 786:	88 30       	cpi	r24, 0x08	; 8
 788:	91 05       	cpc	r25, r1
 78a:	34 f4       	brge	.+12     	; 0x798 <set_timer1_prescalar+0x14>
	{
		TCCR1B&=0b11111000;
 78c:	8e b5       	in	r24, 0x2e	; 46
 78e:	88 7f       	andi	r24, 0xF8	; 248
 790:	8e bd       	out	0x2e, r24	; 46
		TCCR1B|=i;
 792:	8e b5       	in	r24, 0x2e	; 46
 794:	82 2b       	or	r24, r18
 796:	8e bd       	out	0x2e, r24	; 46
 798:	08 95       	ret

0000079a <enable_timer1_overflowint>:



void enable_timer1_overflowint()
{
	TIMSK|=(1<<TOIE1);
 79a:	89 b7       	in	r24, 0x39	; 57
 79c:	84 60       	ori	r24, 0x04	; 4
 79e:	89 bf       	out	0x39, r24	; 57
	TIFR|=(1<<TOV1);
 7a0:	88 b7       	in	r24, 0x38	; 56
 7a2:	84 60       	ori	r24, 0x04	; 4
 7a4:	88 bf       	out	0x38, r24	; 56
}
 7a6:	08 95       	ret

000007a8 <enable_timer1_ctcaint>:

void enable_timer1_ctcaint()
{
	TIMSK|=(1<<OCIE1A);
 7a8:	89 b7       	in	r24, 0x39	; 57
 7aa:	80 61       	ori	r24, 0x10	; 16
 7ac:	89 bf       	out	0x39, r24	; 57
	TIFR|=(1<<OCF1A);
 7ae:	88 b7       	in	r24, 0x38	; 56
 7b0:	80 61       	ori	r24, 0x10	; 16
 7b2:	88 bf       	out	0x38, r24	; 56
}
 7b4:	08 95       	ret

000007b6 <enable_timer1_ctcbint>:

void enable_timer1_ctcbint()
{
	TIMSK|=(1<<OCIE1B);
 7b6:	89 b7       	in	r24, 0x39	; 57
 7b8:	88 60       	ori	r24, 0x08	; 8
 7ba:	89 bf       	out	0x39, r24	; 57
	TIFR|=(1<<OCF1B);
 7bc:	88 b7       	in	r24, 0x38	; 56
 7be:	88 60       	ori	r24, 0x08	; 8
 7c0:	88 bf       	out	0x38, r24	; 56
}
 7c2:	08 95       	ret

000007c4 <disable_timer1_overflowint>:


void disable_timer1_overflowint()
{
	TIMSK&=~(1<<TOIE1);
 7c4:	89 b7       	in	r24, 0x39	; 57
 7c6:	8b 7f       	andi	r24, 0xFB	; 251
 7c8:	89 bf       	out	0x39, r24	; 57
	TIFR&=~(1<<TOV1);
 7ca:	88 b7       	in	r24, 0x38	; 56
 7cc:	8b 7f       	andi	r24, 0xFB	; 251
 7ce:	88 bf       	out	0x38, r24	; 56
}
 7d0:	08 95       	ret

000007d2 <disable_timer1_ctcaint>:

void disable_timer1_ctcaint()
{
	TIMSK&=~(1<<OCIE1A);
 7d2:	89 b7       	in	r24, 0x39	; 57
 7d4:	8f 7e       	andi	r24, 0xEF	; 239
 7d6:	89 bf       	out	0x39, r24	; 57
	TIFR&=~(1<<OCF1A);
 7d8:	88 b7       	in	r24, 0x38	; 56
 7da:	8f 7e       	andi	r24, 0xEF	; 239
 7dc:	88 bf       	out	0x38, r24	; 56
}
 7de:	08 95       	ret

000007e0 <disable_timer1_ctcbint>:

void disable_timer1_ctcbint()
{
	TIMSK&=~(1<<OCIE1B);
 7e0:	89 b7       	in	r24, 0x39	; 57
 7e2:	87 7f       	andi	r24, 0xF7	; 247
 7e4:	89 bf       	out	0x39, r24	; 57
	TIFR&=~(1<<OCF1B);
 7e6:	88 b7       	in	r24, 0x38	; 56
 7e8:	87 7f       	andi	r24, 0xF7	; 247
 7ea:	88 bf       	out	0x38, r24	; 56
}
 7ec:	08 95       	ret

000007ee <set_timer1value>:

void set_timer1value(int i)
{
	TCNT1=i;
 7ee:	9d bd       	out	0x2d, r25	; 45
 7f0:	8c bd       	out	0x2c, r24	; 44
}
 7f2:	08 95       	ret

000007f4 <set_compare1avalue>:

void set_compare1avalue(int i)
{
	OCR1A=i;
 7f4:	9b bd       	out	0x2b, r25	; 43
 7f6:	8a bd       	out	0x2a, r24	; 42
}
 7f8:	08 95       	ret

000007fa <set_compare1bvalue>:

void set_compare1bvalue(int i)
{
	OCR1B=i;
 7fa:	99 bd       	out	0x29, r25	; 41
 7fc:	88 bd       	out	0x28, r24	; 40
}
 7fe:	08 95       	ret

00000800 <stop_timer1>:

void set_timer1_prescalar(int i)
{
	if(i<8)
	{
		TCCR1B&=0b11111000;
 800:	8e b5       	in	r24, 0x2e	; 46
 802:	88 7f       	andi	r24, 0xF8	; 248
 804:	8e bd       	out	0x2e, r24	; 46
		TCCR1B|=i;
 806:	8e b5       	in	r24, 0x2e	; 46
 808:	8e bd       	out	0x2e, r24	; 46
}

void stop_timer1()
{
	set_timer1_prescalar(0);
}
 80a:	08 95       	ret

0000080c <__udivmodhi4>:
 80c:	aa 1b       	sub	r26, r26
 80e:	bb 1b       	sub	r27, r27
 810:	51 e1       	ldi	r21, 0x11	; 17
 812:	07 c0       	rjmp	.+14     	; 0x822 <__udivmodhi4_ep>

00000814 <__udivmodhi4_loop>:
 814:	aa 1f       	adc	r26, r26
 816:	bb 1f       	adc	r27, r27
 818:	a6 17       	cp	r26, r22
 81a:	b7 07       	cpc	r27, r23
 81c:	10 f0       	brcs	.+4      	; 0x822 <__udivmodhi4_ep>
 81e:	a6 1b       	sub	r26, r22
 820:	b7 0b       	sbc	r27, r23

00000822 <__udivmodhi4_ep>:
 822:	88 1f       	adc	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	5a 95       	dec	r21
 828:	a9 f7       	brne	.-22     	; 0x814 <__udivmodhi4_loop>
 82a:	80 95       	com	r24
 82c:	90 95       	com	r25
 82e:	bc 01       	movw	r22, r24
 830:	cd 01       	movw	r24, r26
 832:	08 95       	ret

00000834 <__divmodhi4>:
 834:	97 fb       	bst	r25, 7
 836:	09 2e       	mov	r0, r25
 838:	07 26       	eor	r0, r23
 83a:	0a d0       	rcall	.+20     	; 0x850 <__divmodhi4_neg1>
 83c:	77 fd       	sbrc	r23, 7
 83e:	04 d0       	rcall	.+8      	; 0x848 <__divmodhi4_neg2>
 840:	e5 df       	rcall	.-54     	; 0x80c <__udivmodhi4>
 842:	06 d0       	rcall	.+12     	; 0x850 <__divmodhi4_neg1>
 844:	00 20       	and	r0, r0
 846:	1a f4       	brpl	.+6      	; 0x84e <__divmodhi4_exit>

00000848 <__divmodhi4_neg2>:
 848:	70 95       	com	r23
 84a:	61 95       	neg	r22
 84c:	7f 4f       	sbci	r23, 0xFF	; 255

0000084e <__divmodhi4_exit>:
 84e:	08 95       	ret

00000850 <__divmodhi4_neg1>:
 850:	f6 f7       	brtc	.-4      	; 0x84e <__divmodhi4_exit>
 852:	90 95       	com	r25
 854:	81 95       	neg	r24
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	08 95       	ret

0000085a <sprintf>:
 85a:	ae e0       	ldi	r26, 0x0E	; 14
 85c:	b0 e0       	ldi	r27, 0x00	; 0
 85e:	e3 e3       	ldi	r30, 0x33	; 51
 860:	f4 e0       	ldi	r31, 0x04	; 4
 862:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__prologue_saves__+0x1c>
 866:	0d 89       	ldd	r16, Y+21	; 0x15
 868:	1e 89       	ldd	r17, Y+22	; 0x16
 86a:	86 e0       	ldi	r24, 0x06	; 6
 86c:	8c 83       	std	Y+4, r24	; 0x04
 86e:	1a 83       	std	Y+2, r17	; 0x02
 870:	09 83       	std	Y+1, r16	; 0x01
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	9f e7       	ldi	r25, 0x7F	; 127
 876:	9e 83       	std	Y+6, r25	; 0x06
 878:	8d 83       	std	Y+5, r24	; 0x05
 87a:	9e 01       	movw	r18, r28
 87c:	27 5e       	subi	r18, 0xE7	; 231
 87e:	3f 4f       	sbci	r19, 0xFF	; 255
 880:	ce 01       	movw	r24, r28
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	6f 89       	ldd	r22, Y+23	; 0x17
 886:	78 8d       	ldd	r23, Y+24	; 0x18
 888:	a9 01       	movw	r20, r18
 88a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <vfprintf>
 88e:	2f 81       	ldd	r18, Y+7	; 0x07
 890:	38 85       	ldd	r19, Y+8	; 0x08
 892:	02 0f       	add	r16, r18
 894:	13 1f       	adc	r17, r19
 896:	f8 01       	movw	r30, r16
 898:	10 82       	st	Z, r1
 89a:	2e 96       	adiw	r28, 0x0e	; 14
 89c:	e4 e0       	ldi	r30, 0x04	; 4
 89e:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__epilogue_restores__+0x1c>

000008a2 <vfprintf>:
 8a2:	ab e0       	ldi	r26, 0x0B	; 11
 8a4:	b0 e0       	ldi	r27, 0x00	; 0
 8a6:	e7 e5       	ldi	r30, 0x57	; 87
 8a8:	f4 e0       	ldi	r31, 0x04	; 4
 8aa:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__prologue_saves__>
 8ae:	3c 01       	movw	r6, r24
 8b0:	2b 01       	movw	r4, r22
 8b2:	5a 01       	movw	r10, r20
 8b4:	fc 01       	movw	r30, r24
 8b6:	17 82       	std	Z+7, r1	; 0x07
 8b8:	16 82       	std	Z+6, r1	; 0x06
 8ba:	83 81       	ldd	r24, Z+3	; 0x03
 8bc:	81 fd       	sbrc	r24, 1
 8be:	03 c0       	rjmp	.+6      	; 0x8c6 <vfprintf+0x24>
 8c0:	6f ef       	ldi	r22, 0xFF	; 255
 8c2:	7f ef       	ldi	r23, 0xFF	; 255
 8c4:	c6 c1       	rjmp	.+908    	; 0xc52 <vfprintf+0x3b0>
 8c6:	9a e0       	ldi	r25, 0x0A	; 10
 8c8:	89 2e       	mov	r8, r25
 8ca:	1e 01       	movw	r2, r28
 8cc:	08 94       	sec
 8ce:	21 1c       	adc	r2, r1
 8d0:	31 1c       	adc	r3, r1
 8d2:	f3 01       	movw	r30, r6
 8d4:	23 81       	ldd	r18, Z+3	; 0x03
 8d6:	f2 01       	movw	r30, r4
 8d8:	23 fd       	sbrc	r18, 3
 8da:	85 91       	lpm	r24, Z+
 8dc:	23 ff       	sbrs	r18, 3
 8de:	81 91       	ld	r24, Z+
 8e0:	2f 01       	movw	r4, r30
 8e2:	88 23       	and	r24, r24
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <vfprintf+0x46>
 8e6:	b2 c1       	rjmp	.+868    	; 0xc4c <vfprintf+0x3aa>
 8e8:	85 32       	cpi	r24, 0x25	; 37
 8ea:	39 f4       	brne	.+14     	; 0x8fa <vfprintf+0x58>
 8ec:	23 fd       	sbrc	r18, 3
 8ee:	85 91       	lpm	r24, Z+
 8f0:	23 ff       	sbrs	r18, 3
 8f2:	81 91       	ld	r24, Z+
 8f4:	2f 01       	movw	r4, r30
 8f6:	85 32       	cpi	r24, 0x25	; 37
 8f8:	29 f4       	brne	.+10     	; 0x904 <vfprintf+0x62>
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	b3 01       	movw	r22, r6
 8fe:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 902:	e7 cf       	rjmp	.-50     	; 0x8d2 <vfprintf+0x30>
 904:	98 2f       	mov	r25, r24
 906:	ff 24       	eor	r15, r15
 908:	ee 24       	eor	r14, r14
 90a:	99 24       	eor	r9, r9
 90c:	ff e1       	ldi	r31, 0x1F	; 31
 90e:	ff 15       	cp	r31, r15
 910:	d0 f0       	brcs	.+52     	; 0x946 <vfprintf+0xa4>
 912:	9b 32       	cpi	r25, 0x2B	; 43
 914:	69 f0       	breq	.+26     	; 0x930 <vfprintf+0x8e>
 916:	9c 32       	cpi	r25, 0x2C	; 44
 918:	28 f4       	brcc	.+10     	; 0x924 <vfprintf+0x82>
 91a:	90 32       	cpi	r25, 0x20	; 32
 91c:	59 f0       	breq	.+22     	; 0x934 <vfprintf+0x92>
 91e:	93 32       	cpi	r25, 0x23	; 35
 920:	91 f4       	brne	.+36     	; 0x946 <vfprintf+0xa4>
 922:	0e c0       	rjmp	.+28     	; 0x940 <vfprintf+0x9e>
 924:	9d 32       	cpi	r25, 0x2D	; 45
 926:	49 f0       	breq	.+18     	; 0x93a <vfprintf+0x98>
 928:	90 33       	cpi	r25, 0x30	; 48
 92a:	69 f4       	brne	.+26     	; 0x946 <vfprintf+0xa4>
 92c:	41 e0       	ldi	r20, 0x01	; 1
 92e:	24 c0       	rjmp	.+72     	; 0x978 <vfprintf+0xd6>
 930:	52 e0       	ldi	r21, 0x02	; 2
 932:	f5 2a       	or	r15, r21
 934:	84 e0       	ldi	r24, 0x04	; 4
 936:	f8 2a       	or	r15, r24
 938:	28 c0       	rjmp	.+80     	; 0x98a <vfprintf+0xe8>
 93a:	98 e0       	ldi	r25, 0x08	; 8
 93c:	f9 2a       	or	r15, r25
 93e:	25 c0       	rjmp	.+74     	; 0x98a <vfprintf+0xe8>
 940:	e0 e1       	ldi	r30, 0x10	; 16
 942:	fe 2a       	or	r15, r30
 944:	22 c0       	rjmp	.+68     	; 0x98a <vfprintf+0xe8>
 946:	f7 fc       	sbrc	r15, 7
 948:	29 c0       	rjmp	.+82     	; 0x99c <vfprintf+0xfa>
 94a:	89 2f       	mov	r24, r25
 94c:	80 53       	subi	r24, 0x30	; 48
 94e:	8a 30       	cpi	r24, 0x0A	; 10
 950:	70 f4       	brcc	.+28     	; 0x96e <vfprintf+0xcc>
 952:	f6 fe       	sbrs	r15, 6
 954:	05 c0       	rjmp	.+10     	; 0x960 <vfprintf+0xbe>
 956:	98 9c       	mul	r9, r8
 958:	90 2c       	mov	r9, r0
 95a:	11 24       	eor	r1, r1
 95c:	98 0e       	add	r9, r24
 95e:	15 c0       	rjmp	.+42     	; 0x98a <vfprintf+0xe8>
 960:	e8 9c       	mul	r14, r8
 962:	e0 2c       	mov	r14, r0
 964:	11 24       	eor	r1, r1
 966:	e8 0e       	add	r14, r24
 968:	f0 e2       	ldi	r31, 0x20	; 32
 96a:	ff 2a       	or	r15, r31
 96c:	0e c0       	rjmp	.+28     	; 0x98a <vfprintf+0xe8>
 96e:	9e 32       	cpi	r25, 0x2E	; 46
 970:	29 f4       	brne	.+10     	; 0x97c <vfprintf+0xda>
 972:	f6 fc       	sbrc	r15, 6
 974:	6b c1       	rjmp	.+726    	; 0xc4c <vfprintf+0x3aa>
 976:	40 e4       	ldi	r20, 0x40	; 64
 978:	f4 2a       	or	r15, r20
 97a:	07 c0       	rjmp	.+14     	; 0x98a <vfprintf+0xe8>
 97c:	9c 36       	cpi	r25, 0x6C	; 108
 97e:	19 f4       	brne	.+6      	; 0x986 <vfprintf+0xe4>
 980:	50 e8       	ldi	r21, 0x80	; 128
 982:	f5 2a       	or	r15, r21
 984:	02 c0       	rjmp	.+4      	; 0x98a <vfprintf+0xe8>
 986:	98 36       	cpi	r25, 0x68	; 104
 988:	49 f4       	brne	.+18     	; 0x99c <vfprintf+0xfa>
 98a:	f2 01       	movw	r30, r4
 98c:	23 fd       	sbrc	r18, 3
 98e:	95 91       	lpm	r25, Z+
 990:	23 ff       	sbrs	r18, 3
 992:	91 91       	ld	r25, Z+
 994:	2f 01       	movw	r4, r30
 996:	99 23       	and	r25, r25
 998:	09 f0       	breq	.+2      	; 0x99c <vfprintf+0xfa>
 99a:	b8 cf       	rjmp	.-144    	; 0x90c <vfprintf+0x6a>
 99c:	89 2f       	mov	r24, r25
 99e:	85 54       	subi	r24, 0x45	; 69
 9a0:	83 30       	cpi	r24, 0x03	; 3
 9a2:	18 f0       	brcs	.+6      	; 0x9aa <vfprintf+0x108>
 9a4:	80 52       	subi	r24, 0x20	; 32
 9a6:	83 30       	cpi	r24, 0x03	; 3
 9a8:	38 f4       	brcc	.+14     	; 0x9b8 <vfprintf+0x116>
 9aa:	44 e0       	ldi	r20, 0x04	; 4
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	a4 0e       	add	r10, r20
 9b0:	b5 1e       	adc	r11, r21
 9b2:	5f e3       	ldi	r21, 0x3F	; 63
 9b4:	59 83       	std	Y+1, r21	; 0x01
 9b6:	0f c0       	rjmp	.+30     	; 0x9d6 <vfprintf+0x134>
 9b8:	93 36       	cpi	r25, 0x63	; 99
 9ba:	31 f0       	breq	.+12     	; 0x9c8 <vfprintf+0x126>
 9bc:	93 37       	cpi	r25, 0x73	; 115
 9be:	79 f0       	breq	.+30     	; 0x9de <vfprintf+0x13c>
 9c0:	93 35       	cpi	r25, 0x53	; 83
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <vfprintf+0x124>
 9c4:	56 c0       	rjmp	.+172    	; 0xa72 <vfprintf+0x1d0>
 9c6:	20 c0       	rjmp	.+64     	; 0xa08 <vfprintf+0x166>
 9c8:	f5 01       	movw	r30, r10
 9ca:	80 81       	ld	r24, Z
 9cc:	89 83       	std	Y+1, r24	; 0x01
 9ce:	42 e0       	ldi	r20, 0x02	; 2
 9d0:	50 e0       	ldi	r21, 0x00	; 0
 9d2:	a4 0e       	add	r10, r20
 9d4:	b5 1e       	adc	r11, r21
 9d6:	61 01       	movw	r12, r2
 9d8:	01 e0       	ldi	r16, 0x01	; 1
 9da:	10 e0       	ldi	r17, 0x00	; 0
 9dc:	12 c0       	rjmp	.+36     	; 0xa02 <vfprintf+0x160>
 9de:	f5 01       	movw	r30, r10
 9e0:	c0 80       	ld	r12, Z
 9e2:	d1 80       	ldd	r13, Z+1	; 0x01
 9e4:	f6 fc       	sbrc	r15, 6
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <vfprintf+0x14c>
 9e8:	6f ef       	ldi	r22, 0xFF	; 255
 9ea:	7f ef       	ldi	r23, 0xFF	; 255
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <vfprintf+0x150>
 9ee:	69 2d       	mov	r22, r9
 9f0:	70 e0       	ldi	r23, 0x00	; 0
 9f2:	42 e0       	ldi	r20, 0x02	; 2
 9f4:	50 e0       	ldi	r21, 0x00	; 0
 9f6:	a4 0e       	add	r10, r20
 9f8:	b5 1e       	adc	r11, r21
 9fa:	c6 01       	movw	r24, r12
 9fc:	0e 94 39 06 	call	0xc72	; 0xc72 <strnlen>
 a00:	8c 01       	movw	r16, r24
 a02:	5f e7       	ldi	r21, 0x7F	; 127
 a04:	f5 22       	and	r15, r21
 a06:	14 c0       	rjmp	.+40     	; 0xa30 <vfprintf+0x18e>
 a08:	f5 01       	movw	r30, r10
 a0a:	c0 80       	ld	r12, Z
 a0c:	d1 80       	ldd	r13, Z+1	; 0x01
 a0e:	f6 fc       	sbrc	r15, 6
 a10:	03 c0       	rjmp	.+6      	; 0xa18 <vfprintf+0x176>
 a12:	6f ef       	ldi	r22, 0xFF	; 255
 a14:	7f ef       	ldi	r23, 0xFF	; 255
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <vfprintf+0x17a>
 a18:	69 2d       	mov	r22, r9
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	42 e0       	ldi	r20, 0x02	; 2
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	a4 0e       	add	r10, r20
 a22:	b5 1e       	adc	r11, r21
 a24:	c6 01       	movw	r24, r12
 a26:	0e 94 2e 06 	call	0xc5c	; 0xc5c <strnlen_P>
 a2a:	8c 01       	movw	r16, r24
 a2c:	50 e8       	ldi	r21, 0x80	; 128
 a2e:	f5 2a       	or	r15, r21
 a30:	f3 fe       	sbrs	r15, 3
 a32:	07 c0       	rjmp	.+14     	; 0xa42 <vfprintf+0x1a0>
 a34:	1a c0       	rjmp	.+52     	; 0xa6a <vfprintf+0x1c8>
 a36:	80 e2       	ldi	r24, 0x20	; 32
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	b3 01       	movw	r22, r6
 a3c:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 a40:	ea 94       	dec	r14
 a42:	8e 2d       	mov	r24, r14
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	08 17       	cp	r16, r24
 a48:	19 07       	cpc	r17, r25
 a4a:	a8 f3       	brcs	.-22     	; 0xa36 <vfprintf+0x194>
 a4c:	0e c0       	rjmp	.+28     	; 0xa6a <vfprintf+0x1c8>
 a4e:	f6 01       	movw	r30, r12
 a50:	f7 fc       	sbrc	r15, 7
 a52:	85 91       	lpm	r24, Z+
 a54:	f7 fe       	sbrs	r15, 7
 a56:	81 91       	ld	r24, Z+
 a58:	6f 01       	movw	r12, r30
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	b3 01       	movw	r22, r6
 a5e:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 a62:	e1 10       	cpse	r14, r1
 a64:	ea 94       	dec	r14
 a66:	01 50       	subi	r16, 0x01	; 1
 a68:	10 40       	sbci	r17, 0x00	; 0
 a6a:	01 15       	cp	r16, r1
 a6c:	11 05       	cpc	r17, r1
 a6e:	79 f7       	brne	.-34     	; 0xa4e <vfprintf+0x1ac>
 a70:	ea c0       	rjmp	.+468    	; 0xc46 <vfprintf+0x3a4>
 a72:	94 36       	cpi	r25, 0x64	; 100
 a74:	11 f0       	breq	.+4      	; 0xa7a <vfprintf+0x1d8>
 a76:	99 36       	cpi	r25, 0x69	; 105
 a78:	69 f5       	brne	.+90     	; 0xad4 <vfprintf+0x232>
 a7a:	f7 fe       	sbrs	r15, 7
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <vfprintf+0x1ec>
 a7e:	f5 01       	movw	r30, r10
 a80:	20 81       	ld	r18, Z
 a82:	31 81       	ldd	r19, Z+1	; 0x01
 a84:	42 81       	ldd	r20, Z+2	; 0x02
 a86:	53 81       	ldd	r21, Z+3	; 0x03
 a88:	84 e0       	ldi	r24, 0x04	; 4
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <vfprintf+0x200>
 a8e:	f5 01       	movw	r30, r10
 a90:	80 81       	ld	r24, Z
 a92:	91 81       	ldd	r25, Z+1	; 0x01
 a94:	9c 01       	movw	r18, r24
 a96:	44 27       	eor	r20, r20
 a98:	37 fd       	sbrc	r19, 7
 a9a:	40 95       	com	r20
 a9c:	54 2f       	mov	r21, r20
 a9e:	82 e0       	ldi	r24, 0x02	; 2
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	a8 0e       	add	r10, r24
 aa4:	b9 1e       	adc	r11, r25
 aa6:	9f e6       	ldi	r25, 0x6F	; 111
 aa8:	f9 22       	and	r15, r25
 aaa:	57 ff       	sbrs	r21, 7
 aac:	09 c0       	rjmp	.+18     	; 0xac0 <vfprintf+0x21e>
 aae:	50 95       	com	r21
 ab0:	40 95       	com	r20
 ab2:	30 95       	com	r19
 ab4:	21 95       	neg	r18
 ab6:	3f 4f       	sbci	r19, 0xFF	; 255
 ab8:	4f 4f       	sbci	r20, 0xFF	; 255
 aba:	5f 4f       	sbci	r21, 0xFF	; 255
 abc:	e0 e8       	ldi	r30, 0x80	; 128
 abe:	fe 2a       	or	r15, r30
 ac0:	ca 01       	movw	r24, r20
 ac2:	b9 01       	movw	r22, r18
 ac4:	a1 01       	movw	r20, r2
 ac6:	2a e0       	ldi	r18, 0x0A	; 10
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	0e 94 70 06 	call	0xce0	; 0xce0 <__ultoa_invert>
 ace:	d8 2e       	mov	r13, r24
 ad0:	d2 18       	sub	r13, r2
 ad2:	40 c0       	rjmp	.+128    	; 0xb54 <vfprintf+0x2b2>
 ad4:	95 37       	cpi	r25, 0x75	; 117
 ad6:	29 f4       	brne	.+10     	; 0xae2 <vfprintf+0x240>
 ad8:	1f 2d       	mov	r17, r15
 ada:	1f 7e       	andi	r17, 0xEF	; 239
 adc:	2a e0       	ldi	r18, 0x0A	; 10
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	1d c0       	rjmp	.+58     	; 0xb1c <vfprintf+0x27a>
 ae2:	1f 2d       	mov	r17, r15
 ae4:	19 7f       	andi	r17, 0xF9	; 249
 ae6:	9f 36       	cpi	r25, 0x6F	; 111
 ae8:	61 f0       	breq	.+24     	; 0xb02 <vfprintf+0x260>
 aea:	90 37       	cpi	r25, 0x70	; 112
 aec:	20 f4       	brcc	.+8      	; 0xaf6 <vfprintf+0x254>
 aee:	98 35       	cpi	r25, 0x58	; 88
 af0:	09 f0       	breq	.+2      	; 0xaf4 <vfprintf+0x252>
 af2:	ac c0       	rjmp	.+344    	; 0xc4c <vfprintf+0x3aa>
 af4:	0f c0       	rjmp	.+30     	; 0xb14 <vfprintf+0x272>
 af6:	90 37       	cpi	r25, 0x70	; 112
 af8:	39 f0       	breq	.+14     	; 0xb08 <vfprintf+0x266>
 afa:	98 37       	cpi	r25, 0x78	; 120
 afc:	09 f0       	breq	.+2      	; 0xb00 <vfprintf+0x25e>
 afe:	a6 c0       	rjmp	.+332    	; 0xc4c <vfprintf+0x3aa>
 b00:	04 c0       	rjmp	.+8      	; 0xb0a <vfprintf+0x268>
 b02:	28 e0       	ldi	r18, 0x08	; 8
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	0a c0       	rjmp	.+20     	; 0xb1c <vfprintf+0x27a>
 b08:	10 61       	ori	r17, 0x10	; 16
 b0a:	14 fd       	sbrc	r17, 4
 b0c:	14 60       	ori	r17, 0x04	; 4
 b0e:	20 e1       	ldi	r18, 0x10	; 16
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	04 c0       	rjmp	.+8      	; 0xb1c <vfprintf+0x27a>
 b14:	14 fd       	sbrc	r17, 4
 b16:	16 60       	ori	r17, 0x06	; 6
 b18:	20 e1       	ldi	r18, 0x10	; 16
 b1a:	32 e0       	ldi	r19, 0x02	; 2
 b1c:	17 ff       	sbrs	r17, 7
 b1e:	08 c0       	rjmp	.+16     	; 0xb30 <vfprintf+0x28e>
 b20:	f5 01       	movw	r30, r10
 b22:	60 81       	ld	r22, Z
 b24:	71 81       	ldd	r23, Z+1	; 0x01
 b26:	82 81       	ldd	r24, Z+2	; 0x02
 b28:	93 81       	ldd	r25, Z+3	; 0x03
 b2a:	44 e0       	ldi	r20, 0x04	; 4
 b2c:	50 e0       	ldi	r21, 0x00	; 0
 b2e:	08 c0       	rjmp	.+16     	; 0xb40 <vfprintf+0x29e>
 b30:	f5 01       	movw	r30, r10
 b32:	80 81       	ld	r24, Z
 b34:	91 81       	ldd	r25, Z+1	; 0x01
 b36:	bc 01       	movw	r22, r24
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	42 e0       	ldi	r20, 0x02	; 2
 b3e:	50 e0       	ldi	r21, 0x00	; 0
 b40:	a4 0e       	add	r10, r20
 b42:	b5 1e       	adc	r11, r21
 b44:	a1 01       	movw	r20, r2
 b46:	0e 94 70 06 	call	0xce0	; 0xce0 <__ultoa_invert>
 b4a:	d8 2e       	mov	r13, r24
 b4c:	d2 18       	sub	r13, r2
 b4e:	8f e7       	ldi	r24, 0x7F	; 127
 b50:	f8 2e       	mov	r15, r24
 b52:	f1 22       	and	r15, r17
 b54:	f6 fe       	sbrs	r15, 6
 b56:	0b c0       	rjmp	.+22     	; 0xb6e <vfprintf+0x2cc>
 b58:	5e ef       	ldi	r21, 0xFE	; 254
 b5a:	f5 22       	and	r15, r21
 b5c:	d9 14       	cp	r13, r9
 b5e:	38 f4       	brcc	.+14     	; 0xb6e <vfprintf+0x2cc>
 b60:	f4 fe       	sbrs	r15, 4
 b62:	07 c0       	rjmp	.+14     	; 0xb72 <vfprintf+0x2d0>
 b64:	f2 fc       	sbrc	r15, 2
 b66:	05 c0       	rjmp	.+10     	; 0xb72 <vfprintf+0x2d0>
 b68:	8f ee       	ldi	r24, 0xEF	; 239
 b6a:	f8 22       	and	r15, r24
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <vfprintf+0x2d0>
 b6e:	1d 2d       	mov	r17, r13
 b70:	01 c0       	rjmp	.+2      	; 0xb74 <vfprintf+0x2d2>
 b72:	19 2d       	mov	r17, r9
 b74:	f4 fe       	sbrs	r15, 4
 b76:	0d c0       	rjmp	.+26     	; 0xb92 <vfprintf+0x2f0>
 b78:	fe 01       	movw	r30, r28
 b7a:	ed 0d       	add	r30, r13
 b7c:	f1 1d       	adc	r31, r1
 b7e:	80 81       	ld	r24, Z
 b80:	80 33       	cpi	r24, 0x30	; 48
 b82:	19 f4       	brne	.+6      	; 0xb8a <vfprintf+0x2e8>
 b84:	99 ee       	ldi	r25, 0xE9	; 233
 b86:	f9 22       	and	r15, r25
 b88:	08 c0       	rjmp	.+16     	; 0xb9a <vfprintf+0x2f8>
 b8a:	1f 5f       	subi	r17, 0xFF	; 255
 b8c:	f2 fe       	sbrs	r15, 2
 b8e:	05 c0       	rjmp	.+10     	; 0xb9a <vfprintf+0x2f8>
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <vfprintf+0x2f6>
 b92:	8f 2d       	mov	r24, r15
 b94:	86 78       	andi	r24, 0x86	; 134
 b96:	09 f0       	breq	.+2      	; 0xb9a <vfprintf+0x2f8>
 b98:	1f 5f       	subi	r17, 0xFF	; 255
 b9a:	0f 2d       	mov	r16, r15
 b9c:	f3 fc       	sbrc	r15, 3
 b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <vfprintf+0x326>
 ba0:	f0 fe       	sbrs	r15, 0
 ba2:	0f c0       	rjmp	.+30     	; 0xbc2 <vfprintf+0x320>
 ba4:	1e 15       	cp	r17, r14
 ba6:	10 f0       	brcs	.+4      	; 0xbac <vfprintf+0x30a>
 ba8:	9d 2c       	mov	r9, r13
 baa:	0b c0       	rjmp	.+22     	; 0xbc2 <vfprintf+0x320>
 bac:	9d 2c       	mov	r9, r13
 bae:	9e 0c       	add	r9, r14
 bb0:	91 1a       	sub	r9, r17
 bb2:	1e 2d       	mov	r17, r14
 bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <vfprintf+0x320>
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	b3 01       	movw	r22, r6
 bbc:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 bc0:	1f 5f       	subi	r17, 0xFF	; 255
 bc2:	1e 15       	cp	r17, r14
 bc4:	c0 f3       	brcs	.-16     	; 0xbb6 <vfprintf+0x314>
 bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <vfprintf+0x32e>
 bc8:	1e 15       	cp	r17, r14
 bca:	10 f4       	brcc	.+4      	; 0xbd0 <vfprintf+0x32e>
 bcc:	e1 1a       	sub	r14, r17
 bce:	01 c0       	rjmp	.+2      	; 0xbd2 <vfprintf+0x330>
 bd0:	ee 24       	eor	r14, r14
 bd2:	04 ff       	sbrs	r16, 4
 bd4:	0f c0       	rjmp	.+30     	; 0xbf4 <vfprintf+0x352>
 bd6:	80 e3       	ldi	r24, 0x30	; 48
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	b3 01       	movw	r22, r6
 bdc:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 be0:	02 ff       	sbrs	r16, 2
 be2:	1d c0       	rjmp	.+58     	; 0xc1e <vfprintf+0x37c>
 be4:	01 fd       	sbrc	r16, 1
 be6:	03 c0       	rjmp	.+6      	; 0xbee <vfprintf+0x34c>
 be8:	88 e7       	ldi	r24, 0x78	; 120
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e c0       	rjmp	.+28     	; 0xc0a <vfprintf+0x368>
 bee:	88 e5       	ldi	r24, 0x58	; 88
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0b c0       	rjmp	.+22     	; 0xc0a <vfprintf+0x368>
 bf4:	80 2f       	mov	r24, r16
 bf6:	86 78       	andi	r24, 0x86	; 134
 bf8:	91 f0       	breq	.+36     	; 0xc1e <vfprintf+0x37c>
 bfa:	01 ff       	sbrs	r16, 1
 bfc:	02 c0       	rjmp	.+4      	; 0xc02 <vfprintf+0x360>
 bfe:	8b e2       	ldi	r24, 0x2B	; 43
 c00:	01 c0       	rjmp	.+2      	; 0xc04 <vfprintf+0x362>
 c02:	80 e2       	ldi	r24, 0x20	; 32
 c04:	f7 fc       	sbrc	r15, 7
 c06:	8d e2       	ldi	r24, 0x2D	; 45
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	b3 01       	movw	r22, r6
 c0c:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 c10:	06 c0       	rjmp	.+12     	; 0xc1e <vfprintf+0x37c>
 c12:	80 e3       	ldi	r24, 0x30	; 48
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	b3 01       	movw	r22, r6
 c18:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 c1c:	9a 94       	dec	r9
 c1e:	d9 14       	cp	r13, r9
 c20:	c0 f3       	brcs	.-16     	; 0xc12 <vfprintf+0x370>
 c22:	da 94       	dec	r13
 c24:	f1 01       	movw	r30, r2
 c26:	ed 0d       	add	r30, r13
 c28:	f1 1d       	adc	r31, r1
 c2a:	80 81       	ld	r24, Z
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	b3 01       	movw	r22, r6
 c30:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 c34:	dd 20       	and	r13, r13
 c36:	a9 f7       	brne	.-22     	; 0xc22 <vfprintf+0x380>
 c38:	06 c0       	rjmp	.+12     	; 0xc46 <vfprintf+0x3a4>
 c3a:	80 e2       	ldi	r24, 0x20	; 32
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	b3 01       	movw	r22, r6
 c40:	0e 94 44 06 	call	0xc88	; 0xc88 <fputc>
 c44:	ea 94       	dec	r14
 c46:	ee 20       	and	r14, r14
 c48:	c1 f7       	brne	.-16     	; 0xc3a <vfprintf+0x398>
 c4a:	43 ce       	rjmp	.-890    	; 0x8d2 <vfprintf+0x30>
 c4c:	f3 01       	movw	r30, r6
 c4e:	66 81       	ldd	r22, Z+6	; 0x06
 c50:	77 81       	ldd	r23, Z+7	; 0x07
 c52:	cb 01       	movw	r24, r22
 c54:	2b 96       	adiw	r28, 0x0b	; 11
 c56:	e2 e1       	ldi	r30, 0x12	; 18
 c58:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__epilogue_restores__>

00000c5c <strnlen_P>:
 c5c:	fc 01       	movw	r30, r24
 c5e:	05 90       	lpm	r0, Z+
 c60:	61 50       	subi	r22, 0x01	; 1
 c62:	70 40       	sbci	r23, 0x00	; 0
 c64:	01 10       	cpse	r0, r1
 c66:	d8 f7       	brcc	.-10     	; 0xc5e <strnlen_P+0x2>
 c68:	80 95       	com	r24
 c6a:	90 95       	com	r25
 c6c:	8e 0f       	add	r24, r30
 c6e:	9f 1f       	adc	r25, r31
 c70:	08 95       	ret

00000c72 <strnlen>:
 c72:	fc 01       	movw	r30, r24
 c74:	61 50       	subi	r22, 0x01	; 1
 c76:	70 40       	sbci	r23, 0x00	; 0
 c78:	01 90       	ld	r0, Z+
 c7a:	01 10       	cpse	r0, r1
 c7c:	d8 f7       	brcc	.-10     	; 0xc74 <strnlen+0x2>
 c7e:	80 95       	com	r24
 c80:	90 95       	com	r25
 c82:	8e 0f       	add	r24, r30
 c84:	9f 1f       	adc	r25, r31
 c86:	08 95       	ret

00000c88 <fputc>:
 c88:	0f 93       	push	r16
 c8a:	1f 93       	push	r17
 c8c:	cf 93       	push	r28
 c8e:	df 93       	push	r29
 c90:	8c 01       	movw	r16, r24
 c92:	eb 01       	movw	r28, r22
 c94:	8b 81       	ldd	r24, Y+3	; 0x03
 c96:	81 ff       	sbrs	r24, 1
 c98:	1b c0       	rjmp	.+54     	; 0xcd0 <fputc+0x48>
 c9a:	82 ff       	sbrs	r24, 2
 c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <fputc+0x30>
 c9e:	2e 81       	ldd	r18, Y+6	; 0x06
 ca0:	3f 81       	ldd	r19, Y+7	; 0x07
 ca2:	8c 81       	ldd	r24, Y+4	; 0x04
 ca4:	9d 81       	ldd	r25, Y+5	; 0x05
 ca6:	28 17       	cp	r18, r24
 ca8:	39 07       	cpc	r19, r25
 caa:	64 f4       	brge	.+24     	; 0xcc4 <fputc+0x3c>
 cac:	e8 81       	ld	r30, Y
 cae:	f9 81       	ldd	r31, Y+1	; 0x01
 cb0:	01 93       	st	Z+, r16
 cb2:	f9 83       	std	Y+1, r31	; 0x01
 cb4:	e8 83       	st	Y, r30
 cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <fputc+0x3c>
 cb8:	e8 85       	ldd	r30, Y+8	; 0x08
 cba:	f9 85       	ldd	r31, Y+9	; 0x09
 cbc:	80 2f       	mov	r24, r16
 cbe:	09 95       	icall
 cc0:	89 2b       	or	r24, r25
 cc2:	31 f4       	brne	.+12     	; 0xcd0 <fputc+0x48>
 cc4:	8e 81       	ldd	r24, Y+6	; 0x06
 cc6:	9f 81       	ldd	r25, Y+7	; 0x07
 cc8:	01 96       	adiw	r24, 0x01	; 1
 cca:	9f 83       	std	Y+7, r25	; 0x07
 ccc:	8e 83       	std	Y+6, r24	; 0x06
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <fputc+0x4c>
 cd0:	0f ef       	ldi	r16, 0xFF	; 255
 cd2:	1f ef       	ldi	r17, 0xFF	; 255
 cd4:	c8 01       	movw	r24, r16
 cd6:	df 91       	pop	r29
 cd8:	cf 91       	pop	r28
 cda:	1f 91       	pop	r17
 cdc:	0f 91       	pop	r16
 cde:	08 95       	ret

00000ce0 <__ultoa_invert>:
 ce0:	fa 01       	movw	r30, r20
 ce2:	aa 27       	eor	r26, r26
 ce4:	28 30       	cpi	r18, 0x08	; 8
 ce6:	51 f1       	breq	.+84     	; 0xd3c <__ultoa_invert+0x5c>
 ce8:	20 31       	cpi	r18, 0x10	; 16
 cea:	81 f1       	breq	.+96     	; 0xd4c <__ultoa_invert+0x6c>
 cec:	e8 94       	clt
 cee:	6f 93       	push	r22
 cf0:	6e 7f       	andi	r22, 0xFE	; 254
 cf2:	6e 5f       	subi	r22, 0xFE	; 254
 cf4:	7f 4f       	sbci	r23, 0xFF	; 255
 cf6:	8f 4f       	sbci	r24, 0xFF	; 255
 cf8:	9f 4f       	sbci	r25, 0xFF	; 255
 cfa:	af 4f       	sbci	r26, 0xFF	; 255
 cfc:	b1 e0       	ldi	r27, 0x01	; 1
 cfe:	3e d0       	rcall	.+124    	; 0xd7c <__ultoa_invert+0x9c>
 d00:	b4 e0       	ldi	r27, 0x04	; 4
 d02:	3c d0       	rcall	.+120    	; 0xd7c <__ultoa_invert+0x9c>
 d04:	67 0f       	add	r22, r23
 d06:	78 1f       	adc	r23, r24
 d08:	89 1f       	adc	r24, r25
 d0a:	9a 1f       	adc	r25, r26
 d0c:	a1 1d       	adc	r26, r1
 d0e:	68 0f       	add	r22, r24
 d10:	79 1f       	adc	r23, r25
 d12:	8a 1f       	adc	r24, r26
 d14:	91 1d       	adc	r25, r1
 d16:	a1 1d       	adc	r26, r1
 d18:	6a 0f       	add	r22, r26
 d1a:	71 1d       	adc	r23, r1
 d1c:	81 1d       	adc	r24, r1
 d1e:	91 1d       	adc	r25, r1
 d20:	a1 1d       	adc	r26, r1
 d22:	20 d0       	rcall	.+64     	; 0xd64 <__ultoa_invert+0x84>
 d24:	09 f4       	brne	.+2      	; 0xd28 <__ultoa_invert+0x48>
 d26:	68 94       	set
 d28:	3f 91       	pop	r19
 d2a:	2a e0       	ldi	r18, 0x0A	; 10
 d2c:	26 9f       	mul	r18, r22
 d2e:	11 24       	eor	r1, r1
 d30:	30 19       	sub	r19, r0
 d32:	30 5d       	subi	r19, 0xD0	; 208
 d34:	31 93       	st	Z+, r19
 d36:	de f6       	brtc	.-74     	; 0xcee <__ultoa_invert+0xe>
 d38:	cf 01       	movw	r24, r30
 d3a:	08 95       	ret
 d3c:	46 2f       	mov	r20, r22
 d3e:	47 70       	andi	r20, 0x07	; 7
 d40:	40 5d       	subi	r20, 0xD0	; 208
 d42:	41 93       	st	Z+, r20
 d44:	b3 e0       	ldi	r27, 0x03	; 3
 d46:	0f d0       	rcall	.+30     	; 0xd66 <__ultoa_invert+0x86>
 d48:	c9 f7       	brne	.-14     	; 0xd3c <__ultoa_invert+0x5c>
 d4a:	f6 cf       	rjmp	.-20     	; 0xd38 <__ultoa_invert+0x58>
 d4c:	46 2f       	mov	r20, r22
 d4e:	4f 70       	andi	r20, 0x0F	; 15
 d50:	40 5d       	subi	r20, 0xD0	; 208
 d52:	4a 33       	cpi	r20, 0x3A	; 58
 d54:	18 f0       	brcs	.+6      	; 0xd5c <__ultoa_invert+0x7c>
 d56:	49 5d       	subi	r20, 0xD9	; 217
 d58:	31 fd       	sbrc	r19, 1
 d5a:	40 52       	subi	r20, 0x20	; 32
 d5c:	41 93       	st	Z+, r20
 d5e:	02 d0       	rcall	.+4      	; 0xd64 <__ultoa_invert+0x84>
 d60:	a9 f7       	brne	.-22     	; 0xd4c <__ultoa_invert+0x6c>
 d62:	ea cf       	rjmp	.-44     	; 0xd38 <__ultoa_invert+0x58>
 d64:	b4 e0       	ldi	r27, 0x04	; 4
 d66:	a6 95       	lsr	r26
 d68:	97 95       	ror	r25
 d6a:	87 95       	ror	r24
 d6c:	77 95       	ror	r23
 d6e:	67 95       	ror	r22
 d70:	ba 95       	dec	r27
 d72:	c9 f7       	brne	.-14     	; 0xd66 <__ultoa_invert+0x86>
 d74:	00 97       	sbiw	r24, 0x00	; 0
 d76:	61 05       	cpc	r22, r1
 d78:	71 05       	cpc	r23, r1
 d7a:	08 95       	ret
 d7c:	9b 01       	movw	r18, r22
 d7e:	ac 01       	movw	r20, r24
 d80:	0a 2e       	mov	r0, r26
 d82:	06 94       	lsr	r0
 d84:	57 95       	ror	r21
 d86:	47 95       	ror	r20
 d88:	37 95       	ror	r19
 d8a:	27 95       	ror	r18
 d8c:	ba 95       	dec	r27
 d8e:	c9 f7       	brne	.-14     	; 0xd82 <__ultoa_invert+0xa2>
 d90:	62 0f       	add	r22, r18
 d92:	73 1f       	adc	r23, r19
 d94:	84 1f       	adc	r24, r20
 d96:	95 1f       	adc	r25, r21
 d98:	a0 1d       	adc	r26, r0
 d9a:	08 95       	ret

00000d9c <__prologue_saves__>:
 d9c:	2f 92       	push	r2
 d9e:	3f 92       	push	r3
 da0:	4f 92       	push	r4
 da2:	5f 92       	push	r5
 da4:	6f 92       	push	r6
 da6:	7f 92       	push	r7
 da8:	8f 92       	push	r8
 daa:	9f 92       	push	r9
 dac:	af 92       	push	r10
 dae:	bf 92       	push	r11
 db0:	cf 92       	push	r12
 db2:	df 92       	push	r13
 db4:	ef 92       	push	r14
 db6:	ff 92       	push	r15
 db8:	0f 93       	push	r16
 dba:	1f 93       	push	r17
 dbc:	cf 93       	push	r28
 dbe:	df 93       	push	r29
 dc0:	cd b7       	in	r28, 0x3d	; 61
 dc2:	de b7       	in	r29, 0x3e	; 62
 dc4:	ca 1b       	sub	r28, r26
 dc6:	db 0b       	sbc	r29, r27
 dc8:	0f b6       	in	r0, 0x3f	; 63
 dca:	f8 94       	cli
 dcc:	de bf       	out	0x3e, r29	; 62
 dce:	0f be       	out	0x3f, r0	; 63
 dd0:	cd bf       	out	0x3d, r28	; 61
 dd2:	09 94       	ijmp

00000dd4 <__epilogue_restores__>:
 dd4:	2a 88       	ldd	r2, Y+18	; 0x12
 dd6:	39 88       	ldd	r3, Y+17	; 0x11
 dd8:	48 88       	ldd	r4, Y+16	; 0x10
 dda:	5f 84       	ldd	r5, Y+15	; 0x0f
 ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
 dde:	7d 84       	ldd	r7, Y+13	; 0x0d
 de0:	8c 84       	ldd	r8, Y+12	; 0x0c
 de2:	9b 84       	ldd	r9, Y+11	; 0x0b
 de4:	aa 84       	ldd	r10, Y+10	; 0x0a
 de6:	b9 84       	ldd	r11, Y+9	; 0x09
 de8:	c8 84       	ldd	r12, Y+8	; 0x08
 dea:	df 80       	ldd	r13, Y+7	; 0x07
 dec:	ee 80       	ldd	r14, Y+6	; 0x06
 dee:	fd 80       	ldd	r15, Y+5	; 0x05
 df0:	0c 81       	ldd	r16, Y+4	; 0x04
 df2:	1b 81       	ldd	r17, Y+3	; 0x03
 df4:	aa 81       	ldd	r26, Y+2	; 0x02
 df6:	b9 81       	ldd	r27, Y+1	; 0x01
 df8:	ce 0f       	add	r28, r30
 dfa:	d1 1d       	adc	r29, r1
 dfc:	0f b6       	in	r0, 0x3f	; 63
 dfe:	f8 94       	cli
 e00:	de bf       	out	0x3e, r29	; 62
 e02:	0f be       	out	0x3f, r0	; 63
 e04:	cd bf       	out	0x3d, r28	; 61
 e06:	ed 01       	movw	r28, r26
 e08:	08 95       	ret

00000e0a <_exit>:
 e0a:	f8 94       	cli

00000e0c <__stop_program>:
 e0c:	ff cf       	rjmp	.-2      	; 0xe0c <__stop_program>
