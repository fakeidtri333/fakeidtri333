
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000aaa  00000b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800064  00800064  00000b42  2**0
                  ALLOC
  3 .stab         000011f4  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c2a  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000054 <a>:
  54:	01 02 03 04 05                                      .....

00000059 <LcdCustomChar>:
  59:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  69:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  79:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  89:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
	...

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf e5       	ldi	r28, 0x5F	; 95
  a0:	d4 e0       	ldi	r29, 0x04	; 4
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	a0 e6       	ldi	r26, 0x60	; 96
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ea ea       	ldi	r30, 0xAA	; 170
  ae:	fa e0       	ldi	r31, 0x0A	; 10
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <.do_copy_data_start>

000000b2 <.do_copy_data_loop>:
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0

000000b6 <.do_copy_data_start>:
  b6:	a4 36       	cpi	r26, 0x64	; 100
  b8:	b1 07       	cpc	r27, r17
  ba:	d9 f7       	brne	.-10     	; 0xb2 <.do_copy_data_loop>

000000bc <__do_clear_bss>:
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	a4 e6       	ldi	r26, 0x64	; 100
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	a4 37       	cpi	r26, 0x74	; 116
  c8:	b1 07       	cpc	r27, r17
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  d0:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <main>:

const char  PROGMEM a[5]={1,2,3,4,5};
char b[16];

int main()
{
  d8:	cf 92       	push	r12
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	int i,j=0;
	LCDinit();
  e8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDinit>
	LCDclr();
  ec:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCDclr>
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		i=pgm_read_byte(a+j);
		sprintf(b,"%d",i);
  f4:	04 e6       	ldi	r16, 0x64	; 100
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	90 e6       	ldi	r25, 0x60	; 96
  fa:	c9 2e       	mov	r12, r25
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	d9 2e       	mov	r13, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	e8 2e       	mov	r14, r24
 104:	f1 2c       	mov	r15, r1
	int i,j=0;
	LCDinit();
	LCDclr();
	while(1)
	{
		i=pgm_read_byte(a+j);
 106:	fe 01       	movw	r30, r28
 108:	ec 5a       	subi	r30, 0xAC	; 172
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	84 91       	lpm	r24, Z+
		sprintf(b,"%d",i);
 10e:	00 d0       	rcall	.+0      	; 0x110 <main+0x38>
 110:	00 d0       	rcall	.+0      	; 0x112 <main+0x3a>
 112:	00 d0       	rcall	.+0      	; 0x114 <main+0x3c>
 114:	ed b7       	in	r30, 0x3d	; 61
 116:	fe b7       	in	r31, 0x3e	; 62
 118:	31 96       	adiw	r30, 0x01	; 1
 11a:	ad b7       	in	r26, 0x3d	; 61
 11c:	be b7       	in	r27, 0x3e	; 62
 11e:	12 96       	adiw	r26, 0x02	; 2
 120:	1c 93       	st	X, r17
 122:	0e 93       	st	-X, r16
 124:	11 97       	sbiw	r26, 0x01	; 1
 126:	d3 82       	std	Z+3, r13	; 0x03
 128:	c2 82       	std	Z+2, r12	; 0x02
 12a:	84 83       	std	Z+4, r24	; 0x04
 12c:	15 82       	std	Z+5, r1	; 0x05
 12e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <sprintf>
		LCDGotoXY(0,0);
 132:	8d b7       	in	r24, 0x3d	; 61
 134:	9e b7       	in	r25, 0x3e	; 62
 136:	06 96       	adiw	r24, 0x06	; 6
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	9e bf       	out	0x3e, r25	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	8d bf       	out	0x3d, r24	; 61
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 13 01 	call	0x226	; 0x226 <LCDGotoXY>
		LCDdisplay(b);
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 49 02 	call	0x492	; 0x492 <LCDdisplay>
		j++;
 154:	21 96       	adiw	r28, 0x01	; 1
		if(j>=5)j=0;
 156:	c5 30       	cpi	r28, 0x05	; 5
 158:	d1 05       	cpc	r29, r1
 15a:	14 f0       	brlt	.+4      	; 0x160 <main+0x88>
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	97 e2       	ldi	r25, 0x27	; 39
 164:	f7 01       	movw	r30, r14
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x8e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16c:	d9 f7       	brne	.-10     	; 0x164 <main+0x8c>
 16e:	cb cf       	rjmp	.-106    	; 0x106 <main+0x2e>

00000170 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 170:	28 2f       	mov	r18, r24
 172:	20 7f       	andi	r18, 0xF0	; 240
 174:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
 176:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 178:	aa 9a       	sbi	0x15, 2	; 21
 17a:	28 ee       	ldi	r18, 0xE8	; 232
 17c:	33 e0       	ldi	r19, 0x03	; 3
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 184:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 186:	a8 98       	cbi	0x15, 0	; 21
 188:	f9 01       	movw	r30, r18
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	44 e0       	ldi	r20, 0x04	; 4
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	4a 95       	dec	r20
 198:	e1 f7       	brne	.-8      	; 0x192 <LCDsendChar+0x22>
 19a:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 19c:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 19e:	aa 9a       	sbi	0x15, 2	; 21
 1a0:	c9 01       	movw	r24, r18
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1a6:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 1a8:	a8 98       	cbi	0x15, 0	; 21
 1aa:	c9 01       	movw	r24, r18
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 1b0:	08 95       	ret

000001b2 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 1b2:	28 2f       	mov	r18, r24
 1b4:	20 7f       	andi	r18, 0xF0	; 240
 1b6:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 1b8:	aa 9a       	sbi	0x15, 2	; 21
 1ba:	28 ee       	ldi	r18, 0xE8	; 232
 1bc:	33 e0       	ldi	r19, 0x03	; 3
 1be:	f9 01       	movw	r30, r18
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1c4:	aa 98       	cbi	0x15, 2	; 21
 1c6:	f9 01       	movw	r30, r18
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	54 e0       	ldi	r21, 0x04	; 4
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	5a 95       	dec	r21
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <LCDsendCommand+0x1e>
 1d8:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 1da:	aa 9a       	sbi	0x15, 2	; 21
 1dc:	c9 01       	movw	r24, r18
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1e2:	aa 98       	cbi	0x15, 2	; 21
 1e4:	c9 01       	movw	r24, r18
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 1ea:	08 95       	ret

000001ec <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
}
 1f2:	08 95       	ret

000001f4 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
}
 1fa:	08 95       	ret

000001fc <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	49 f0       	breq	.+18     	; 0x21c <LCDstring+0x20>
 20a:	ec 01       	movw	r28, r24
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	04 c0       	rjmp	.+8      	; 0x218 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 210:	89 91       	ld	r24, Y+
 212:	0e 94 b8 00 	call	0x170	; 0x170 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 216:	1f 5f       	subi	r17, 0xFF	; 255
 218:	10 17       	cp	r17, r16
 21a:	d0 f3       	brcs	.-12     	; 0x210 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 226:	62 30       	cpi	r22, 0x02	; 2
 228:	31 f0       	breq	.+12     	; 0x236 <LCDGotoXY+0x10>
 22a:	63 30       	cpi	r22, 0x03	; 3
 22c:	31 f0       	breq	.+12     	; 0x23a <LCDGotoXY+0x14>
 22e:	61 30       	cpi	r22, 0x01	; 1
 230:	29 f4       	brne	.+10     	; 0x23c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 232:	80 5c       	subi	r24, 0xC0	; 192
 234:	03 c0       	rjmp	.+6      	; 0x23c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 236:	8c 5e       	subi	r24, 0xEC	; 236
 238:	01 c0       	rjmp	.+2      	; 0x23c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 23a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
	
}
 242:	08 95       	ret

00000244 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
 24c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 24e:	64 2f       	mov	r22, r20
 250:	0e 94 13 01 	call	0x226	; 0x226 <LCDGotoXY>
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	03 c0       	rjmp	.+6      	; 0x25e <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 258:	0e 94 b8 00 	call	0x170	; 0x170 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 25c:	1f 5f       	subi	r17, 0xFF	; 255
 25e:	fe 01       	movw	r30, r28
 260:	e1 0f       	add	r30, r17
 262:	f1 1d       	adc	r31, r1
 264:	84 91       	lpm	r24, Z+
 266:	88 23       	and	r24, r24
 268:	b9 f7       	brne	.-18     	; 0x258 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	08 95       	ret

00000272 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	7c 01       	movw	r14, r24
 280:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 282:	11 0f       	add	r17, r17
 284:	11 0f       	add	r17, r17
 286:	11 0f       	add	r17, r17
 288:	10 64       	ori	r17, 0x40	; 64
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 28e:	f7 01       	movw	r30, r14
 290:	ec 0f       	add	r30, r28
 292:	fd 1f       	adc	r31, r29
 294:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 296:	81 2f       	mov	r24, r17
 298:	8c 0f       	add	r24, r28
 29a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
		LCDsendChar(pcc);
 29e:	80 2f       	mov	r24, r16
 2a0:	0e 94 b8 00 	call	0x170	; 0x170 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	c8 30       	cpi	r28, 0x08	; 8
 2a8:	d1 05       	cpc	r29, r1
 2aa:	89 f7       	brne	.-30     	; 0x28e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	ff 90       	pop	r15
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	88 e9       	ldi	r24, 0x98	; 152
 2c2:	9a e3       	ldi	r25, 0x3A	; 58
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 2c8:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 2ca:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 2cc:	84 b3       	in	r24, 0x14	; 20
 2ce:	80 6f       	ori	r24, 0xF0	; 240
 2d0:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 2d2:	84 b3       	in	r24, 0x14	; 20
 2d4:	87 60       	ori	r24, 0x07	; 7
 2d6:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2dc:	aa 9a       	sbi	0x15, 2	; 21
 2de:	28 ee       	ldi	r18, 0xE8	; 232
 2e0:	33 e0       	ldi	r19, 0x03	; 3
 2e2:	f9 01       	movw	r30, r18
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2e8:	aa 98       	cbi	0x15, 2	; 21
 2ea:	f9 01       	movw	r30, r18
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2f0:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2f2:	aa 9a       	sbi	0x15, 2	; 21
 2f4:	c9 01       	movw	r24, r18
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2fa:	aa 98       	cbi	0x15, 2	; 21
 2fc:	c9 01       	movw	r24, r18
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 306:	aa 9a       	sbi	0x15, 2	; 21
 308:	c9 01       	movw	r24, r18
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 30e:	aa 98       	cbi	0x15, 2	; 21
 310:	c9 01       	movw	r24, r18
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 316:	88 e2       	ldi	r24, 0x28	; 40
 318:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 31c:	8c e0       	ldi	r24, 0x0C	; 12
 31e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
 322:	c9 e5       	ldi	r28, 0x59	; 89
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 328:	16 2f       	mov	r17, r22
 32a:	1f 5f       	subi	r17, 0xFF	; 255
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 39 01 	call	0x272	; 0x272 <LCDdefinechar>
 332:	28 96       	adiw	r28, 0x08	; 8
 334:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 336:	18 30       	cpi	r17, 0x08	; 8
 338:	b9 f7       	brne	.-18     	; 0x328 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	08 95       	ret

00000342 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 34e:	08 2f       	mov	r16, r24
 350:	10 e0       	ldi	r17, 0x00	; 0
 352:	04 c0       	rjmp	.+8      	; 0x35c <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 354:	8e e1       	ldi	r24, 0x1E	; 30
 356:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 35a:	21 96       	adiw	r28, 0x01	; 1
 35c:	c0 17       	cp	r28, r16
 35e:	d1 07       	cpc	r29, r17
 360:	cc f3       	brlt	.-14     	; 0x354 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 378:	08 2f       	mov	r16, r24
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	04 c0       	rjmp	.+8      	; 0x386 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 37e:	88 e1       	ldi	r24, 0x18	; 24
 380:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 384:	21 96       	adiw	r28, 0x01	; 1
 386:	c0 17       	cp	r28, r16
 388:	d1 07       	cpc	r29, r17
 38a:	cc f3       	brlt	.-14     	; 0x37e <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 396:	8e e0       	ldi	r24, 0x0E	; 14
 398:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
}
 39c:	08 95       	ret

0000039e <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 39e:	8f e0       	ldi	r24, 0x0F	; 15
 3a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
}
 3a4:	08 95       	ret

000003a6 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 3a6:	8c e0       	ldi	r24, 0x0C	; 12
 3a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
}
 3ac:	08 95       	ret

000003ae <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
}
 3b4:	08 95       	ret

000003b6 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 3b6:	8c e0       	ldi	r24, 0x0C	; 12
 3b8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
}
 3bc:	08 95       	ret

000003be <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 3ca:	08 2f       	mov	r16, r24
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 3d0:	80 e1       	ldi	r24, 0x10	; 16
 3d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 3d6:	21 96       	adiw	r28, 0x01	; 1
 3d8:	c0 17       	cp	r28, r16
 3da:	d1 07       	cpc	r29, r17
 3dc:	cc f3       	brlt	.-14     	; 0x3d0 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 3f4:	08 2f       	mov	r16, r24
 3f6:	10 e0       	ldi	r17, 0x00	; 0
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 3fa:	84 e1       	ldi	r24, 0x14	; 20
 3fc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 400:	21 96       	adiw	r28, 0x01	; 1
 402:	c0 17       	cp	r28, r16
 404:	d1 07       	cpc	r29, r17
 406:	cc f3       	brlt	.-14     	; 0x3fa <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 412:	df 92       	push	r13
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 422:	96 e0       	ldi	r25, 0x06	; 6
 424:	89 9f       	mul	r24, r25
 426:	c0 01       	movw	r24, r0
 428:	11 24       	eor	r1, r1
 42a:	24 2f       	mov	r18, r20
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	ac 01       	movw	r20, r24
 430:	42 9f       	mul	r20, r18
 432:	c0 01       	movw	r24, r0
 434:	43 9f       	mul	r20, r19
 436:	90 0d       	add	r25, r0
 438:	52 9f       	mul	r21, r18
 43a:	90 0d       	add	r25, r0
 43c:	11 24       	eor	r1, r1
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__divmodhi4>
 444:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 446:	cb 01       	movw	r24, r22
 448:	66 e0       	ldi	r22, 0x06	; 6
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__udivmodhi4>
 450:	e8 2e       	mov	r14, r24
 452:	ff 24       	eor	r15, r15
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	12 c0       	rjmp	.+36     	; 0x47e <__stack+0x1f>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 45a:	c8 01       	movw	r24, r16
 45c:	05 96       	adiw	r24, 0x05	; 5
 45e:	c8 17       	cp	r28, r24
 460:	d9 07       	cpc	r29, r25
 462:	10 f0       	brcs	.+4      	; 0x468 <__stack+0x9>
 464:	85 e0       	ldi	r24, 0x05	; 5
 466:	06 c0       	rjmp	.+12     	; 0x474 <__stack+0x15>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 468:	c0 17       	cp	r28, r16
 46a:	d1 07       	cpc	r29, r17
 46c:	10 f0       	brcs	.+4      	; 0x472 <__stack+0x13>
 46e:	8e 2d       	mov	r24, r14
 470:	01 c0       	rjmp	.+2      	; 0x474 <__stack+0x15>
 472:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 474:	0e 94 b8 00 	call	0x170	; 0x170 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 478:	f3 94       	inc	r15
 47a:	0a 5f       	subi	r16, 0xFA	; 250
 47c:	1f 4f       	sbci	r17, 0xFF	; 255
 47e:	fd 14       	cp	r15, r13
 480:	60 f3       	brcs	.-40     	; 0x45a <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	08 95       	ret

00000492 <LCDdisplay>:

void LCDdisplay(char a[])
{
	LCDstring(a,strlen(a));
 492:	dc 01       	movw	r26, r24
 494:	0d 90       	ld	r0, X+
 496:	00 20       	and	r0, r0
 498:	e9 f7       	brne	.-6      	; 0x494 <LCDdisplay+0x2>
 49a:	11 97       	sbiw	r26, 0x01	; 1
 49c:	a8 1b       	sub	r26, r24
 49e:	b9 0b       	sbc	r27, r25
 4a0:	6a 2f       	mov	r22, r26
 4a2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCDstring>
}
 4a6:	08 95       	ret

000004a8 <__udivmodhi4>:
 4a8:	aa 1b       	sub	r26, r26
 4aa:	bb 1b       	sub	r27, r27
 4ac:	51 e1       	ldi	r21, 0x11	; 17
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <__udivmodhi4_ep>

000004b0 <__udivmodhi4_loop>:
 4b0:	aa 1f       	adc	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	a6 17       	cp	r26, r22
 4b6:	b7 07       	cpc	r27, r23
 4b8:	10 f0       	brcs	.+4      	; 0x4be <__udivmodhi4_ep>
 4ba:	a6 1b       	sub	r26, r22
 4bc:	b7 0b       	sbc	r27, r23

000004be <__udivmodhi4_ep>:
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	5a 95       	dec	r21
 4c4:	a9 f7       	brne	.-22     	; 0x4b0 <__udivmodhi4_loop>
 4c6:	80 95       	com	r24
 4c8:	90 95       	com	r25
 4ca:	bc 01       	movw	r22, r24
 4cc:	cd 01       	movw	r24, r26
 4ce:	08 95       	ret

000004d0 <__divmodhi4>:
 4d0:	97 fb       	bst	r25, 7
 4d2:	09 2e       	mov	r0, r25
 4d4:	07 26       	eor	r0, r23
 4d6:	0a d0       	rcall	.+20     	; 0x4ec <__divmodhi4_neg1>
 4d8:	77 fd       	sbrc	r23, 7
 4da:	04 d0       	rcall	.+8      	; 0x4e4 <__divmodhi4_neg2>
 4dc:	e5 df       	rcall	.-54     	; 0x4a8 <__udivmodhi4>
 4de:	06 d0       	rcall	.+12     	; 0x4ec <__divmodhi4_neg1>
 4e0:	00 20       	and	r0, r0
 4e2:	1a f4       	brpl	.+6      	; 0x4ea <__divmodhi4_exit>

000004e4 <__divmodhi4_neg2>:
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255

000004ea <__divmodhi4_exit>:
 4ea:	08 95       	ret

000004ec <__divmodhi4_neg1>:
 4ec:	f6 f7       	brtc	.-4      	; 0x4ea <__divmodhi4_exit>
 4ee:	90 95       	com	r25
 4f0:	81 95       	neg	r24
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <sprintf>:
 4f6:	ae e0       	ldi	r26, 0x0E	; 14
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e1 e8       	ldi	r30, 0x81	; 129
 4fc:	f2 e0       	ldi	r31, 0x02	; 2
 4fe:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__prologue_saves__+0x1c>
 502:	0d 89       	ldd	r16, Y+21	; 0x15
 504:	1e 89       	ldd	r17, Y+22	; 0x16
 506:	86 e0       	ldi	r24, 0x06	; 6
 508:	8c 83       	std	Y+4, r24	; 0x04
 50a:	1a 83       	std	Y+2, r17	; 0x02
 50c:	09 83       	std	Y+1, r16	; 0x01
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	9f e7       	ldi	r25, 0x7F	; 127
 512:	9e 83       	std	Y+6, r25	; 0x06
 514:	8d 83       	std	Y+5, r24	; 0x05
 516:	9e 01       	movw	r18, r28
 518:	27 5e       	subi	r18, 0xE7	; 231
 51a:	3f 4f       	sbci	r19, 0xFF	; 255
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	6f 89       	ldd	r22, Y+23	; 0x17
 522:	78 8d       	ldd	r23, Y+24	; 0x18
 524:	a9 01       	movw	r20, r18
 526:	0e 94 9f 02 	call	0x53e	; 0x53e <vfprintf>
 52a:	2f 81       	ldd	r18, Y+7	; 0x07
 52c:	38 85       	ldd	r19, Y+8	; 0x08
 52e:	02 0f       	add	r16, r18
 530:	13 1f       	adc	r17, r19
 532:	f8 01       	movw	r30, r16
 534:	10 82       	st	Z, r1
 536:	2e 96       	adiw	r28, 0x0e	; 14
 538:	e4 e0       	ldi	r30, 0x04	; 4
 53a:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__epilogue_restores__+0x1c>

0000053e <vfprintf>:
 53e:	ab e0       	ldi	r26, 0x0B	; 11
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e5 ea       	ldi	r30, 0xA5	; 165
 544:	f2 e0       	ldi	r31, 0x02	; 2
 546:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__prologue_saves__>
 54a:	3c 01       	movw	r6, r24
 54c:	2b 01       	movw	r4, r22
 54e:	5a 01       	movw	r10, r20
 550:	fc 01       	movw	r30, r24
 552:	17 82       	std	Z+7, r1	; 0x07
 554:	16 82       	std	Z+6, r1	; 0x06
 556:	83 81       	ldd	r24, Z+3	; 0x03
 558:	81 fd       	sbrc	r24, 1
 55a:	03 c0       	rjmp	.+6      	; 0x562 <vfprintf+0x24>
 55c:	6f ef       	ldi	r22, 0xFF	; 255
 55e:	7f ef       	ldi	r23, 0xFF	; 255
 560:	c6 c1       	rjmp	.+908    	; 0x8ee <vfprintf+0x3b0>
 562:	9a e0       	ldi	r25, 0x0A	; 10
 564:	89 2e       	mov	r8, r25
 566:	1e 01       	movw	r2, r28
 568:	08 94       	sec
 56a:	21 1c       	adc	r2, r1
 56c:	31 1c       	adc	r3, r1
 56e:	f3 01       	movw	r30, r6
 570:	23 81       	ldd	r18, Z+3	; 0x03
 572:	f2 01       	movw	r30, r4
 574:	23 fd       	sbrc	r18, 3
 576:	85 91       	lpm	r24, Z+
 578:	23 ff       	sbrs	r18, 3
 57a:	81 91       	ld	r24, Z+
 57c:	2f 01       	movw	r4, r30
 57e:	88 23       	and	r24, r24
 580:	09 f4       	brne	.+2      	; 0x584 <vfprintf+0x46>
 582:	b2 c1       	rjmp	.+868    	; 0x8e8 <vfprintf+0x3aa>
 584:	85 32       	cpi	r24, 0x25	; 37
 586:	39 f4       	brne	.+14     	; 0x596 <vfprintf+0x58>
 588:	23 fd       	sbrc	r18, 3
 58a:	85 91       	lpm	r24, Z+
 58c:	23 ff       	sbrs	r18, 3
 58e:	81 91       	ld	r24, Z+
 590:	2f 01       	movw	r4, r30
 592:	85 32       	cpi	r24, 0x25	; 37
 594:	29 f4       	brne	.+10     	; 0x5a0 <vfprintf+0x62>
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	b3 01       	movw	r22, r6
 59a:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 59e:	e7 cf       	rjmp	.-50     	; 0x56e <vfprintf+0x30>
 5a0:	98 2f       	mov	r25, r24
 5a2:	ff 24       	eor	r15, r15
 5a4:	ee 24       	eor	r14, r14
 5a6:	99 24       	eor	r9, r9
 5a8:	ff e1       	ldi	r31, 0x1F	; 31
 5aa:	ff 15       	cp	r31, r15
 5ac:	d0 f0       	brcs	.+52     	; 0x5e2 <vfprintf+0xa4>
 5ae:	9b 32       	cpi	r25, 0x2B	; 43
 5b0:	69 f0       	breq	.+26     	; 0x5cc <vfprintf+0x8e>
 5b2:	9c 32       	cpi	r25, 0x2C	; 44
 5b4:	28 f4       	brcc	.+10     	; 0x5c0 <vfprintf+0x82>
 5b6:	90 32       	cpi	r25, 0x20	; 32
 5b8:	59 f0       	breq	.+22     	; 0x5d0 <vfprintf+0x92>
 5ba:	93 32       	cpi	r25, 0x23	; 35
 5bc:	91 f4       	brne	.+36     	; 0x5e2 <vfprintf+0xa4>
 5be:	0e c0       	rjmp	.+28     	; 0x5dc <vfprintf+0x9e>
 5c0:	9d 32       	cpi	r25, 0x2D	; 45
 5c2:	49 f0       	breq	.+18     	; 0x5d6 <vfprintf+0x98>
 5c4:	90 33       	cpi	r25, 0x30	; 48
 5c6:	69 f4       	brne	.+26     	; 0x5e2 <vfprintf+0xa4>
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	24 c0       	rjmp	.+72     	; 0x614 <vfprintf+0xd6>
 5cc:	52 e0       	ldi	r21, 0x02	; 2
 5ce:	f5 2a       	or	r15, r21
 5d0:	84 e0       	ldi	r24, 0x04	; 4
 5d2:	f8 2a       	or	r15, r24
 5d4:	28 c0       	rjmp	.+80     	; 0x626 <vfprintf+0xe8>
 5d6:	98 e0       	ldi	r25, 0x08	; 8
 5d8:	f9 2a       	or	r15, r25
 5da:	25 c0       	rjmp	.+74     	; 0x626 <vfprintf+0xe8>
 5dc:	e0 e1       	ldi	r30, 0x10	; 16
 5de:	fe 2a       	or	r15, r30
 5e0:	22 c0       	rjmp	.+68     	; 0x626 <vfprintf+0xe8>
 5e2:	f7 fc       	sbrc	r15, 7
 5e4:	29 c0       	rjmp	.+82     	; 0x638 <vfprintf+0xfa>
 5e6:	89 2f       	mov	r24, r25
 5e8:	80 53       	subi	r24, 0x30	; 48
 5ea:	8a 30       	cpi	r24, 0x0A	; 10
 5ec:	70 f4       	brcc	.+28     	; 0x60a <vfprintf+0xcc>
 5ee:	f6 fe       	sbrs	r15, 6
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <vfprintf+0xbe>
 5f2:	98 9c       	mul	r9, r8
 5f4:	90 2c       	mov	r9, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	98 0e       	add	r9, r24
 5fa:	15 c0       	rjmp	.+42     	; 0x626 <vfprintf+0xe8>
 5fc:	e8 9c       	mul	r14, r8
 5fe:	e0 2c       	mov	r14, r0
 600:	11 24       	eor	r1, r1
 602:	e8 0e       	add	r14, r24
 604:	f0 e2       	ldi	r31, 0x20	; 32
 606:	ff 2a       	or	r15, r31
 608:	0e c0       	rjmp	.+28     	; 0x626 <vfprintf+0xe8>
 60a:	9e 32       	cpi	r25, 0x2E	; 46
 60c:	29 f4       	brne	.+10     	; 0x618 <vfprintf+0xda>
 60e:	f6 fc       	sbrc	r15, 6
 610:	6b c1       	rjmp	.+726    	; 0x8e8 <vfprintf+0x3aa>
 612:	40 e4       	ldi	r20, 0x40	; 64
 614:	f4 2a       	or	r15, r20
 616:	07 c0       	rjmp	.+14     	; 0x626 <vfprintf+0xe8>
 618:	9c 36       	cpi	r25, 0x6C	; 108
 61a:	19 f4       	brne	.+6      	; 0x622 <vfprintf+0xe4>
 61c:	50 e8       	ldi	r21, 0x80	; 128
 61e:	f5 2a       	or	r15, r21
 620:	02 c0       	rjmp	.+4      	; 0x626 <vfprintf+0xe8>
 622:	98 36       	cpi	r25, 0x68	; 104
 624:	49 f4       	brne	.+18     	; 0x638 <vfprintf+0xfa>
 626:	f2 01       	movw	r30, r4
 628:	23 fd       	sbrc	r18, 3
 62a:	95 91       	lpm	r25, Z+
 62c:	23 ff       	sbrs	r18, 3
 62e:	91 91       	ld	r25, Z+
 630:	2f 01       	movw	r4, r30
 632:	99 23       	and	r25, r25
 634:	09 f0       	breq	.+2      	; 0x638 <vfprintf+0xfa>
 636:	b8 cf       	rjmp	.-144    	; 0x5a8 <vfprintf+0x6a>
 638:	89 2f       	mov	r24, r25
 63a:	85 54       	subi	r24, 0x45	; 69
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	18 f0       	brcs	.+6      	; 0x646 <vfprintf+0x108>
 640:	80 52       	subi	r24, 0x20	; 32
 642:	83 30       	cpi	r24, 0x03	; 3
 644:	38 f4       	brcc	.+14     	; 0x654 <vfprintf+0x116>
 646:	44 e0       	ldi	r20, 0x04	; 4
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	a4 0e       	add	r10, r20
 64c:	b5 1e       	adc	r11, r21
 64e:	5f e3       	ldi	r21, 0x3F	; 63
 650:	59 83       	std	Y+1, r21	; 0x01
 652:	0f c0       	rjmp	.+30     	; 0x672 <vfprintf+0x134>
 654:	93 36       	cpi	r25, 0x63	; 99
 656:	31 f0       	breq	.+12     	; 0x664 <vfprintf+0x126>
 658:	93 37       	cpi	r25, 0x73	; 115
 65a:	79 f0       	breq	.+30     	; 0x67a <vfprintf+0x13c>
 65c:	93 35       	cpi	r25, 0x53	; 83
 65e:	09 f0       	breq	.+2      	; 0x662 <vfprintf+0x124>
 660:	56 c0       	rjmp	.+172    	; 0x70e <vfprintf+0x1d0>
 662:	20 c0       	rjmp	.+64     	; 0x6a4 <vfprintf+0x166>
 664:	f5 01       	movw	r30, r10
 666:	80 81       	ld	r24, Z
 668:	89 83       	std	Y+1, r24	; 0x01
 66a:	42 e0       	ldi	r20, 0x02	; 2
 66c:	50 e0       	ldi	r21, 0x00	; 0
 66e:	a4 0e       	add	r10, r20
 670:	b5 1e       	adc	r11, r21
 672:	61 01       	movw	r12, r2
 674:	01 e0       	ldi	r16, 0x01	; 1
 676:	10 e0       	ldi	r17, 0x00	; 0
 678:	12 c0       	rjmp	.+36     	; 0x69e <vfprintf+0x160>
 67a:	f5 01       	movw	r30, r10
 67c:	c0 80       	ld	r12, Z
 67e:	d1 80       	ldd	r13, Z+1	; 0x01
 680:	f6 fc       	sbrc	r15, 6
 682:	03 c0       	rjmp	.+6      	; 0x68a <vfprintf+0x14c>
 684:	6f ef       	ldi	r22, 0xFF	; 255
 686:	7f ef       	ldi	r23, 0xFF	; 255
 688:	02 c0       	rjmp	.+4      	; 0x68e <vfprintf+0x150>
 68a:	69 2d       	mov	r22, r9
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	42 e0       	ldi	r20, 0x02	; 2
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	a4 0e       	add	r10, r20
 694:	b5 1e       	adc	r11, r21
 696:	c6 01       	movw	r24, r12
 698:	0e 94 87 04 	call	0x90e	; 0x90e <strnlen>
 69c:	8c 01       	movw	r16, r24
 69e:	5f e7       	ldi	r21, 0x7F	; 127
 6a0:	f5 22       	and	r15, r21
 6a2:	14 c0       	rjmp	.+40     	; 0x6cc <vfprintf+0x18e>
 6a4:	f5 01       	movw	r30, r10
 6a6:	c0 80       	ld	r12, Z
 6a8:	d1 80       	ldd	r13, Z+1	; 0x01
 6aa:	f6 fc       	sbrc	r15, 6
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <vfprintf+0x176>
 6ae:	6f ef       	ldi	r22, 0xFF	; 255
 6b0:	7f ef       	ldi	r23, 0xFF	; 255
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <vfprintf+0x17a>
 6b4:	69 2d       	mov	r22, r9
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	42 e0       	ldi	r20, 0x02	; 2
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	a4 0e       	add	r10, r20
 6be:	b5 1e       	adc	r11, r21
 6c0:	c6 01       	movw	r24, r12
 6c2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <strnlen_P>
 6c6:	8c 01       	movw	r16, r24
 6c8:	50 e8       	ldi	r21, 0x80	; 128
 6ca:	f5 2a       	or	r15, r21
 6cc:	f3 fe       	sbrs	r15, 3
 6ce:	07 c0       	rjmp	.+14     	; 0x6de <vfprintf+0x1a0>
 6d0:	1a c0       	rjmp	.+52     	; 0x706 <vfprintf+0x1c8>
 6d2:	80 e2       	ldi	r24, 0x20	; 32
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	b3 01       	movw	r22, r6
 6d8:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 6dc:	ea 94       	dec	r14
 6de:	8e 2d       	mov	r24, r14
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	08 17       	cp	r16, r24
 6e4:	19 07       	cpc	r17, r25
 6e6:	a8 f3       	brcs	.-22     	; 0x6d2 <vfprintf+0x194>
 6e8:	0e c0       	rjmp	.+28     	; 0x706 <vfprintf+0x1c8>
 6ea:	f6 01       	movw	r30, r12
 6ec:	f7 fc       	sbrc	r15, 7
 6ee:	85 91       	lpm	r24, Z+
 6f0:	f7 fe       	sbrs	r15, 7
 6f2:	81 91       	ld	r24, Z+
 6f4:	6f 01       	movw	r12, r30
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	b3 01       	movw	r22, r6
 6fa:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 6fe:	e1 10       	cpse	r14, r1
 700:	ea 94       	dec	r14
 702:	01 50       	subi	r16, 0x01	; 1
 704:	10 40       	sbci	r17, 0x00	; 0
 706:	01 15       	cp	r16, r1
 708:	11 05       	cpc	r17, r1
 70a:	79 f7       	brne	.-34     	; 0x6ea <vfprintf+0x1ac>
 70c:	ea c0       	rjmp	.+468    	; 0x8e2 <vfprintf+0x3a4>
 70e:	94 36       	cpi	r25, 0x64	; 100
 710:	11 f0       	breq	.+4      	; 0x716 <vfprintf+0x1d8>
 712:	99 36       	cpi	r25, 0x69	; 105
 714:	69 f5       	brne	.+90     	; 0x770 <vfprintf+0x232>
 716:	f7 fe       	sbrs	r15, 7
 718:	08 c0       	rjmp	.+16     	; 0x72a <vfprintf+0x1ec>
 71a:	f5 01       	movw	r30, r10
 71c:	20 81       	ld	r18, Z
 71e:	31 81       	ldd	r19, Z+1	; 0x01
 720:	42 81       	ldd	r20, Z+2	; 0x02
 722:	53 81       	ldd	r21, Z+3	; 0x03
 724:	84 e0       	ldi	r24, 0x04	; 4
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0a c0       	rjmp	.+20     	; 0x73e <vfprintf+0x200>
 72a:	f5 01       	movw	r30, r10
 72c:	80 81       	ld	r24, Z
 72e:	91 81       	ldd	r25, Z+1	; 0x01
 730:	9c 01       	movw	r18, r24
 732:	44 27       	eor	r20, r20
 734:	37 fd       	sbrc	r19, 7
 736:	40 95       	com	r20
 738:	54 2f       	mov	r21, r20
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	a8 0e       	add	r10, r24
 740:	b9 1e       	adc	r11, r25
 742:	9f e6       	ldi	r25, 0x6F	; 111
 744:	f9 22       	and	r15, r25
 746:	57 ff       	sbrs	r21, 7
 748:	09 c0       	rjmp	.+18     	; 0x75c <vfprintf+0x21e>
 74a:	50 95       	com	r21
 74c:	40 95       	com	r20
 74e:	30 95       	com	r19
 750:	21 95       	neg	r18
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	4f 4f       	sbci	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	e0 e8       	ldi	r30, 0x80	; 128
 75a:	fe 2a       	or	r15, r30
 75c:	ca 01       	movw	r24, r20
 75e:	b9 01       	movw	r22, r18
 760:	a1 01       	movw	r20, r2
 762:	2a e0       	ldi	r18, 0x0A	; 10
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	0e 94 be 04 	call	0x97c	; 0x97c <__ultoa_invert>
 76a:	d8 2e       	mov	r13, r24
 76c:	d2 18       	sub	r13, r2
 76e:	40 c0       	rjmp	.+128    	; 0x7f0 <vfprintf+0x2b2>
 770:	95 37       	cpi	r25, 0x75	; 117
 772:	29 f4       	brne	.+10     	; 0x77e <vfprintf+0x240>
 774:	1f 2d       	mov	r17, r15
 776:	1f 7e       	andi	r17, 0xEF	; 239
 778:	2a e0       	ldi	r18, 0x0A	; 10
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	1d c0       	rjmp	.+58     	; 0x7b8 <vfprintf+0x27a>
 77e:	1f 2d       	mov	r17, r15
 780:	19 7f       	andi	r17, 0xF9	; 249
 782:	9f 36       	cpi	r25, 0x6F	; 111
 784:	61 f0       	breq	.+24     	; 0x79e <vfprintf+0x260>
 786:	90 37       	cpi	r25, 0x70	; 112
 788:	20 f4       	brcc	.+8      	; 0x792 <vfprintf+0x254>
 78a:	98 35       	cpi	r25, 0x58	; 88
 78c:	09 f0       	breq	.+2      	; 0x790 <vfprintf+0x252>
 78e:	ac c0       	rjmp	.+344    	; 0x8e8 <vfprintf+0x3aa>
 790:	0f c0       	rjmp	.+30     	; 0x7b0 <vfprintf+0x272>
 792:	90 37       	cpi	r25, 0x70	; 112
 794:	39 f0       	breq	.+14     	; 0x7a4 <vfprintf+0x266>
 796:	98 37       	cpi	r25, 0x78	; 120
 798:	09 f0       	breq	.+2      	; 0x79c <vfprintf+0x25e>
 79a:	a6 c0       	rjmp	.+332    	; 0x8e8 <vfprintf+0x3aa>
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <vfprintf+0x268>
 79e:	28 e0       	ldi	r18, 0x08	; 8
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	0a c0       	rjmp	.+20     	; 0x7b8 <vfprintf+0x27a>
 7a4:	10 61       	ori	r17, 0x10	; 16
 7a6:	14 fd       	sbrc	r17, 4
 7a8:	14 60       	ori	r17, 0x04	; 4
 7aa:	20 e1       	ldi	r18, 0x10	; 16
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <vfprintf+0x27a>
 7b0:	14 fd       	sbrc	r17, 4
 7b2:	16 60       	ori	r17, 0x06	; 6
 7b4:	20 e1       	ldi	r18, 0x10	; 16
 7b6:	32 e0       	ldi	r19, 0x02	; 2
 7b8:	17 ff       	sbrs	r17, 7
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <vfprintf+0x28e>
 7bc:	f5 01       	movw	r30, r10
 7be:	60 81       	ld	r22, Z
 7c0:	71 81       	ldd	r23, Z+1	; 0x01
 7c2:	82 81       	ldd	r24, Z+2	; 0x02
 7c4:	93 81       	ldd	r25, Z+3	; 0x03
 7c6:	44 e0       	ldi	r20, 0x04	; 4
 7c8:	50 e0       	ldi	r21, 0x00	; 0
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <vfprintf+0x29e>
 7cc:	f5 01       	movw	r30, r10
 7ce:	80 81       	ld	r24, Z
 7d0:	91 81       	ldd	r25, Z+1	; 0x01
 7d2:	bc 01       	movw	r22, r24
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	42 e0       	ldi	r20, 0x02	; 2
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	a4 0e       	add	r10, r20
 7de:	b5 1e       	adc	r11, r21
 7e0:	a1 01       	movw	r20, r2
 7e2:	0e 94 be 04 	call	0x97c	; 0x97c <__ultoa_invert>
 7e6:	d8 2e       	mov	r13, r24
 7e8:	d2 18       	sub	r13, r2
 7ea:	8f e7       	ldi	r24, 0x7F	; 127
 7ec:	f8 2e       	mov	r15, r24
 7ee:	f1 22       	and	r15, r17
 7f0:	f6 fe       	sbrs	r15, 6
 7f2:	0b c0       	rjmp	.+22     	; 0x80a <vfprintf+0x2cc>
 7f4:	5e ef       	ldi	r21, 0xFE	; 254
 7f6:	f5 22       	and	r15, r21
 7f8:	d9 14       	cp	r13, r9
 7fa:	38 f4       	brcc	.+14     	; 0x80a <vfprintf+0x2cc>
 7fc:	f4 fe       	sbrs	r15, 4
 7fe:	07 c0       	rjmp	.+14     	; 0x80e <vfprintf+0x2d0>
 800:	f2 fc       	sbrc	r15, 2
 802:	05 c0       	rjmp	.+10     	; 0x80e <vfprintf+0x2d0>
 804:	8f ee       	ldi	r24, 0xEF	; 239
 806:	f8 22       	and	r15, r24
 808:	02 c0       	rjmp	.+4      	; 0x80e <vfprintf+0x2d0>
 80a:	1d 2d       	mov	r17, r13
 80c:	01 c0       	rjmp	.+2      	; 0x810 <vfprintf+0x2d2>
 80e:	19 2d       	mov	r17, r9
 810:	f4 fe       	sbrs	r15, 4
 812:	0d c0       	rjmp	.+26     	; 0x82e <vfprintf+0x2f0>
 814:	fe 01       	movw	r30, r28
 816:	ed 0d       	add	r30, r13
 818:	f1 1d       	adc	r31, r1
 81a:	80 81       	ld	r24, Z
 81c:	80 33       	cpi	r24, 0x30	; 48
 81e:	19 f4       	brne	.+6      	; 0x826 <vfprintf+0x2e8>
 820:	99 ee       	ldi	r25, 0xE9	; 233
 822:	f9 22       	and	r15, r25
 824:	08 c0       	rjmp	.+16     	; 0x836 <vfprintf+0x2f8>
 826:	1f 5f       	subi	r17, 0xFF	; 255
 828:	f2 fe       	sbrs	r15, 2
 82a:	05 c0       	rjmp	.+10     	; 0x836 <vfprintf+0x2f8>
 82c:	03 c0       	rjmp	.+6      	; 0x834 <vfprintf+0x2f6>
 82e:	8f 2d       	mov	r24, r15
 830:	86 78       	andi	r24, 0x86	; 134
 832:	09 f0       	breq	.+2      	; 0x836 <vfprintf+0x2f8>
 834:	1f 5f       	subi	r17, 0xFF	; 255
 836:	0f 2d       	mov	r16, r15
 838:	f3 fc       	sbrc	r15, 3
 83a:	14 c0       	rjmp	.+40     	; 0x864 <vfprintf+0x326>
 83c:	f0 fe       	sbrs	r15, 0
 83e:	0f c0       	rjmp	.+30     	; 0x85e <vfprintf+0x320>
 840:	1e 15       	cp	r17, r14
 842:	10 f0       	brcs	.+4      	; 0x848 <vfprintf+0x30a>
 844:	9d 2c       	mov	r9, r13
 846:	0b c0       	rjmp	.+22     	; 0x85e <vfprintf+0x320>
 848:	9d 2c       	mov	r9, r13
 84a:	9e 0c       	add	r9, r14
 84c:	91 1a       	sub	r9, r17
 84e:	1e 2d       	mov	r17, r14
 850:	06 c0       	rjmp	.+12     	; 0x85e <vfprintf+0x320>
 852:	80 e2       	ldi	r24, 0x20	; 32
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	b3 01       	movw	r22, r6
 858:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 85c:	1f 5f       	subi	r17, 0xFF	; 255
 85e:	1e 15       	cp	r17, r14
 860:	c0 f3       	brcs	.-16     	; 0x852 <vfprintf+0x314>
 862:	04 c0       	rjmp	.+8      	; 0x86c <vfprintf+0x32e>
 864:	1e 15       	cp	r17, r14
 866:	10 f4       	brcc	.+4      	; 0x86c <vfprintf+0x32e>
 868:	e1 1a       	sub	r14, r17
 86a:	01 c0       	rjmp	.+2      	; 0x86e <vfprintf+0x330>
 86c:	ee 24       	eor	r14, r14
 86e:	04 ff       	sbrs	r16, 4
 870:	0f c0       	rjmp	.+30     	; 0x890 <vfprintf+0x352>
 872:	80 e3       	ldi	r24, 0x30	; 48
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	b3 01       	movw	r22, r6
 878:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 87c:	02 ff       	sbrs	r16, 2
 87e:	1d c0       	rjmp	.+58     	; 0x8ba <vfprintf+0x37c>
 880:	01 fd       	sbrc	r16, 1
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x34c>
 884:	88 e7       	ldi	r24, 0x78	; 120
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e c0       	rjmp	.+28     	; 0x8a6 <vfprintf+0x368>
 88a:	88 e5       	ldi	r24, 0x58	; 88
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0b c0       	rjmp	.+22     	; 0x8a6 <vfprintf+0x368>
 890:	80 2f       	mov	r24, r16
 892:	86 78       	andi	r24, 0x86	; 134
 894:	91 f0       	breq	.+36     	; 0x8ba <vfprintf+0x37c>
 896:	01 ff       	sbrs	r16, 1
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x360>
 89a:	8b e2       	ldi	r24, 0x2B	; 43
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <vfprintf+0x362>
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	f7 fc       	sbrc	r15, 7
 8a2:	8d e2       	ldi	r24, 0x2D	; 45
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	b3 01       	movw	r22, r6
 8a8:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <vfprintf+0x37c>
 8ae:	80 e3       	ldi	r24, 0x30	; 48
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	b3 01       	movw	r22, r6
 8b4:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 8b8:	9a 94       	dec	r9
 8ba:	d9 14       	cp	r13, r9
 8bc:	c0 f3       	brcs	.-16     	; 0x8ae <vfprintf+0x370>
 8be:	da 94       	dec	r13
 8c0:	f1 01       	movw	r30, r2
 8c2:	ed 0d       	add	r30, r13
 8c4:	f1 1d       	adc	r31, r1
 8c6:	80 81       	ld	r24, Z
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	b3 01       	movw	r22, r6
 8cc:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 8d0:	dd 20       	and	r13, r13
 8d2:	a9 f7       	brne	.-22     	; 0x8be <vfprintf+0x380>
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <vfprintf+0x3a4>
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	b3 01       	movw	r22, r6
 8dc:	0e 94 92 04 	call	0x924	; 0x924 <fputc>
 8e0:	ea 94       	dec	r14
 8e2:	ee 20       	and	r14, r14
 8e4:	c1 f7       	brne	.-16     	; 0x8d6 <vfprintf+0x398>
 8e6:	43 ce       	rjmp	.-890    	; 0x56e <vfprintf+0x30>
 8e8:	f3 01       	movw	r30, r6
 8ea:	66 81       	ldd	r22, Z+6	; 0x06
 8ec:	77 81       	ldd	r23, Z+7	; 0x07
 8ee:	cb 01       	movw	r24, r22
 8f0:	2b 96       	adiw	r28, 0x0b	; 11
 8f2:	e2 e1       	ldi	r30, 0x12	; 18
 8f4:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__epilogue_restores__>

000008f8 <strnlen_P>:
 8f8:	fc 01       	movw	r30, r24
 8fa:	05 90       	lpm	r0, Z+
 8fc:	61 50       	subi	r22, 0x01	; 1
 8fe:	70 40       	sbci	r23, 0x00	; 0
 900:	01 10       	cpse	r0, r1
 902:	d8 f7       	brcc	.-10     	; 0x8fa <strnlen_P+0x2>
 904:	80 95       	com	r24
 906:	90 95       	com	r25
 908:	8e 0f       	add	r24, r30
 90a:	9f 1f       	adc	r25, r31
 90c:	08 95       	ret

0000090e <strnlen>:
 90e:	fc 01       	movw	r30, r24
 910:	61 50       	subi	r22, 0x01	; 1
 912:	70 40       	sbci	r23, 0x00	; 0
 914:	01 90       	ld	r0, Z+
 916:	01 10       	cpse	r0, r1
 918:	d8 f7       	brcc	.-10     	; 0x910 <strnlen+0x2>
 91a:	80 95       	com	r24
 91c:	90 95       	com	r25
 91e:	8e 0f       	add	r24, r30
 920:	9f 1f       	adc	r25, r31
 922:	08 95       	ret

00000924 <fputc>:
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	8c 01       	movw	r16, r24
 92e:	eb 01       	movw	r28, r22
 930:	8b 81       	ldd	r24, Y+3	; 0x03
 932:	81 ff       	sbrs	r24, 1
 934:	1b c0       	rjmp	.+54     	; 0x96c <fputc+0x48>
 936:	82 ff       	sbrs	r24, 2
 938:	0d c0       	rjmp	.+26     	; 0x954 <fputc+0x30>
 93a:	2e 81       	ldd	r18, Y+6	; 0x06
 93c:	3f 81       	ldd	r19, Y+7	; 0x07
 93e:	8c 81       	ldd	r24, Y+4	; 0x04
 940:	9d 81       	ldd	r25, Y+5	; 0x05
 942:	28 17       	cp	r18, r24
 944:	39 07       	cpc	r19, r25
 946:	64 f4       	brge	.+24     	; 0x960 <fputc+0x3c>
 948:	e8 81       	ld	r30, Y
 94a:	f9 81       	ldd	r31, Y+1	; 0x01
 94c:	01 93       	st	Z+, r16
 94e:	f9 83       	std	Y+1, r31	; 0x01
 950:	e8 83       	st	Y, r30
 952:	06 c0       	rjmp	.+12     	; 0x960 <fputc+0x3c>
 954:	e8 85       	ldd	r30, Y+8	; 0x08
 956:	f9 85       	ldd	r31, Y+9	; 0x09
 958:	80 2f       	mov	r24, r16
 95a:	09 95       	icall
 95c:	89 2b       	or	r24, r25
 95e:	31 f4       	brne	.+12     	; 0x96c <fputc+0x48>
 960:	8e 81       	ldd	r24, Y+6	; 0x06
 962:	9f 81       	ldd	r25, Y+7	; 0x07
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	9f 83       	std	Y+7, r25	; 0x07
 968:	8e 83       	std	Y+6, r24	; 0x06
 96a:	02 c0       	rjmp	.+4      	; 0x970 <fputc+0x4c>
 96c:	0f ef       	ldi	r16, 0xFF	; 255
 96e:	1f ef       	ldi	r17, 0xFF	; 255
 970:	c8 01       	movw	r24, r16
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	08 95       	ret

0000097c <__ultoa_invert>:
 97c:	fa 01       	movw	r30, r20
 97e:	aa 27       	eor	r26, r26
 980:	28 30       	cpi	r18, 0x08	; 8
 982:	51 f1       	breq	.+84     	; 0x9d8 <__ultoa_invert+0x5c>
 984:	20 31       	cpi	r18, 0x10	; 16
 986:	81 f1       	breq	.+96     	; 0x9e8 <__ultoa_invert+0x6c>
 988:	e8 94       	clt
 98a:	6f 93       	push	r22
 98c:	6e 7f       	andi	r22, 0xFE	; 254
 98e:	6e 5f       	subi	r22, 0xFE	; 254
 990:	7f 4f       	sbci	r23, 0xFF	; 255
 992:	8f 4f       	sbci	r24, 0xFF	; 255
 994:	9f 4f       	sbci	r25, 0xFF	; 255
 996:	af 4f       	sbci	r26, 0xFF	; 255
 998:	b1 e0       	ldi	r27, 0x01	; 1
 99a:	3e d0       	rcall	.+124    	; 0xa18 <__ultoa_invert+0x9c>
 99c:	b4 e0       	ldi	r27, 0x04	; 4
 99e:	3c d0       	rcall	.+120    	; 0xa18 <__ultoa_invert+0x9c>
 9a0:	67 0f       	add	r22, r23
 9a2:	78 1f       	adc	r23, r24
 9a4:	89 1f       	adc	r24, r25
 9a6:	9a 1f       	adc	r25, r26
 9a8:	a1 1d       	adc	r26, r1
 9aa:	68 0f       	add	r22, r24
 9ac:	79 1f       	adc	r23, r25
 9ae:	8a 1f       	adc	r24, r26
 9b0:	91 1d       	adc	r25, r1
 9b2:	a1 1d       	adc	r26, r1
 9b4:	6a 0f       	add	r22, r26
 9b6:	71 1d       	adc	r23, r1
 9b8:	81 1d       	adc	r24, r1
 9ba:	91 1d       	adc	r25, r1
 9bc:	a1 1d       	adc	r26, r1
 9be:	20 d0       	rcall	.+64     	; 0xa00 <__ultoa_invert+0x84>
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <__ultoa_invert+0x48>
 9c2:	68 94       	set
 9c4:	3f 91       	pop	r19
 9c6:	2a e0       	ldi	r18, 0x0A	; 10
 9c8:	26 9f       	mul	r18, r22
 9ca:	11 24       	eor	r1, r1
 9cc:	30 19       	sub	r19, r0
 9ce:	30 5d       	subi	r19, 0xD0	; 208
 9d0:	31 93       	st	Z+, r19
 9d2:	de f6       	brtc	.-74     	; 0x98a <__ultoa_invert+0xe>
 9d4:	cf 01       	movw	r24, r30
 9d6:	08 95       	ret
 9d8:	46 2f       	mov	r20, r22
 9da:	47 70       	andi	r20, 0x07	; 7
 9dc:	40 5d       	subi	r20, 0xD0	; 208
 9de:	41 93       	st	Z+, r20
 9e0:	b3 e0       	ldi	r27, 0x03	; 3
 9e2:	0f d0       	rcall	.+30     	; 0xa02 <__ultoa_invert+0x86>
 9e4:	c9 f7       	brne	.-14     	; 0x9d8 <__ultoa_invert+0x5c>
 9e6:	f6 cf       	rjmp	.-20     	; 0x9d4 <__ultoa_invert+0x58>
 9e8:	46 2f       	mov	r20, r22
 9ea:	4f 70       	andi	r20, 0x0F	; 15
 9ec:	40 5d       	subi	r20, 0xD0	; 208
 9ee:	4a 33       	cpi	r20, 0x3A	; 58
 9f0:	18 f0       	brcs	.+6      	; 0x9f8 <__ultoa_invert+0x7c>
 9f2:	49 5d       	subi	r20, 0xD9	; 217
 9f4:	31 fd       	sbrc	r19, 1
 9f6:	40 52       	subi	r20, 0x20	; 32
 9f8:	41 93       	st	Z+, r20
 9fa:	02 d0       	rcall	.+4      	; 0xa00 <__ultoa_invert+0x84>
 9fc:	a9 f7       	brne	.-22     	; 0x9e8 <__ultoa_invert+0x6c>
 9fe:	ea cf       	rjmp	.-44     	; 0x9d4 <__ultoa_invert+0x58>
 a00:	b4 e0       	ldi	r27, 0x04	; 4
 a02:	a6 95       	lsr	r26
 a04:	97 95       	ror	r25
 a06:	87 95       	ror	r24
 a08:	77 95       	ror	r23
 a0a:	67 95       	ror	r22
 a0c:	ba 95       	dec	r27
 a0e:	c9 f7       	brne	.-14     	; 0xa02 <__ultoa_invert+0x86>
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	61 05       	cpc	r22, r1
 a14:	71 05       	cpc	r23, r1
 a16:	08 95       	ret
 a18:	9b 01       	movw	r18, r22
 a1a:	ac 01       	movw	r20, r24
 a1c:	0a 2e       	mov	r0, r26
 a1e:	06 94       	lsr	r0
 a20:	57 95       	ror	r21
 a22:	47 95       	ror	r20
 a24:	37 95       	ror	r19
 a26:	27 95       	ror	r18
 a28:	ba 95       	dec	r27
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__ultoa_invert+0xa2>
 a2c:	62 0f       	add	r22, r18
 a2e:	73 1f       	adc	r23, r19
 a30:	84 1f       	adc	r24, r20
 a32:	95 1f       	adc	r25, r21
 a34:	a0 1d       	adc	r26, r0
 a36:	08 95       	ret

00000a38 <__prologue_saves__>:
 a38:	2f 92       	push	r2
 a3a:	3f 92       	push	r3
 a3c:	4f 92       	push	r4
 a3e:	5f 92       	push	r5
 a40:	6f 92       	push	r6
 a42:	7f 92       	push	r7
 a44:	8f 92       	push	r8
 a46:	9f 92       	push	r9
 a48:	af 92       	push	r10
 a4a:	bf 92       	push	r11
 a4c:	cf 92       	push	r12
 a4e:	df 92       	push	r13
 a50:	ef 92       	push	r14
 a52:	ff 92       	push	r15
 a54:	0f 93       	push	r16
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	cd b7       	in	r28, 0x3d	; 61
 a5e:	de b7       	in	r29, 0x3e	; 62
 a60:	ca 1b       	sub	r28, r26
 a62:	db 0b       	sbc	r29, r27
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	f8 94       	cli
 a68:	de bf       	out	0x3e, r29	; 62
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	cd bf       	out	0x3d, r28	; 61
 a6e:	09 94       	ijmp

00000a70 <__epilogue_restores__>:
 a70:	2a 88       	ldd	r2, Y+18	; 0x12
 a72:	39 88       	ldd	r3, Y+17	; 0x11
 a74:	48 88       	ldd	r4, Y+16	; 0x10
 a76:	5f 84       	ldd	r5, Y+15	; 0x0f
 a78:	6e 84       	ldd	r6, Y+14	; 0x0e
 a7a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a7c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a7e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a80:	aa 84       	ldd	r10, Y+10	; 0x0a
 a82:	b9 84       	ldd	r11, Y+9	; 0x09
 a84:	c8 84       	ldd	r12, Y+8	; 0x08
 a86:	df 80       	ldd	r13, Y+7	; 0x07
 a88:	ee 80       	ldd	r14, Y+6	; 0x06
 a8a:	fd 80       	ldd	r15, Y+5	; 0x05
 a8c:	0c 81       	ldd	r16, Y+4	; 0x04
 a8e:	1b 81       	ldd	r17, Y+3	; 0x03
 a90:	aa 81       	ldd	r26, Y+2	; 0x02
 a92:	b9 81       	ldd	r27, Y+1	; 0x01
 a94:	ce 0f       	add	r28, r30
 a96:	d1 1d       	adc	r29, r1
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	f8 94       	cli
 a9c:	de bf       	out	0x3e, r29	; 62
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	cd bf       	out	0x3d, r28	; 61
 aa2:	ed 01       	movw	r28, r26
 aa4:	08 95       	ret

00000aa6 <_exit>:
 aa6:	f8 94       	cli

00000aa8 <__stop_program>:
 aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <__stop_program>
