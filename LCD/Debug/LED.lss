
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000474  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000108c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b6a  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e4 e7       	ldi	r30, 0x74	; 116
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	a6 36       	cpi	r26, 0x66	; 102
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  ba:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "lcd_lib.h"
int main(void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
LCDinit();
  c6:	0e 94 1a 01 	call	0x234	; 0x234 <LCDinit>
LCDclr();
  ca:	0e 94 b3 00 	call	0x166	; 0x166 <LCDclr>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	c0 e1       	ldi	r28, 0x10	; 16
  d0:	d7 e2       	ldi	r29, 0x27	; 39
while (1)
     {
      LCDGotoXY(5,0);
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCDGotoXY>
      LCDdisplay("BRiCS");
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 06 02 	call	0x40c	; 0x40c <LCDdisplay>
  e2:	ce 01       	movw	r24, r28
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x22>
  e8:	f4 cf       	rjmp	.-24     	; 0xd2 <main+0x10>

000000ea <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
  ea:	28 2f       	mov	r18, r24
  ec:	20 7f       	andi	r18, 0xF0	; 240
  ee:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
  f0:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	28 ee       	ldi	r18, 0xE8	; 232
  f6:	33 e0       	ldi	r19, 0x03	; 3
  f8:	f9 01       	movw	r30, r18
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
  fe:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 100:	a8 98       	cbi	0x15, 0	; 21
 102:	f9 01       	movw	r30, r18
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	44 e0       	ldi	r20, 0x04	; 4
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	4a 95       	dec	r20
 112:	e1 f7       	brne	.-8      	; 0x10c <LCDsendChar+0x22>
 114:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 116:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 118:	aa 9a       	sbi	0x15, 2	; 21
 11a:	c9 01       	movw	r24, r18
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 120:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 122:	a8 98       	cbi	0x15, 0	; 21
 124:	c9 01       	movw	r24, r18
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 12a:	08 95       	ret

0000012c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 12c:	28 2f       	mov	r18, r24
 12e:	20 7f       	andi	r18, 0xF0	; 240
 130:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 132:	aa 9a       	sbi	0x15, 2	; 21
 134:	28 ee       	ldi	r18, 0xE8	; 232
 136:	33 e0       	ldi	r19, 0x03	; 3
 138:	f9 01       	movw	r30, r18
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 13e:	aa 98       	cbi	0x15, 2	; 21
 140:	f9 01       	movw	r30, r18
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	54 e0       	ldi	r21, 0x04	; 4
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	5a 95       	dec	r21
 150:	e1 f7       	brne	.-8      	; 0x14a <LCDsendCommand+0x1e>
 152:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 154:	aa 9a       	sbi	0x15, 2	; 21
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 15c:	aa 98       	cbi	0x15, 2	; 21
 15e:	c9 01       	movw	r24, r18
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 164:	08 95       	ret

00000166 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
}
 16c:	08 95       	ret

0000016e <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
}
 174:	08 95       	ret

00000176 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	49 f0       	breq	.+18     	; 0x196 <LCDstring+0x20>
 184:	ec 01       	movw	r28, r24
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	04 c0       	rjmp	.+8      	; 0x192 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 18a:	89 91       	ld	r24, Y+
 18c:	0e 94 75 00 	call	0xea	; 0xea <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 190:	1f 5f       	subi	r17, 0xFF	; 255
 192:	10 17       	cp	r17, r16
 194:	d0 f3       	brcs	.-12     	; 0x18a <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1a0:	62 30       	cpi	r22, 0x02	; 2
 1a2:	31 f0       	breq	.+12     	; 0x1b0 <LCDGotoXY+0x10>
 1a4:	63 30       	cpi	r22, 0x03	; 3
 1a6:	31 f0       	breq	.+12     	; 0x1b4 <LCDGotoXY+0x14>
 1a8:	61 30       	cpi	r22, 0x01	; 1
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1ac:	80 5c       	subi	r24, 0xC0	; 192
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1b0:	8c 5e       	subi	r24, 0xEC	; 236
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1b4:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
	
}
 1bc:	08 95       	ret

000001be <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ec 01       	movw	r28, r24
 1c6:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 1c8:	64 2f       	mov	r22, r20
 1ca:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCDGotoXY>
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 1d2:	0e 94 75 00 	call	0xea	; 0xea <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 1d6:	1f 5f       	subi	r17, 0xFF	; 255
 1d8:	fe 01       	movw	r30, r28
 1da:	e1 0f       	add	r30, r17
 1dc:	f1 1d       	adc	r31, r1
 1de:	84 91       	lpm	r24, Z+
 1e0:	88 23       	and	r24, r24
 1e2:	b9 f7       	brne	.-18     	; 0x1d2 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	08 95       	ret

000001ec <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	7c 01       	movw	r14, r24
 1fa:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1fc:	11 0f       	add	r17, r17
 1fe:	11 0f       	add	r17, r17
 200:	11 0f       	add	r17, r17
 202:	10 64       	ori	r17, 0x40	; 64
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 208:	f7 01       	movw	r30, r14
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 210:	81 2f       	mov	r24, r17
 212:	8c 0f       	add	r24, r28
 214:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
		LCDsendChar(pcc);
 218:	80 2f       	mov	r24, r16
 21a:	0e 94 75 00 	call	0xea	; 0xea <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 21e:	21 96       	adiw	r28, 0x01	; 1
 220:	c8 30       	cpi	r28, 0x08	; 8
 222:	d1 05       	cpc	r29, r1
 224:	89 f7       	brne	.-30     	; 0x208 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	88 e9       	ldi	r24, 0x98	; 152
 23c:	9a e3       	ldi	r25, 0x3A	; 58
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 242:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 244:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 246:	84 b3       	in	r24, 0x14	; 20
 248:	80 6f       	ori	r24, 0xF0	; 240
 24a:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 24c:	84 b3       	in	r24, 0x14	; 20
 24e:	87 60       	ori	r24, 0x07	; 7
 250:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 256:	aa 9a       	sbi	0x15, 2	; 21
 258:	28 ee       	ldi	r18, 0xE8	; 232
 25a:	33 e0       	ldi	r19, 0x03	; 3
 25c:	f9 01       	movw	r30, r18
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 262:	aa 98       	cbi	0x15, 2	; 21
 264:	f9 01       	movw	r30, r18
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 26a:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 26c:	aa 9a       	sbi	0x15, 2	; 21
 26e:	c9 01       	movw	r24, r18
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 274:	aa 98       	cbi	0x15, 2	; 21
 276:	c9 01       	movw	r24, r18
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 280:	aa 9a       	sbi	0x15, 2	; 21
 282:	c9 01       	movw	r24, r18
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 288:	aa 98       	cbi	0x15, 2	; 21
 28a:	c9 01       	movw	r24, r18
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 290:	88 e2       	ldi	r24, 0x28	; 40
 292:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 296:	8c e0       	ldi	r24, 0x0C	; 12
 298:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
 29c:	c4 e5       	ldi	r28, 0x54	; 84
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2a2:	16 2f       	mov	r17, r22
 2a4:	1f 5f       	subi	r17, 0xFF	; 255
 2a6:	ce 01       	movw	r24, r28
 2a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCDdefinechar>
 2ac:	28 96       	adiw	r28, 0x08	; 8
 2ae:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2b0:	18 30       	cpi	r17, 0x08	; 8
 2b2:	b9 f7       	brne	.-18     	; 0x2a2 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	08 95       	ret

000002bc <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 2c8:	08 2f       	mov	r16, r24
 2ca:	10 e0       	ldi	r17, 0x00	; 0
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 2ce:	8e e1       	ldi	r24, 0x1E	; 30
 2d0:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	c0 17       	cp	r28, r16
 2d8:	d1 07       	cpc	r29, r17
 2da:	cc f3       	brlt	.-14     	; 0x2ce <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 2f2:	08 2f       	mov	r16, r24
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 2f8:	88 e1       	ldi	r24, 0x18	; 24
 2fa:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 2fe:	21 96       	adiw	r28, 0x01	; 1
 300:	c0 17       	cp	r28, r16
 302:	d1 07       	cpc	r29, r17
 304:	cc f3       	brlt	.-14     	; 0x2f8 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 310:	8e e0       	ldi	r24, 0x0E	; 14
 312:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
}
 316:	08 95       	ret

00000318 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
}
 31e:	08 95       	ret

00000320 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
}
 326:	08 95       	ret

00000328 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
}
 32e:	08 95       	ret

00000330 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
}
 336:	08 95       	ret

00000338 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 344:	08 2f       	mov	r16, r24
 346:	10 e0       	ldi	r17, 0x00	; 0
 348:	04 c0       	rjmp	.+8      	; 0x352 <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 350:	21 96       	adiw	r28, 0x01	; 1
 352:	c0 17       	cp	r28, r16
 354:	d1 07       	cpc	r29, r17
 356:	cc f3       	brlt	.-14     	; 0x34a <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	08 95       	ret

00000362 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 36e:	08 2f       	mov	r16, r24
 370:	10 e0       	ldi	r17, 0x00	; 0
 372:	04 c0       	rjmp	.+8      	; 0x37c <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 374:	84 e1       	ldi	r24, 0x14	; 20
 376:	0e 94 96 00 	call	0x12c	; 0x12c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 37a:	21 96       	adiw	r28, 0x01	; 1
 37c:	c0 17       	cp	r28, r16
 37e:	d1 07       	cpc	r29, r17
 380:	cc f3       	brlt	.-14     	; 0x374 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 38c:	df 92       	push	r13
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 39c:	96 e0       	ldi	r25, 0x06	; 6
 39e:	89 9f       	mul	r24, r25
 3a0:	c0 01       	movw	r24, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	24 2f       	mov	r18, r20
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	ac 01       	movw	r20, r24
 3aa:	42 9f       	mul	r20, r18
 3ac:	c0 01       	movw	r24, r0
 3ae:	43 9f       	mul	r20, r19
 3b0:	90 0d       	add	r25, r0
 3b2:	52 9f       	mul	r21, r18
 3b4:	90 0d       	add	r25, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	0e 94 25 02 	call	0x44a	; 0x44a <__divmodhi4>
 3be:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3c0:	cb 01       	movw	r24, r22
 3c2:	66 e0       	ldi	r22, 0x06	; 6
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	0e 94 11 02 	call	0x422	; 0x422 <__udivmodhi4>
 3ca:	e8 2e       	mov	r14, r24
 3cc:	ff 24       	eor	r15, r15
 3ce:	00 e0       	ldi	r16, 0x00	; 0
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	12 c0       	rjmp	.+36     	; 0x3f8 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3d4:	c8 01       	movw	r24, r16
 3d6:	05 96       	adiw	r24, 0x05	; 5
 3d8:	c8 17       	cp	r28, r24
 3da:	d9 07       	cpc	r29, r25
 3dc:	10 f0       	brcs	.+4      	; 0x3e2 <LCDprogressBar+0x56>
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	06 c0       	rjmp	.+12     	; 0x3ee <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3e2:	c0 17       	cp	r28, r16
 3e4:	d1 07       	cpc	r29, r17
 3e6:	10 f0       	brcs	.+4      	; 0x3ec <LCDprogressBar+0x60>
 3e8:	8e 2d       	mov	r24, r14
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <LCDprogressBar+0x62>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3ee:	0e 94 75 00 	call	0xea	; 0xea <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3f2:	f3 94       	inc	r15
 3f4:	0a 5f       	subi	r16, 0xFA	; 250
 3f6:	1f 4f       	sbci	r17, 0xFF	; 255
 3f8:	fd 14       	cp	r15, r13
 3fa:	60 f3       	brcs	.-40     	; 0x3d4 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	df 90       	pop	r13
 40a:	08 95       	ret

0000040c <LCDdisplay>:

void LCDdisplay(char a[])
{
	LCDstring(a,strlen(a));
 40c:	dc 01       	movw	r26, r24
 40e:	0d 90       	ld	r0, X+
 410:	00 20       	and	r0, r0
 412:	e9 f7       	brne	.-6      	; 0x40e <LCDdisplay+0x2>
 414:	11 97       	sbiw	r26, 0x01	; 1
 416:	a8 1b       	sub	r26, r24
 418:	b9 0b       	sbc	r27, r25
 41a:	6a 2f       	mov	r22, r26
 41c:	0e 94 bb 00 	call	0x176	; 0x176 <LCDstring>
}
 420:	08 95       	ret

00000422 <__udivmodhi4>:
 422:	aa 1b       	sub	r26, r26
 424:	bb 1b       	sub	r27, r27
 426:	51 e1       	ldi	r21, 0x11	; 17
 428:	07 c0       	rjmp	.+14     	; 0x438 <__udivmodhi4_ep>

0000042a <__udivmodhi4_loop>:
 42a:	aa 1f       	adc	r26, r26
 42c:	bb 1f       	adc	r27, r27
 42e:	a6 17       	cp	r26, r22
 430:	b7 07       	cpc	r27, r23
 432:	10 f0       	brcs	.+4      	; 0x438 <__udivmodhi4_ep>
 434:	a6 1b       	sub	r26, r22
 436:	b7 0b       	sbc	r27, r23

00000438 <__udivmodhi4_ep>:
 438:	88 1f       	adc	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	5a 95       	dec	r21
 43e:	a9 f7       	brne	.-22     	; 0x42a <__udivmodhi4_loop>
 440:	80 95       	com	r24
 442:	90 95       	com	r25
 444:	bc 01       	movw	r22, r24
 446:	cd 01       	movw	r24, r26
 448:	08 95       	ret

0000044a <__divmodhi4>:
 44a:	97 fb       	bst	r25, 7
 44c:	09 2e       	mov	r0, r25
 44e:	07 26       	eor	r0, r23
 450:	0a d0       	rcall	.+20     	; 0x466 <__divmodhi4_neg1>
 452:	77 fd       	sbrc	r23, 7
 454:	04 d0       	rcall	.+8      	; 0x45e <__divmodhi4_neg2>
 456:	e5 df       	rcall	.-54     	; 0x422 <__udivmodhi4>
 458:	06 d0       	rcall	.+12     	; 0x466 <__divmodhi4_neg1>
 45a:	00 20       	and	r0, r0
 45c:	1a f4       	brpl	.+6      	; 0x464 <__divmodhi4_exit>

0000045e <__divmodhi4_neg2>:
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255

00000464 <__divmodhi4_exit>:
 464:	08 95       	ret

00000466 <__divmodhi4_neg1>:
 466:	f6 f7       	brtc	.-4      	; 0x464 <__divmodhi4_exit>
 468:	90 95       	com	r25
 46a:	81 95       	neg	r24
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
