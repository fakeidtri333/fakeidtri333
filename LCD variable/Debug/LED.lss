
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000afc  00000b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000011e8  00000000  00000000  00000b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bff  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ec ef       	ldi	r30, 0xFC	; 252
  a8:	fa e0       	ldi	r31, 0x0A	; 10
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	ac 36       	cpi	r26, 0x6C	; 108
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  ba:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:

#include<avr/io.h>
#include<util/delay.h>
#include<lcd_lib.h>
int main()
{
  c2:	8f 92       	push	r8
  c4:	9f 92       	push	r9
  c6:	af 92       	push	r10
  c8:	bf 92       	push	r11
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	60 97       	sbiw	r28, 0x10	; 16
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
	int i=0;
	char a[16];
	LCDinit();
  ea:	0e 94 86 01 	call	0x30c	; 0x30c <LCDinit>
	LCDclr();
  ee:	0e 94 1f 01 	call	0x23e	; 0x23e <LCDclr>
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		sprintf(a,"i=%d",i);
  f6:	7e 01       	movw	r14, r28
  f8:	08 94       	sec
  fa:	e1 1c       	adc	r14, r1
  fc:	f1 1c       	adc	r15, r1
  fe:	20 e6       	ldi	r18, 0x60	; 96
 100:	82 2e       	mov	r8, r18
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	92 2e       	mov	r9, r18
		LCDGotoXY(0,0);
		LCDdisplay(a);
		sprintf(a,"i=%2d",i);
 106:	95 e6       	ldi	r25, 0x65	; 101
 108:	a9 2e       	mov	r10, r25
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	b9 2e       	mov	r11, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10e:	84 e6       	ldi	r24, 0x64	; 100
 110:	c8 2e       	mov	r12, r24
 112:	d1 2c       	mov	r13, r1
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x58>
int main()
{
	int i=0;
	char a[16];
	LCDinit();
	LCDclr();
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		sprintf(a,"i=%d",i);
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x5a>
 11c:	00 d0       	rcall	.+0      	; 0x11e <main+0x5c>
 11e:	00 d0       	rcall	.+0      	; 0x120 <main+0x5e>
 120:	ed b7       	in	r30, 0x3d	; 61
 122:	fe b7       	in	r31, 0x3e	; 62
 124:	31 96       	adiw	r30, 0x01	; 1
 126:	ad b7       	in	r26, 0x3d	; 61
 128:	be b7       	in	r27, 0x3e	; 62
 12a:	12 96       	adiw	r26, 0x02	; 2
 12c:	fc 92       	st	X, r15
 12e:	ee 92       	st	-X, r14
 130:	11 97       	sbiw	r26, 0x01	; 1
 132:	93 82       	std	Z+3, r9	; 0x03
 134:	82 82       	std	Z+2, r8	; 0x02
 136:	15 83       	std	Z+5, r17	; 0x05
 138:	04 83       	std	Z+4, r16	; 0x04
 13a:	0e 94 a4 02 	call	0x548	; 0x548 <sprintf>
		LCDGotoXY(0,0);
 13e:	8d b7       	in	r24, 0x3d	; 61
 140:	9e b7       	in	r25, 0x3e	; 62
 142:	06 96       	adiw	r24, 0x06	; 6
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	9e bf       	out	0x3e, r25	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	8d bf       	out	0x3d, r24	; 61
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	0e 94 3c 01 	call	0x278	; 0x278 <LCDGotoXY>
		LCDdisplay(a);
 15a:	c7 01       	movw	r24, r14
 15c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCDdisplay>
		sprintf(a,"i=%2d",i);
 160:	00 d0       	rcall	.+0      	; 0x162 <main+0xa0>
 162:	00 d0       	rcall	.+0      	; 0x164 <main+0xa2>
 164:	00 d0       	rcall	.+0      	; 0x166 <main+0xa4>
 166:	ed b7       	in	r30, 0x3d	; 61
 168:	fe b7       	in	r31, 0x3e	; 62
 16a:	31 96       	adiw	r30, 0x01	; 1
 16c:	ad b7       	in	r26, 0x3d	; 61
 16e:	be b7       	in	r27, 0x3e	; 62
 170:	12 96       	adiw	r26, 0x02	; 2
 172:	fc 92       	st	X, r15
 174:	ee 92       	st	-X, r14
 176:	11 97       	sbiw	r26, 0x01	; 1
 178:	b3 82       	std	Z+3, r11	; 0x03
 17a:	a2 82       	std	Z+2, r10	; 0x02
 17c:	15 83       	std	Z+5, r17	; 0x05
 17e:	04 83       	std	Z+4, r16	; 0x04
 180:	0e 94 a4 02 	call	0x548	; 0x548 <sprintf>
		LCDGotoXY(0,1);
 184:	8d b7       	in	r24, 0x3d	; 61
 186:	9e b7       	in	r25, 0x3e	; 62
 188:	06 96       	adiw	r24, 0x06	; 6
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	9e bf       	out	0x3e, r25	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	8d bf       	out	0x3d, r24	; 61
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 3c 01 	call	0x278	; 0x278 <LCDGotoXY>
		LCDdisplay(a);
 1a0:	c7 01       	movw	r24, r14
 1a2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCDdisplay>
 1a6:	88 e8       	ldi	r24, 0x88	; 136
 1a8:	93 e1       	ldi	r25, 0x13	; 19
 1aa:	f6 01       	movw	r30, r12
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0xea>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <main+0xe8>
		_delay_ms(500);
		i++;
 1b4:	0f 5f       	subi	r16, 0xFF	; 255
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
		if(i>15)
 1b8:	00 31       	cpi	r16, 0x10	; 16
 1ba:	11 05       	cpc	r17, r1
 1bc:	0c f4       	brge	.+2      	; 0x1c0 <main+0xfe>
 1be:	ad cf       	rjmp	.-166    	; 0x11a <main+0x58>
 1c0:	aa cf       	rjmp	.-172    	; 0x116 <main+0x54>

000001c2 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 1c2:	28 2f       	mov	r18, r24
 1c4:	20 7f       	andi	r18, 0xF0	; 240
 1c6:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
 1c8:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 1ca:	aa 9a       	sbi	0x15, 2	; 21
 1cc:	28 ee       	ldi	r18, 0xE8	; 232
 1ce:	33 e0       	ldi	r19, 0x03	; 3
 1d0:	f9 01       	movw	r30, r18
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1d6:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 1d8:	a8 98       	cbi	0x15, 0	; 21
 1da:	f9 01       	movw	r30, r18
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	44 e0       	ldi	r20, 0x04	; 4
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	4a 95       	dec	r20
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <LCDsendChar+0x22>
 1ec:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 1ee:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 1f0:	aa 9a       	sbi	0x15, 2	; 21
 1f2:	c9 01       	movw	r24, r18
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1f8:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 1fa:	a8 98       	cbi	0x15, 0	; 21
 1fc:	c9 01       	movw	r24, r18
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 202:	08 95       	ret

00000204 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 204:	28 2f       	mov	r18, r24
 206:	20 7f       	andi	r18, 0xF0	; 240
 208:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 20a:	aa 9a       	sbi	0x15, 2	; 21
 20c:	28 ee       	ldi	r18, 0xE8	; 232
 20e:	33 e0       	ldi	r19, 0x03	; 3
 210:	f9 01       	movw	r30, r18
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 216:	aa 98       	cbi	0x15, 2	; 21
 218:	f9 01       	movw	r30, r18
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	54 e0       	ldi	r21, 0x04	; 4
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	5a 95       	dec	r21
 228:	e1 f7       	brne	.-8      	; 0x222 <LCDsendCommand+0x1e>
 22a:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 22c:	aa 9a       	sbi	0x15, 2	; 21
 22e:	c9 01       	movw	r24, r18
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 234:	aa 98       	cbi	0x15, 2	; 21
 236:	c9 01       	movw	r24, r18
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 23c:	08 95       	ret

0000023e <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
}
 244:	08 95       	ret

00000246 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
}
 24c:	08 95       	ret

0000024e <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	49 f0       	breq	.+18     	; 0x26e <LCDstring+0x20>
 25c:	ec 01       	movw	r28, r24
 25e:	10 e0       	ldi	r17, 0x00	; 0
 260:	04 c0       	rjmp	.+8      	; 0x26a <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 262:	89 91       	ld	r24, Y+
 264:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 268:	1f 5f       	subi	r17, 0xFF	; 255
 26a:	10 17       	cp	r17, r16
 26c:	d0 f3       	brcs	.-12     	; 0x262 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 278:	62 30       	cpi	r22, 0x02	; 2
 27a:	31 f0       	breq	.+12     	; 0x288 <LCDGotoXY+0x10>
 27c:	63 30       	cpi	r22, 0x03	; 3
 27e:	31 f0       	breq	.+12     	; 0x28c <LCDGotoXY+0x14>
 280:	61 30       	cpi	r22, 0x01	; 1
 282:	29 f4       	brne	.+10     	; 0x28e <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 284:	80 5c       	subi	r24, 0xC0	; 192
 286:	03 c0       	rjmp	.+6      	; 0x28e <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 288:	8c 5e       	subi	r24, 0xEC	; 236
 28a:	01 c0       	rjmp	.+2      	; 0x28e <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 28c:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
	
}
 294:	08 95       	ret

00000296 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
 29e:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 2a0:	64 2f       	mov	r22, r20
 2a2:	0e 94 3c 01 	call	0x278	; 0x278 <LCDGotoXY>
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 2aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 2ae:	1f 5f       	subi	r17, 0xFF	; 255
 2b0:	fe 01       	movw	r30, r28
 2b2:	e1 0f       	add	r30, r17
 2b4:	f1 1d       	adc	r31, r1
 2b6:	84 91       	lpm	r24, Z+
 2b8:	88 23       	and	r24, r24
 2ba:	b9 f7       	brne	.-18     	; 0x2aa <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	7c 01       	movw	r14, r24
 2d2:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 2d4:	11 0f       	add	r17, r17
 2d6:	11 0f       	add	r17, r17
 2d8:	11 0f       	add	r17, r17
 2da:	10 64       	ori	r17, 0x40	; 64
 2dc:	c0 e0       	ldi	r28, 0x00	; 0
 2de:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 2e0:	f7 01       	movw	r30, r14
 2e2:	ec 0f       	add	r30, r28
 2e4:	fd 1f       	adc	r31, r29
 2e6:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 2e8:	81 2f       	mov	r24, r17
 2ea:	8c 0f       	add	r24, r28
 2ec:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
		LCDsendChar(pcc);
 2f0:	80 2f       	mov	r24, r16
 2f2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 2f6:	21 96       	adiw	r28, 0x01	; 1
 2f8:	c8 30       	cpi	r28, 0x08	; 8
 2fa:	d1 05       	cpc	r29, r1
 2fc:	89 f7       	brne	.-30     	; 0x2e0 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	08 95       	ret

0000030c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	88 e9       	ldi	r24, 0x98	; 152
 314:	9a e3       	ldi	r25, 0x3A	; 58
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 31a:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 31c:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 31e:	84 b3       	in	r24, 0x14	; 20
 320:	80 6f       	ori	r24, 0xF0	; 240
 322:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 324:	84 b3       	in	r24, 0x14	; 20
 326:	87 60       	ori	r24, 0x07	; 7
 328:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 32a:	80 e3       	ldi	r24, 0x30	; 48
 32c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 32e:	aa 9a       	sbi	0x15, 2	; 21
 330:	28 ee       	ldi	r18, 0xE8	; 232
 332:	33 e0       	ldi	r19, 0x03	; 3
 334:	f9 01       	movw	r30, r18
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 33a:	aa 98       	cbi	0x15, 2	; 21
 33c:	f9 01       	movw	r30, r18
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 342:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 344:	aa 9a       	sbi	0x15, 2	; 21
 346:	c9 01       	movw	r24, r18
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 34c:	aa 98       	cbi	0x15, 2	; 21
 34e:	c9 01       	movw	r24, r18
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 354:	80 e2       	ldi	r24, 0x20	; 32
 356:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 358:	aa 9a       	sbi	0x15, 2	; 21
 35a:	c9 01       	movw	r24, r18
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 360:	aa 98       	cbi	0x15, 2	; 21
 362:	c9 01       	movw	r24, r18
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 368:	88 e2       	ldi	r24, 0x28	; 40
 36a:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 36e:	8c e0       	ldi	r24, 0x0C	; 12
 370:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
 374:	c4 e5       	ldi	r28, 0x54	; 84
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 37a:	16 2f       	mov	r17, r22
 37c:	1f 5f       	subi	r17, 0xFF	; 255
 37e:	ce 01       	movw	r24, r28
 380:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCDdefinechar>
 384:	28 96       	adiw	r28, 0x08	; 8
 386:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 388:	18 30       	cpi	r17, 0x08	; 8
 38a:	b9 f7       	brne	.-18     	; 0x37a <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	08 95       	ret

00000394 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 3a0:	08 2f       	mov	r16, r24
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 3a6:	8e e1       	ldi	r24, 0x1E	; 30
 3a8:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 3ac:	21 96       	adiw	r28, 0x01	; 1
 3ae:	c0 17       	cp	r28, r16
 3b0:	d1 07       	cpc	r29, r17
 3b2:	cc f3       	brlt	.-14     	; 0x3a6 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 3ca:	08 2f       	mov	r16, r24
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 3d0:	88 e1       	ldi	r24, 0x18	; 24
 3d2:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 3d6:	21 96       	adiw	r28, 0x01	; 1
 3d8:	c0 17       	cp	r28, r16
 3da:	d1 07       	cpc	r29, r17
 3dc:	cc f3       	brlt	.-14     	; 0x3d0 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 3e8:	8e e0       	ldi	r24, 0x0E	; 14
 3ea:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
}
 3ee:	08 95       	ret

000003f0 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 3f0:	8f e0       	ldi	r24, 0x0F	; 15
 3f2:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
}
 3f6:	08 95       	ret

000003f8 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 3f8:	8c e0       	ldi	r24, 0x0C	; 12
 3fa:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
}
 3fe:	08 95       	ret

00000400 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 400:	88 e0       	ldi	r24, 0x08	; 8
 402:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
}
 406:	08 95       	ret

00000408 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 408:	8c e0       	ldi	r24, 0x0C	; 12
 40a:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
}
 40e:	08 95       	ret

00000410 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	c0 e0       	ldi	r28, 0x00	; 0
 41a:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 41c:	08 2f       	mov	r16, r24
 41e:	10 e0       	ldi	r17, 0x00	; 0
 420:	04 c0       	rjmp	.+8      	; 0x42a <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 422:	80 e1       	ldi	r24, 0x10	; 16
 424:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 428:	21 96       	adiw	r28, 0x01	; 1
 42a:	c0 17       	cp	r28, r16
 42c:	d1 07       	cpc	r29, r17
 42e:	cc f3       	brlt	.-14     	; 0x422 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	08 95       	ret

0000043a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	c0 e0       	ldi	r28, 0x00	; 0
 444:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 446:	08 2f       	mov	r16, r24
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	04 c0       	rjmp	.+8      	; 0x454 <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 44c:	84 e1       	ldi	r24, 0x14	; 20
 44e:	0e 94 02 01 	call	0x204	; 0x204 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 452:	21 96       	adiw	r28, 0x01	; 1
 454:	c0 17       	cp	r28, r16
 456:	d1 07       	cpc	r29, r17
 458:	cc f3       	brlt	.-14     	; 0x44c <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 464:	df 92       	push	r13
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 474:	96 e0       	ldi	r25, 0x06	; 6
 476:	89 9f       	mul	r24, r25
 478:	c0 01       	movw	r24, r0
 47a:	11 24       	eor	r1, r1
 47c:	24 2f       	mov	r18, r20
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	ac 01       	movw	r20, r24
 482:	42 9f       	mul	r20, r18
 484:	c0 01       	movw	r24, r0
 486:	43 9f       	mul	r20, r19
 488:	90 0d       	add	r25, r0
 48a:	52 9f       	mul	r21, r18
 48c:	90 0d       	add	r25, r0
 48e:	11 24       	eor	r1, r1
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 496:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 498:	cb 01       	movw	r24, r22
 49a:	66 e0       	ldi	r22, 0x06	; 6
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__udivmodhi4>
 4a2:	e8 2e       	mov	r14, r24
 4a4:	ff 24       	eor	r15, r15
 4a6:	00 e0       	ldi	r16, 0x00	; 0
 4a8:	10 e0       	ldi	r17, 0x00	; 0
 4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 4ac:	c8 01       	movw	r24, r16
 4ae:	05 96       	adiw	r24, 0x05	; 5
 4b0:	c8 17       	cp	r28, r24
 4b2:	d9 07       	cpc	r29, r25
 4b4:	10 f0       	brcs	.+4      	; 0x4ba <LCDprogressBar+0x56>
 4b6:	85 e0       	ldi	r24, 0x05	; 5
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 4ba:	c0 17       	cp	r28, r16
 4bc:	d1 07       	cpc	r29, r17
 4be:	10 f0       	brcs	.+4      	; 0x4c4 <LCDprogressBar+0x60>
 4c0:	8e 2d       	mov	r24, r14
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <LCDprogressBar+0x62>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 4c6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 4ca:	f3 94       	inc	r15
 4cc:	0a 5f       	subi	r16, 0xFA	; 250
 4ce:	1f 4f       	sbci	r17, 0xFF	; 255
 4d0:	fd 14       	cp	r15, r13
 4d2:	60 f3       	brcs	.-40     	; 0x4ac <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	08 95       	ret

000004e4 <LCDdisplay>:

void LCDdisplay(char a[])
{
	LCDstring(a,strlen(a));
 4e4:	dc 01       	movw	r26, r24
 4e6:	0d 90       	ld	r0, X+
 4e8:	00 20       	and	r0, r0
 4ea:	e9 f7       	brne	.-6      	; 0x4e6 <LCDdisplay+0x2>
 4ec:	11 97       	sbiw	r26, 0x01	; 1
 4ee:	a8 1b       	sub	r26, r24
 4f0:	b9 0b       	sbc	r27, r25
 4f2:	6a 2f       	mov	r22, r26
 4f4:	0e 94 27 01 	call	0x24e	; 0x24e <LCDstring>
}
 4f8:	08 95       	ret

000004fa <__udivmodhi4>:
 4fa:	aa 1b       	sub	r26, r26
 4fc:	bb 1b       	sub	r27, r27
 4fe:	51 e1       	ldi	r21, 0x11	; 17
 500:	07 c0       	rjmp	.+14     	; 0x510 <__udivmodhi4_ep>

00000502 <__udivmodhi4_loop>:
 502:	aa 1f       	adc	r26, r26
 504:	bb 1f       	adc	r27, r27
 506:	a6 17       	cp	r26, r22
 508:	b7 07       	cpc	r27, r23
 50a:	10 f0       	brcs	.+4      	; 0x510 <__udivmodhi4_ep>
 50c:	a6 1b       	sub	r26, r22
 50e:	b7 0b       	sbc	r27, r23

00000510 <__udivmodhi4_ep>:
 510:	88 1f       	adc	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	5a 95       	dec	r21
 516:	a9 f7       	brne	.-22     	; 0x502 <__udivmodhi4_loop>
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	bc 01       	movw	r22, r24
 51e:	cd 01       	movw	r24, r26
 520:	08 95       	ret

00000522 <__divmodhi4>:
 522:	97 fb       	bst	r25, 7
 524:	09 2e       	mov	r0, r25
 526:	07 26       	eor	r0, r23
 528:	0a d0       	rcall	.+20     	; 0x53e <__divmodhi4_neg1>
 52a:	77 fd       	sbrc	r23, 7
 52c:	04 d0       	rcall	.+8      	; 0x536 <__divmodhi4_neg2>
 52e:	e5 df       	rcall	.-54     	; 0x4fa <__udivmodhi4>
 530:	06 d0       	rcall	.+12     	; 0x53e <__divmodhi4_neg1>
 532:	00 20       	and	r0, r0
 534:	1a f4       	brpl	.+6      	; 0x53c <__divmodhi4_exit>

00000536 <__divmodhi4_neg2>:
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255

0000053c <__divmodhi4_exit>:
 53c:	08 95       	ret

0000053e <__divmodhi4_neg1>:
 53e:	f6 f7       	brtc	.-4      	; 0x53c <__divmodhi4_exit>
 540:	90 95       	com	r25
 542:	81 95       	neg	r24
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	08 95       	ret

00000548 <sprintf>:
 548:	ae e0       	ldi	r26, 0x0E	; 14
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	ea ea       	ldi	r30, 0xAA	; 170
 54e:	f2 e0       	ldi	r31, 0x02	; 2
 550:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__prologue_saves__+0x1c>
 554:	0d 89       	ldd	r16, Y+21	; 0x15
 556:	1e 89       	ldd	r17, Y+22	; 0x16
 558:	86 e0       	ldi	r24, 0x06	; 6
 55a:	8c 83       	std	Y+4, r24	; 0x04
 55c:	1a 83       	std	Y+2, r17	; 0x02
 55e:	09 83       	std	Y+1, r16	; 0x01
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	9f e7       	ldi	r25, 0x7F	; 127
 564:	9e 83       	std	Y+6, r25	; 0x06
 566:	8d 83       	std	Y+5, r24	; 0x05
 568:	9e 01       	movw	r18, r28
 56a:	27 5e       	subi	r18, 0xE7	; 231
 56c:	3f 4f       	sbci	r19, 0xFF	; 255
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	6f 89       	ldd	r22, Y+23	; 0x17
 574:	78 8d       	ldd	r23, Y+24	; 0x18
 576:	a9 01       	movw	r20, r18
 578:	0e 94 c8 02 	call	0x590	; 0x590 <vfprintf>
 57c:	2f 81       	ldd	r18, Y+7	; 0x07
 57e:	38 85       	ldd	r19, Y+8	; 0x08
 580:	02 0f       	add	r16, r18
 582:	13 1f       	adc	r17, r19
 584:	f8 01       	movw	r30, r16
 586:	10 82       	st	Z, r1
 588:	2e 96       	adiw	r28, 0x0e	; 14
 58a:	e4 e0       	ldi	r30, 0x04	; 4
 58c:	0c 94 6f 05 	jmp	0xade	; 0xade <__epilogue_restores__+0x1c>

00000590 <vfprintf>:
 590:	ab e0       	ldi	r26, 0x0B	; 11
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	ee ec       	ldi	r30, 0xCE	; 206
 596:	f2 e0       	ldi	r31, 0x02	; 2
 598:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__prologue_saves__>
 59c:	3c 01       	movw	r6, r24
 59e:	2b 01       	movw	r4, r22
 5a0:	5a 01       	movw	r10, r20
 5a2:	fc 01       	movw	r30, r24
 5a4:	17 82       	std	Z+7, r1	; 0x07
 5a6:	16 82       	std	Z+6, r1	; 0x06
 5a8:	83 81       	ldd	r24, Z+3	; 0x03
 5aa:	81 fd       	sbrc	r24, 1
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <vfprintf+0x24>
 5ae:	6f ef       	ldi	r22, 0xFF	; 255
 5b0:	7f ef       	ldi	r23, 0xFF	; 255
 5b2:	c6 c1       	rjmp	.+908    	; 0x940 <vfprintf+0x3b0>
 5b4:	9a e0       	ldi	r25, 0x0A	; 10
 5b6:	89 2e       	mov	r8, r25
 5b8:	1e 01       	movw	r2, r28
 5ba:	08 94       	sec
 5bc:	21 1c       	adc	r2, r1
 5be:	31 1c       	adc	r3, r1
 5c0:	f3 01       	movw	r30, r6
 5c2:	23 81       	ldd	r18, Z+3	; 0x03
 5c4:	f2 01       	movw	r30, r4
 5c6:	23 fd       	sbrc	r18, 3
 5c8:	85 91       	lpm	r24, Z+
 5ca:	23 ff       	sbrs	r18, 3
 5cc:	81 91       	ld	r24, Z+
 5ce:	2f 01       	movw	r4, r30
 5d0:	88 23       	and	r24, r24
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <vfprintf+0x46>
 5d4:	b2 c1       	rjmp	.+868    	; 0x93a <vfprintf+0x3aa>
 5d6:	85 32       	cpi	r24, 0x25	; 37
 5d8:	39 f4       	brne	.+14     	; 0x5e8 <vfprintf+0x58>
 5da:	23 fd       	sbrc	r18, 3
 5dc:	85 91       	lpm	r24, Z+
 5de:	23 ff       	sbrs	r18, 3
 5e0:	81 91       	ld	r24, Z+
 5e2:	2f 01       	movw	r4, r30
 5e4:	85 32       	cpi	r24, 0x25	; 37
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <vfprintf+0x62>
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	b3 01       	movw	r22, r6
 5ec:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 5f0:	e7 cf       	rjmp	.-50     	; 0x5c0 <vfprintf+0x30>
 5f2:	98 2f       	mov	r25, r24
 5f4:	ff 24       	eor	r15, r15
 5f6:	ee 24       	eor	r14, r14
 5f8:	99 24       	eor	r9, r9
 5fa:	ff e1       	ldi	r31, 0x1F	; 31
 5fc:	ff 15       	cp	r31, r15
 5fe:	d0 f0       	brcs	.+52     	; 0x634 <vfprintf+0xa4>
 600:	9b 32       	cpi	r25, 0x2B	; 43
 602:	69 f0       	breq	.+26     	; 0x61e <vfprintf+0x8e>
 604:	9c 32       	cpi	r25, 0x2C	; 44
 606:	28 f4       	brcc	.+10     	; 0x612 <vfprintf+0x82>
 608:	90 32       	cpi	r25, 0x20	; 32
 60a:	59 f0       	breq	.+22     	; 0x622 <vfprintf+0x92>
 60c:	93 32       	cpi	r25, 0x23	; 35
 60e:	91 f4       	brne	.+36     	; 0x634 <vfprintf+0xa4>
 610:	0e c0       	rjmp	.+28     	; 0x62e <vfprintf+0x9e>
 612:	9d 32       	cpi	r25, 0x2D	; 45
 614:	49 f0       	breq	.+18     	; 0x628 <vfprintf+0x98>
 616:	90 33       	cpi	r25, 0x30	; 48
 618:	69 f4       	brne	.+26     	; 0x634 <vfprintf+0xa4>
 61a:	41 e0       	ldi	r20, 0x01	; 1
 61c:	24 c0       	rjmp	.+72     	; 0x666 <vfprintf+0xd6>
 61e:	52 e0       	ldi	r21, 0x02	; 2
 620:	f5 2a       	or	r15, r21
 622:	84 e0       	ldi	r24, 0x04	; 4
 624:	f8 2a       	or	r15, r24
 626:	28 c0       	rjmp	.+80     	; 0x678 <vfprintf+0xe8>
 628:	98 e0       	ldi	r25, 0x08	; 8
 62a:	f9 2a       	or	r15, r25
 62c:	25 c0       	rjmp	.+74     	; 0x678 <vfprintf+0xe8>
 62e:	e0 e1       	ldi	r30, 0x10	; 16
 630:	fe 2a       	or	r15, r30
 632:	22 c0       	rjmp	.+68     	; 0x678 <vfprintf+0xe8>
 634:	f7 fc       	sbrc	r15, 7
 636:	29 c0       	rjmp	.+82     	; 0x68a <vfprintf+0xfa>
 638:	89 2f       	mov	r24, r25
 63a:	80 53       	subi	r24, 0x30	; 48
 63c:	8a 30       	cpi	r24, 0x0A	; 10
 63e:	70 f4       	brcc	.+28     	; 0x65c <vfprintf+0xcc>
 640:	f6 fe       	sbrs	r15, 6
 642:	05 c0       	rjmp	.+10     	; 0x64e <vfprintf+0xbe>
 644:	98 9c       	mul	r9, r8
 646:	90 2c       	mov	r9, r0
 648:	11 24       	eor	r1, r1
 64a:	98 0e       	add	r9, r24
 64c:	15 c0       	rjmp	.+42     	; 0x678 <vfprintf+0xe8>
 64e:	e8 9c       	mul	r14, r8
 650:	e0 2c       	mov	r14, r0
 652:	11 24       	eor	r1, r1
 654:	e8 0e       	add	r14, r24
 656:	f0 e2       	ldi	r31, 0x20	; 32
 658:	ff 2a       	or	r15, r31
 65a:	0e c0       	rjmp	.+28     	; 0x678 <vfprintf+0xe8>
 65c:	9e 32       	cpi	r25, 0x2E	; 46
 65e:	29 f4       	brne	.+10     	; 0x66a <vfprintf+0xda>
 660:	f6 fc       	sbrc	r15, 6
 662:	6b c1       	rjmp	.+726    	; 0x93a <vfprintf+0x3aa>
 664:	40 e4       	ldi	r20, 0x40	; 64
 666:	f4 2a       	or	r15, r20
 668:	07 c0       	rjmp	.+14     	; 0x678 <vfprintf+0xe8>
 66a:	9c 36       	cpi	r25, 0x6C	; 108
 66c:	19 f4       	brne	.+6      	; 0x674 <vfprintf+0xe4>
 66e:	50 e8       	ldi	r21, 0x80	; 128
 670:	f5 2a       	or	r15, r21
 672:	02 c0       	rjmp	.+4      	; 0x678 <vfprintf+0xe8>
 674:	98 36       	cpi	r25, 0x68	; 104
 676:	49 f4       	brne	.+18     	; 0x68a <vfprintf+0xfa>
 678:	f2 01       	movw	r30, r4
 67a:	23 fd       	sbrc	r18, 3
 67c:	95 91       	lpm	r25, Z+
 67e:	23 ff       	sbrs	r18, 3
 680:	91 91       	ld	r25, Z+
 682:	2f 01       	movw	r4, r30
 684:	99 23       	and	r25, r25
 686:	09 f0       	breq	.+2      	; 0x68a <vfprintf+0xfa>
 688:	b8 cf       	rjmp	.-144    	; 0x5fa <vfprintf+0x6a>
 68a:	89 2f       	mov	r24, r25
 68c:	85 54       	subi	r24, 0x45	; 69
 68e:	83 30       	cpi	r24, 0x03	; 3
 690:	18 f0       	brcs	.+6      	; 0x698 <vfprintf+0x108>
 692:	80 52       	subi	r24, 0x20	; 32
 694:	83 30       	cpi	r24, 0x03	; 3
 696:	38 f4       	brcc	.+14     	; 0x6a6 <vfprintf+0x116>
 698:	44 e0       	ldi	r20, 0x04	; 4
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	a4 0e       	add	r10, r20
 69e:	b5 1e       	adc	r11, r21
 6a0:	5f e3       	ldi	r21, 0x3F	; 63
 6a2:	59 83       	std	Y+1, r21	; 0x01
 6a4:	0f c0       	rjmp	.+30     	; 0x6c4 <vfprintf+0x134>
 6a6:	93 36       	cpi	r25, 0x63	; 99
 6a8:	31 f0       	breq	.+12     	; 0x6b6 <vfprintf+0x126>
 6aa:	93 37       	cpi	r25, 0x73	; 115
 6ac:	79 f0       	breq	.+30     	; 0x6cc <vfprintf+0x13c>
 6ae:	93 35       	cpi	r25, 0x53	; 83
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <vfprintf+0x124>
 6b2:	56 c0       	rjmp	.+172    	; 0x760 <vfprintf+0x1d0>
 6b4:	20 c0       	rjmp	.+64     	; 0x6f6 <vfprintf+0x166>
 6b6:	f5 01       	movw	r30, r10
 6b8:	80 81       	ld	r24, Z
 6ba:	89 83       	std	Y+1, r24	; 0x01
 6bc:	42 e0       	ldi	r20, 0x02	; 2
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	a4 0e       	add	r10, r20
 6c2:	b5 1e       	adc	r11, r21
 6c4:	61 01       	movw	r12, r2
 6c6:	01 e0       	ldi	r16, 0x01	; 1
 6c8:	10 e0       	ldi	r17, 0x00	; 0
 6ca:	12 c0       	rjmp	.+36     	; 0x6f0 <vfprintf+0x160>
 6cc:	f5 01       	movw	r30, r10
 6ce:	c0 80       	ld	r12, Z
 6d0:	d1 80       	ldd	r13, Z+1	; 0x01
 6d2:	f6 fc       	sbrc	r15, 6
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <vfprintf+0x14c>
 6d6:	6f ef       	ldi	r22, 0xFF	; 255
 6d8:	7f ef       	ldi	r23, 0xFF	; 255
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0x150>
 6dc:	69 2d       	mov	r22, r9
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	42 e0       	ldi	r20, 0x02	; 2
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	a4 0e       	add	r10, r20
 6e6:	b5 1e       	adc	r11, r21
 6e8:	c6 01       	movw	r24, r12
 6ea:	0e 94 b0 04 	call	0x960	; 0x960 <strnlen>
 6ee:	8c 01       	movw	r16, r24
 6f0:	5f e7       	ldi	r21, 0x7F	; 127
 6f2:	f5 22       	and	r15, r21
 6f4:	14 c0       	rjmp	.+40     	; 0x71e <vfprintf+0x18e>
 6f6:	f5 01       	movw	r30, r10
 6f8:	c0 80       	ld	r12, Z
 6fa:	d1 80       	ldd	r13, Z+1	; 0x01
 6fc:	f6 fc       	sbrc	r15, 6
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <vfprintf+0x176>
 700:	6f ef       	ldi	r22, 0xFF	; 255
 702:	7f ef       	ldi	r23, 0xFF	; 255
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x17a>
 706:	69 2d       	mov	r22, r9
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	42 e0       	ldi	r20, 0x02	; 2
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	a4 0e       	add	r10, r20
 710:	b5 1e       	adc	r11, r21
 712:	c6 01       	movw	r24, r12
 714:	0e 94 a5 04 	call	0x94a	; 0x94a <strnlen_P>
 718:	8c 01       	movw	r16, r24
 71a:	50 e8       	ldi	r21, 0x80	; 128
 71c:	f5 2a       	or	r15, r21
 71e:	f3 fe       	sbrs	r15, 3
 720:	07 c0       	rjmp	.+14     	; 0x730 <vfprintf+0x1a0>
 722:	1a c0       	rjmp	.+52     	; 0x758 <vfprintf+0x1c8>
 724:	80 e2       	ldi	r24, 0x20	; 32
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	b3 01       	movw	r22, r6
 72a:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 72e:	ea 94       	dec	r14
 730:	8e 2d       	mov	r24, r14
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	08 17       	cp	r16, r24
 736:	19 07       	cpc	r17, r25
 738:	a8 f3       	brcs	.-22     	; 0x724 <vfprintf+0x194>
 73a:	0e c0       	rjmp	.+28     	; 0x758 <vfprintf+0x1c8>
 73c:	f6 01       	movw	r30, r12
 73e:	f7 fc       	sbrc	r15, 7
 740:	85 91       	lpm	r24, Z+
 742:	f7 fe       	sbrs	r15, 7
 744:	81 91       	ld	r24, Z+
 746:	6f 01       	movw	r12, r30
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	b3 01       	movw	r22, r6
 74c:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 750:	e1 10       	cpse	r14, r1
 752:	ea 94       	dec	r14
 754:	01 50       	subi	r16, 0x01	; 1
 756:	10 40       	sbci	r17, 0x00	; 0
 758:	01 15       	cp	r16, r1
 75a:	11 05       	cpc	r17, r1
 75c:	79 f7       	brne	.-34     	; 0x73c <vfprintf+0x1ac>
 75e:	ea c0       	rjmp	.+468    	; 0x934 <vfprintf+0x3a4>
 760:	94 36       	cpi	r25, 0x64	; 100
 762:	11 f0       	breq	.+4      	; 0x768 <vfprintf+0x1d8>
 764:	99 36       	cpi	r25, 0x69	; 105
 766:	69 f5       	brne	.+90     	; 0x7c2 <vfprintf+0x232>
 768:	f7 fe       	sbrs	r15, 7
 76a:	08 c0       	rjmp	.+16     	; 0x77c <vfprintf+0x1ec>
 76c:	f5 01       	movw	r30, r10
 76e:	20 81       	ld	r18, Z
 770:	31 81       	ldd	r19, Z+1	; 0x01
 772:	42 81       	ldd	r20, Z+2	; 0x02
 774:	53 81       	ldd	r21, Z+3	; 0x03
 776:	84 e0       	ldi	r24, 0x04	; 4
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0a c0       	rjmp	.+20     	; 0x790 <vfprintf+0x200>
 77c:	f5 01       	movw	r30, r10
 77e:	80 81       	ld	r24, Z
 780:	91 81       	ldd	r25, Z+1	; 0x01
 782:	9c 01       	movw	r18, r24
 784:	44 27       	eor	r20, r20
 786:	37 fd       	sbrc	r19, 7
 788:	40 95       	com	r20
 78a:	54 2f       	mov	r21, r20
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	a8 0e       	add	r10, r24
 792:	b9 1e       	adc	r11, r25
 794:	9f e6       	ldi	r25, 0x6F	; 111
 796:	f9 22       	and	r15, r25
 798:	57 ff       	sbrs	r21, 7
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <vfprintf+0x21e>
 79c:	50 95       	com	r21
 79e:	40 95       	com	r20
 7a0:	30 95       	com	r19
 7a2:	21 95       	neg	r18
 7a4:	3f 4f       	sbci	r19, 0xFF	; 255
 7a6:	4f 4f       	sbci	r20, 0xFF	; 255
 7a8:	5f 4f       	sbci	r21, 0xFF	; 255
 7aa:	e0 e8       	ldi	r30, 0x80	; 128
 7ac:	fe 2a       	or	r15, r30
 7ae:	ca 01       	movw	r24, r20
 7b0:	b9 01       	movw	r22, r18
 7b2:	a1 01       	movw	r20, r2
 7b4:	2a e0       	ldi	r18, 0x0A	; 10
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__ultoa_invert>
 7bc:	d8 2e       	mov	r13, r24
 7be:	d2 18       	sub	r13, r2
 7c0:	40 c0       	rjmp	.+128    	; 0x842 <vfprintf+0x2b2>
 7c2:	95 37       	cpi	r25, 0x75	; 117
 7c4:	29 f4       	brne	.+10     	; 0x7d0 <vfprintf+0x240>
 7c6:	1f 2d       	mov	r17, r15
 7c8:	1f 7e       	andi	r17, 0xEF	; 239
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	1d c0       	rjmp	.+58     	; 0x80a <vfprintf+0x27a>
 7d0:	1f 2d       	mov	r17, r15
 7d2:	19 7f       	andi	r17, 0xF9	; 249
 7d4:	9f 36       	cpi	r25, 0x6F	; 111
 7d6:	61 f0       	breq	.+24     	; 0x7f0 <vfprintf+0x260>
 7d8:	90 37       	cpi	r25, 0x70	; 112
 7da:	20 f4       	brcc	.+8      	; 0x7e4 <vfprintf+0x254>
 7dc:	98 35       	cpi	r25, 0x58	; 88
 7de:	09 f0       	breq	.+2      	; 0x7e2 <vfprintf+0x252>
 7e0:	ac c0       	rjmp	.+344    	; 0x93a <vfprintf+0x3aa>
 7e2:	0f c0       	rjmp	.+30     	; 0x802 <vfprintf+0x272>
 7e4:	90 37       	cpi	r25, 0x70	; 112
 7e6:	39 f0       	breq	.+14     	; 0x7f6 <vfprintf+0x266>
 7e8:	98 37       	cpi	r25, 0x78	; 120
 7ea:	09 f0       	breq	.+2      	; 0x7ee <vfprintf+0x25e>
 7ec:	a6 c0       	rjmp	.+332    	; 0x93a <vfprintf+0x3aa>
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <vfprintf+0x268>
 7f0:	28 e0       	ldi	r18, 0x08	; 8
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	0a c0       	rjmp	.+20     	; 0x80a <vfprintf+0x27a>
 7f6:	10 61       	ori	r17, 0x10	; 16
 7f8:	14 fd       	sbrc	r17, 4
 7fa:	14 60       	ori	r17, 0x04	; 4
 7fc:	20 e1       	ldi	r18, 0x10	; 16
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	04 c0       	rjmp	.+8      	; 0x80a <vfprintf+0x27a>
 802:	14 fd       	sbrc	r17, 4
 804:	16 60       	ori	r17, 0x06	; 6
 806:	20 e1       	ldi	r18, 0x10	; 16
 808:	32 e0       	ldi	r19, 0x02	; 2
 80a:	17 ff       	sbrs	r17, 7
 80c:	08 c0       	rjmp	.+16     	; 0x81e <vfprintf+0x28e>
 80e:	f5 01       	movw	r30, r10
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	44 e0       	ldi	r20, 0x04	; 4
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	08 c0       	rjmp	.+16     	; 0x82e <vfprintf+0x29e>
 81e:	f5 01       	movw	r30, r10
 820:	80 81       	ld	r24, Z
 822:	91 81       	ldd	r25, Z+1	; 0x01
 824:	bc 01       	movw	r22, r24
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	42 e0       	ldi	r20, 0x02	; 2
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	a4 0e       	add	r10, r20
 830:	b5 1e       	adc	r11, r21
 832:	a1 01       	movw	r20, r2
 834:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__ultoa_invert>
 838:	d8 2e       	mov	r13, r24
 83a:	d2 18       	sub	r13, r2
 83c:	8f e7       	ldi	r24, 0x7F	; 127
 83e:	f8 2e       	mov	r15, r24
 840:	f1 22       	and	r15, r17
 842:	f6 fe       	sbrs	r15, 6
 844:	0b c0       	rjmp	.+22     	; 0x85c <vfprintf+0x2cc>
 846:	5e ef       	ldi	r21, 0xFE	; 254
 848:	f5 22       	and	r15, r21
 84a:	d9 14       	cp	r13, r9
 84c:	38 f4       	brcc	.+14     	; 0x85c <vfprintf+0x2cc>
 84e:	f4 fe       	sbrs	r15, 4
 850:	07 c0       	rjmp	.+14     	; 0x860 <vfprintf+0x2d0>
 852:	f2 fc       	sbrc	r15, 2
 854:	05 c0       	rjmp	.+10     	; 0x860 <vfprintf+0x2d0>
 856:	8f ee       	ldi	r24, 0xEF	; 239
 858:	f8 22       	and	r15, r24
 85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0x2d0>
 85c:	1d 2d       	mov	r17, r13
 85e:	01 c0       	rjmp	.+2      	; 0x862 <vfprintf+0x2d2>
 860:	19 2d       	mov	r17, r9
 862:	f4 fe       	sbrs	r15, 4
 864:	0d c0       	rjmp	.+26     	; 0x880 <vfprintf+0x2f0>
 866:	fe 01       	movw	r30, r28
 868:	ed 0d       	add	r30, r13
 86a:	f1 1d       	adc	r31, r1
 86c:	80 81       	ld	r24, Z
 86e:	80 33       	cpi	r24, 0x30	; 48
 870:	19 f4       	brne	.+6      	; 0x878 <vfprintf+0x2e8>
 872:	99 ee       	ldi	r25, 0xE9	; 233
 874:	f9 22       	and	r15, r25
 876:	08 c0       	rjmp	.+16     	; 0x888 <vfprintf+0x2f8>
 878:	1f 5f       	subi	r17, 0xFF	; 255
 87a:	f2 fe       	sbrs	r15, 2
 87c:	05 c0       	rjmp	.+10     	; 0x888 <vfprintf+0x2f8>
 87e:	03 c0       	rjmp	.+6      	; 0x886 <vfprintf+0x2f6>
 880:	8f 2d       	mov	r24, r15
 882:	86 78       	andi	r24, 0x86	; 134
 884:	09 f0       	breq	.+2      	; 0x888 <vfprintf+0x2f8>
 886:	1f 5f       	subi	r17, 0xFF	; 255
 888:	0f 2d       	mov	r16, r15
 88a:	f3 fc       	sbrc	r15, 3
 88c:	14 c0       	rjmp	.+40     	; 0x8b6 <vfprintf+0x326>
 88e:	f0 fe       	sbrs	r15, 0
 890:	0f c0       	rjmp	.+30     	; 0x8b0 <vfprintf+0x320>
 892:	1e 15       	cp	r17, r14
 894:	10 f0       	brcs	.+4      	; 0x89a <vfprintf+0x30a>
 896:	9d 2c       	mov	r9, r13
 898:	0b c0       	rjmp	.+22     	; 0x8b0 <vfprintf+0x320>
 89a:	9d 2c       	mov	r9, r13
 89c:	9e 0c       	add	r9, r14
 89e:	91 1a       	sub	r9, r17
 8a0:	1e 2d       	mov	r17, r14
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <vfprintf+0x320>
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	b3 01       	movw	r22, r6
 8aa:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 8ae:	1f 5f       	subi	r17, 0xFF	; 255
 8b0:	1e 15       	cp	r17, r14
 8b2:	c0 f3       	brcs	.-16     	; 0x8a4 <vfprintf+0x314>
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <vfprintf+0x32e>
 8b6:	1e 15       	cp	r17, r14
 8b8:	10 f4       	brcc	.+4      	; 0x8be <vfprintf+0x32e>
 8ba:	e1 1a       	sub	r14, r17
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <vfprintf+0x330>
 8be:	ee 24       	eor	r14, r14
 8c0:	04 ff       	sbrs	r16, 4
 8c2:	0f c0       	rjmp	.+30     	; 0x8e2 <vfprintf+0x352>
 8c4:	80 e3       	ldi	r24, 0x30	; 48
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	b3 01       	movw	r22, r6
 8ca:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 8ce:	02 ff       	sbrs	r16, 2
 8d0:	1d c0       	rjmp	.+58     	; 0x90c <vfprintf+0x37c>
 8d2:	01 fd       	sbrc	r16, 1
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <vfprintf+0x34c>
 8d6:	88 e7       	ldi	r24, 0x78	; 120
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e c0       	rjmp	.+28     	; 0x8f8 <vfprintf+0x368>
 8dc:	88 e5       	ldi	r24, 0x58	; 88
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <vfprintf+0x368>
 8e2:	80 2f       	mov	r24, r16
 8e4:	86 78       	andi	r24, 0x86	; 134
 8e6:	91 f0       	breq	.+36     	; 0x90c <vfprintf+0x37c>
 8e8:	01 ff       	sbrs	r16, 1
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <vfprintf+0x360>
 8ec:	8b e2       	ldi	r24, 0x2B	; 43
 8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <vfprintf+0x362>
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	f7 fc       	sbrc	r15, 7
 8f4:	8d e2       	ldi	r24, 0x2D	; 45
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	b3 01       	movw	r22, r6
 8fa:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <vfprintf+0x37c>
 900:	80 e3       	ldi	r24, 0x30	; 48
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	b3 01       	movw	r22, r6
 906:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 90a:	9a 94       	dec	r9
 90c:	d9 14       	cp	r13, r9
 90e:	c0 f3       	brcs	.-16     	; 0x900 <vfprintf+0x370>
 910:	da 94       	dec	r13
 912:	f1 01       	movw	r30, r2
 914:	ed 0d       	add	r30, r13
 916:	f1 1d       	adc	r31, r1
 918:	80 81       	ld	r24, Z
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	b3 01       	movw	r22, r6
 91e:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 922:	dd 20       	and	r13, r13
 924:	a9 f7       	brne	.-22     	; 0x910 <vfprintf+0x380>
 926:	06 c0       	rjmp	.+12     	; 0x934 <vfprintf+0x3a4>
 928:	80 e2       	ldi	r24, 0x20	; 32
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	b3 01       	movw	r22, r6
 92e:	0e 94 bb 04 	call	0x976	; 0x976 <fputc>
 932:	ea 94       	dec	r14
 934:	ee 20       	and	r14, r14
 936:	c1 f7       	brne	.-16     	; 0x928 <vfprintf+0x398>
 938:	43 ce       	rjmp	.-890    	; 0x5c0 <vfprintf+0x30>
 93a:	f3 01       	movw	r30, r6
 93c:	66 81       	ldd	r22, Z+6	; 0x06
 93e:	77 81       	ldd	r23, Z+7	; 0x07
 940:	cb 01       	movw	r24, r22
 942:	2b 96       	adiw	r28, 0x0b	; 11
 944:	e2 e1       	ldi	r30, 0x12	; 18
 946:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__epilogue_restores__>

0000094a <strnlen_P>:
 94a:	fc 01       	movw	r30, r24
 94c:	05 90       	lpm	r0, Z+
 94e:	61 50       	subi	r22, 0x01	; 1
 950:	70 40       	sbci	r23, 0x00	; 0
 952:	01 10       	cpse	r0, r1
 954:	d8 f7       	brcc	.-10     	; 0x94c <strnlen_P+0x2>
 956:	80 95       	com	r24
 958:	90 95       	com	r25
 95a:	8e 0f       	add	r24, r30
 95c:	9f 1f       	adc	r25, r31
 95e:	08 95       	ret

00000960 <strnlen>:
 960:	fc 01       	movw	r30, r24
 962:	61 50       	subi	r22, 0x01	; 1
 964:	70 40       	sbci	r23, 0x00	; 0
 966:	01 90       	ld	r0, Z+
 968:	01 10       	cpse	r0, r1
 96a:	d8 f7       	brcc	.-10     	; 0x962 <strnlen+0x2>
 96c:	80 95       	com	r24
 96e:	90 95       	com	r25
 970:	8e 0f       	add	r24, r30
 972:	9f 1f       	adc	r25, r31
 974:	08 95       	ret

00000976 <fputc>:
 976:	0f 93       	push	r16
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	8c 01       	movw	r16, r24
 980:	eb 01       	movw	r28, r22
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	81 ff       	sbrs	r24, 1
 986:	1b c0       	rjmp	.+54     	; 0x9be <fputc+0x48>
 988:	82 ff       	sbrs	r24, 2
 98a:	0d c0       	rjmp	.+26     	; 0x9a6 <fputc+0x30>
 98c:	2e 81       	ldd	r18, Y+6	; 0x06
 98e:	3f 81       	ldd	r19, Y+7	; 0x07
 990:	8c 81       	ldd	r24, Y+4	; 0x04
 992:	9d 81       	ldd	r25, Y+5	; 0x05
 994:	28 17       	cp	r18, r24
 996:	39 07       	cpc	r19, r25
 998:	64 f4       	brge	.+24     	; 0x9b2 <fputc+0x3c>
 99a:	e8 81       	ld	r30, Y
 99c:	f9 81       	ldd	r31, Y+1	; 0x01
 99e:	01 93       	st	Z+, r16
 9a0:	f9 83       	std	Y+1, r31	; 0x01
 9a2:	e8 83       	st	Y, r30
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <fputc+0x3c>
 9a6:	e8 85       	ldd	r30, Y+8	; 0x08
 9a8:	f9 85       	ldd	r31, Y+9	; 0x09
 9aa:	80 2f       	mov	r24, r16
 9ac:	09 95       	icall
 9ae:	89 2b       	or	r24, r25
 9b0:	31 f4       	brne	.+12     	; 0x9be <fputc+0x48>
 9b2:	8e 81       	ldd	r24, Y+6	; 0x06
 9b4:	9f 81       	ldd	r25, Y+7	; 0x07
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	9f 83       	std	Y+7, r25	; 0x07
 9ba:	8e 83       	std	Y+6, r24	; 0x06
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <fputc+0x4c>
 9be:	0f ef       	ldi	r16, 0xFF	; 255
 9c0:	1f ef       	ldi	r17, 0xFF	; 255
 9c2:	c8 01       	movw	r24, r16
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	08 95       	ret

000009ce <__ultoa_invert>:
 9ce:	fa 01       	movw	r30, r20
 9d0:	aa 27       	eor	r26, r26
 9d2:	28 30       	cpi	r18, 0x08	; 8
 9d4:	51 f1       	breq	.+84     	; 0xa2a <__ultoa_invert+0x5c>
 9d6:	20 31       	cpi	r18, 0x10	; 16
 9d8:	81 f1       	breq	.+96     	; 0xa3a <__ultoa_invert+0x6c>
 9da:	e8 94       	clt
 9dc:	6f 93       	push	r22
 9de:	6e 7f       	andi	r22, 0xFE	; 254
 9e0:	6e 5f       	subi	r22, 0xFE	; 254
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	af 4f       	sbci	r26, 0xFF	; 255
 9ea:	b1 e0       	ldi	r27, 0x01	; 1
 9ec:	3e d0       	rcall	.+124    	; 0xa6a <__ultoa_invert+0x9c>
 9ee:	b4 e0       	ldi	r27, 0x04	; 4
 9f0:	3c d0       	rcall	.+120    	; 0xa6a <__ultoa_invert+0x9c>
 9f2:	67 0f       	add	r22, r23
 9f4:	78 1f       	adc	r23, r24
 9f6:	89 1f       	adc	r24, r25
 9f8:	9a 1f       	adc	r25, r26
 9fa:	a1 1d       	adc	r26, r1
 9fc:	68 0f       	add	r22, r24
 9fe:	79 1f       	adc	r23, r25
 a00:	8a 1f       	adc	r24, r26
 a02:	91 1d       	adc	r25, r1
 a04:	a1 1d       	adc	r26, r1
 a06:	6a 0f       	add	r22, r26
 a08:	71 1d       	adc	r23, r1
 a0a:	81 1d       	adc	r24, r1
 a0c:	91 1d       	adc	r25, r1
 a0e:	a1 1d       	adc	r26, r1
 a10:	20 d0       	rcall	.+64     	; 0xa52 <__ultoa_invert+0x84>
 a12:	09 f4       	brne	.+2      	; 0xa16 <__ultoa_invert+0x48>
 a14:	68 94       	set
 a16:	3f 91       	pop	r19
 a18:	2a e0       	ldi	r18, 0x0A	; 10
 a1a:	26 9f       	mul	r18, r22
 a1c:	11 24       	eor	r1, r1
 a1e:	30 19       	sub	r19, r0
 a20:	30 5d       	subi	r19, 0xD0	; 208
 a22:	31 93       	st	Z+, r19
 a24:	de f6       	brtc	.-74     	; 0x9dc <__ultoa_invert+0xe>
 a26:	cf 01       	movw	r24, r30
 a28:	08 95       	ret
 a2a:	46 2f       	mov	r20, r22
 a2c:	47 70       	andi	r20, 0x07	; 7
 a2e:	40 5d       	subi	r20, 0xD0	; 208
 a30:	41 93       	st	Z+, r20
 a32:	b3 e0       	ldi	r27, 0x03	; 3
 a34:	0f d0       	rcall	.+30     	; 0xa54 <__ultoa_invert+0x86>
 a36:	c9 f7       	brne	.-14     	; 0xa2a <__ultoa_invert+0x5c>
 a38:	f6 cf       	rjmp	.-20     	; 0xa26 <__ultoa_invert+0x58>
 a3a:	46 2f       	mov	r20, r22
 a3c:	4f 70       	andi	r20, 0x0F	; 15
 a3e:	40 5d       	subi	r20, 0xD0	; 208
 a40:	4a 33       	cpi	r20, 0x3A	; 58
 a42:	18 f0       	brcs	.+6      	; 0xa4a <__ultoa_invert+0x7c>
 a44:	49 5d       	subi	r20, 0xD9	; 217
 a46:	31 fd       	sbrc	r19, 1
 a48:	40 52       	subi	r20, 0x20	; 32
 a4a:	41 93       	st	Z+, r20
 a4c:	02 d0       	rcall	.+4      	; 0xa52 <__ultoa_invert+0x84>
 a4e:	a9 f7       	brne	.-22     	; 0xa3a <__ultoa_invert+0x6c>
 a50:	ea cf       	rjmp	.-44     	; 0xa26 <__ultoa_invert+0x58>
 a52:	b4 e0       	ldi	r27, 0x04	; 4
 a54:	a6 95       	lsr	r26
 a56:	97 95       	ror	r25
 a58:	87 95       	ror	r24
 a5a:	77 95       	ror	r23
 a5c:	67 95       	ror	r22
 a5e:	ba 95       	dec	r27
 a60:	c9 f7       	brne	.-14     	; 0xa54 <__ultoa_invert+0x86>
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	61 05       	cpc	r22, r1
 a66:	71 05       	cpc	r23, r1
 a68:	08 95       	ret
 a6a:	9b 01       	movw	r18, r22
 a6c:	ac 01       	movw	r20, r24
 a6e:	0a 2e       	mov	r0, r26
 a70:	06 94       	lsr	r0
 a72:	57 95       	ror	r21
 a74:	47 95       	ror	r20
 a76:	37 95       	ror	r19
 a78:	27 95       	ror	r18
 a7a:	ba 95       	dec	r27
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__ultoa_invert+0xa2>
 a7e:	62 0f       	add	r22, r18
 a80:	73 1f       	adc	r23, r19
 a82:	84 1f       	adc	r24, r20
 a84:	95 1f       	adc	r25, r21
 a86:	a0 1d       	adc	r26, r0
 a88:	08 95       	ret

00000a8a <__prologue_saves__>:
 a8a:	2f 92       	push	r2
 a8c:	3f 92       	push	r3
 a8e:	4f 92       	push	r4
 a90:	5f 92       	push	r5
 a92:	6f 92       	push	r6
 a94:	7f 92       	push	r7
 a96:	8f 92       	push	r8
 a98:	9f 92       	push	r9
 a9a:	af 92       	push	r10
 a9c:	bf 92       	push	r11
 a9e:	cf 92       	push	r12
 aa0:	df 92       	push	r13
 aa2:	ef 92       	push	r14
 aa4:	ff 92       	push	r15
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	cd b7       	in	r28, 0x3d	; 61
 ab0:	de b7       	in	r29, 0x3e	; 62
 ab2:	ca 1b       	sub	r28, r26
 ab4:	db 0b       	sbc	r29, r27
 ab6:	0f b6       	in	r0, 0x3f	; 63
 ab8:	f8 94       	cli
 aba:	de bf       	out	0x3e, r29	; 62
 abc:	0f be       	out	0x3f, r0	; 63
 abe:	cd bf       	out	0x3d, r28	; 61
 ac0:	09 94       	ijmp

00000ac2 <__epilogue_restores__>:
 ac2:	2a 88       	ldd	r2, Y+18	; 0x12
 ac4:	39 88       	ldd	r3, Y+17	; 0x11
 ac6:	48 88       	ldd	r4, Y+16	; 0x10
 ac8:	5f 84       	ldd	r5, Y+15	; 0x0f
 aca:	6e 84       	ldd	r6, Y+14	; 0x0e
 acc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ace:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad4:	b9 84       	ldd	r11, Y+9	; 0x09
 ad6:	c8 84       	ldd	r12, Y+8	; 0x08
 ad8:	df 80       	ldd	r13, Y+7	; 0x07
 ada:	ee 80       	ldd	r14, Y+6	; 0x06
 adc:	fd 80       	ldd	r15, Y+5	; 0x05
 ade:	0c 81       	ldd	r16, Y+4	; 0x04
 ae0:	1b 81       	ldd	r17, Y+3	; 0x03
 ae2:	aa 81       	ldd	r26, Y+2	; 0x02
 ae4:	b9 81       	ldd	r27, Y+1	; 0x01
 ae6:	ce 0f       	add	r28, r30
 ae8:	d1 1d       	adc	r29, r1
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	f8 94       	cli
 aee:	de bf       	out	0x3e, r29	; 62
 af0:	0f be       	out	0x3f, r0	; 63
 af2:	cd bf       	out	0x3d, r28	; 61
 af4:	ed 01       	movw	r28, r26
 af6:	08 95       	ret

00000af8 <_exit>:
 af8:	f8 94       	cli

00000afa <__stop_program>:
 afa:	ff cf       	rjmp	.-2      	; 0xafa <__stop_program>
