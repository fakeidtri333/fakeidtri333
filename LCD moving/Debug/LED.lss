
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000004ae  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000117c  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bfb  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ee ea       	ldi	r30, 0xAE	; 174
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	ae 37       	cpi	r26, 0x7E	; 126
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  ba:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:

#include<avr/io.h>
#include<util/delay.h>
#include<lcd_lib.h>
int main()
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	6d 97       	sbiw	r28, 0x1d	; 29
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
	char a[]="  BRiCS Summer Training 2011";
  da:	de 01       	movw	r26, r28
  dc:	11 96       	adiw	r26, 0x01	; 1
  de:	e0 e6       	ldi	r30, 0x60	; 96
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	8d e1       	ldi	r24, 0x1D	; 29
  e4:	01 90       	ld	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x22>
	LCDinit();
  ec:	0e 94 37 01 	call	0x26e	; 0x26e <LCDinit>
	LCDclr();
  f0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCDclr>
	LCDGotoXY(0,0);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	0e 94 ed 00 	call	0x1da	; 0x1da <LCDGotoXY>
	LCDdisplay(a);
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	0e 94 23 02 	call	0x446	; 0x446 <LCDdisplay>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 108:	04 e6       	ldi	r16, 0x64	; 100
 10a:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		LCDshiftRight(1);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 90 01 	call	0x320	; 0x320 <LCDshiftRight>
 114:	80 ea       	ldi	r24, 0xA0	; 160
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	f8 01       	movw	r30, r16
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x56>
 122:	f4 cf       	rjmp	.-24     	; 0x10c <main+0x4a>

00000124 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 124:	28 2f       	mov	r18, r24
 126:	20 7f       	andi	r18, 0xF0	; 240
 128:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
 12a:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 12c:	aa 9a       	sbi	0x15, 2	; 21
 12e:	28 ee       	ldi	r18, 0xE8	; 232
 130:	33 e0       	ldi	r19, 0x03	; 3
 132:	f9 01       	movw	r30, r18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 138:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 13a:	a8 98       	cbi	0x15, 0	; 21
 13c:	f9 01       	movw	r30, r18
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	44 e0       	ldi	r20, 0x04	; 4
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	4a 95       	dec	r20
 14c:	e1 f7       	brne	.-8      	; 0x146 <LCDsendChar+0x22>
 14e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 150:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 152:	aa 9a       	sbi	0x15, 2	; 21
 154:	c9 01       	movw	r24, r18
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 15a:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 15c:	a8 98       	cbi	0x15, 0	; 21
 15e:	c9 01       	movw	r24, r18
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 164:	08 95       	ret

00000166 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 166:	28 2f       	mov	r18, r24
 168:	20 7f       	andi	r18, 0xF0	; 240
 16a:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 16c:	aa 9a       	sbi	0x15, 2	; 21
 16e:	28 ee       	ldi	r18, 0xE8	; 232
 170:	33 e0       	ldi	r19, 0x03	; 3
 172:	f9 01       	movw	r30, r18
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 178:	aa 98       	cbi	0x15, 2	; 21
 17a:	f9 01       	movw	r30, r18
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	54 e0       	ldi	r21, 0x04	; 4
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	5a 95       	dec	r21
 18a:	e1 f7       	brne	.-8      	; 0x184 <LCDsendCommand+0x1e>
 18c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 18e:	aa 9a       	sbi	0x15, 2	; 21
 190:	c9 01       	movw	r24, r18
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 196:	aa 98       	cbi	0x15, 2	; 21
 198:	c9 01       	movw	r24, r18
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 19e:	08 95       	ret

000001a0 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
}
 1a6:	08 95       	ret

000001a8 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
}
 1ae:	08 95       	ret

000001b0 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <LCDstring+0x20>
 1be:	ec 01       	movw	r28, r24
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 1c4:	89 91       	ld	r24, Y+
 1c6:	0e 94 92 00 	call	0x124	; 0x124 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
 1cc:	10 17       	cp	r17, r16
 1ce:	d0 f3       	brcs	.-12     	; 0x1c4 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 1da:	62 30       	cpi	r22, 0x02	; 2
 1dc:	31 f0       	breq	.+12     	; 0x1ea <LCDGotoXY+0x10>
 1de:	63 30       	cpi	r22, 0x03	; 3
 1e0:	31 f0       	breq	.+12     	; 0x1ee <LCDGotoXY+0x14>
 1e2:	61 30       	cpi	r22, 0x01	; 1
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1e6:	80 5c       	subi	r24, 0xC0	; 192
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1ea:	8c 5e       	subi	r24, 0xEC	; 236
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1ee:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
	
}
 1f6:	08 95       	ret

000001f8 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
 200:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 202:	64 2f       	mov	r22, r20
 204:	0e 94 ed 00 	call	0x1da	; 0x1da <LCDGotoXY>
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	03 c0       	rjmp	.+6      	; 0x212 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 20c:	0e 94 92 00 	call	0x124	; 0x124 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 210:	1f 5f       	subi	r17, 0xFF	; 255
 212:	fe 01       	movw	r30, r28
 214:	e1 0f       	add	r30, r17
 216:	f1 1d       	adc	r31, r1
 218:	84 91       	lpm	r24, Z+
 21a:	88 23       	and	r24, r24
 21c:	b9 f7       	brne	.-18     	; 0x20c <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	08 95       	ret

00000226 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	7c 01       	movw	r14, r24
 234:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 236:	11 0f       	add	r17, r17
 238:	11 0f       	add	r17, r17
 23a:	11 0f       	add	r17, r17
 23c:	10 64       	ori	r17, 0x40	; 64
 23e:	c0 e0       	ldi	r28, 0x00	; 0
 240:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 242:	f7 01       	movw	r30, r14
 244:	ec 0f       	add	r30, r28
 246:	fd 1f       	adc	r31, r29
 248:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 24a:	81 2f       	mov	r24, r17
 24c:	8c 0f       	add	r24, r28
 24e:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
		LCDsendChar(pcc);
 252:	80 2f       	mov	r24, r16
 254:	0e 94 92 00 	call	0x124	; 0x124 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 258:	21 96       	adiw	r28, 0x01	; 1
 25a:	c8 30       	cpi	r28, 0x08	; 8
 25c:	d1 05       	cpc	r29, r1
 25e:	89 f7       	brne	.-30     	; 0x242 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	08 95       	ret

0000026e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	88 e9       	ldi	r24, 0x98	; 152
 276:	9a e3       	ldi	r25, 0x3A	; 58
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 27c:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 27e:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 280:	84 b3       	in	r24, 0x14	; 20
 282:	80 6f       	ori	r24, 0xF0	; 240
 284:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 286:	84 b3       	in	r24, 0x14	; 20
 288:	87 60       	ori	r24, 0x07	; 7
 28a:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 290:	aa 9a       	sbi	0x15, 2	; 21
 292:	28 ee       	ldi	r18, 0xE8	; 232
 294:	33 e0       	ldi	r19, 0x03	; 3
 296:	f9 01       	movw	r30, r18
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 29c:	aa 98       	cbi	0x15, 2	; 21
 29e:	f9 01       	movw	r30, r18
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 2a4:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2a6:	aa 9a       	sbi	0x15, 2	; 21
 2a8:	c9 01       	movw	r24, r18
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2ae:	aa 98       	cbi	0x15, 2	; 21
 2b0:	c9 01       	movw	r24, r18
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 2b6:	80 e2       	ldi	r24, 0x20	; 32
 2b8:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 2ba:	aa 9a       	sbi	0x15, 2	; 21
 2bc:	c9 01       	movw	r24, r18
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2c2:	aa 98       	cbi	0x15, 2	; 21
 2c4:	c9 01       	movw	r24, r18
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 2ca:	88 e2       	ldi	r24, 0x28	; 40
 2cc:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
 2d6:	c4 e5       	ldi	r28, 0x54	; 84
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
 2da:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2dc:	16 2f       	mov	r17, r22
 2de:	1f 5f       	subi	r17, 0xFF	; 255
 2e0:	ce 01       	movw	r24, r28
 2e2:	0e 94 13 01 	call	0x226	; 0x226 <LCDdefinechar>
 2e6:	28 96       	adiw	r28, 0x08	; 8
 2e8:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2ea:	18 30       	cpi	r17, 0x08	; 8
 2ec:	b9 f7       	brne	.-18     	; 0x2dc <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	08 95       	ret

000002f6 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 302:	08 2f       	mov	r16, r24
 304:	10 e0       	ldi	r17, 0x00	; 0
 306:	04 c0       	rjmp	.+8      	; 0x310 <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 308:	8e e1       	ldi	r24, 0x1E	; 30
 30a:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 30e:	21 96       	adiw	r28, 0x01	; 1
 310:	c0 17       	cp	r28, r16
 312:	d1 07       	cpc	r29, r17
 314:	cc f3       	brlt	.-14     	; 0x308 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 32c:	08 2f       	mov	r16, r24
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	04 c0       	rjmp	.+8      	; 0x33a <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 332:	88 e1       	ldi	r24, 0x18	; 24
 334:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 338:	21 96       	adiw	r28, 0x01	; 1
 33a:	c0 17       	cp	r28, r16
 33c:	d1 07       	cpc	r29, r17
 33e:	cc f3       	brlt	.-14     	; 0x332 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 34a:	8e e0       	ldi	r24, 0x0E	; 14
 34c:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
}
 350:	08 95       	ret

00000352 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 352:	8f e0       	ldi	r24, 0x0F	; 15
 354:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
}
 358:	08 95       	ret

0000035a <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 35a:	8c e0       	ldi	r24, 0x0C	; 12
 35c:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
}
 360:	08 95       	ret

00000362 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
}
 368:	08 95       	ret

0000036a <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
}
 370:	08 95       	ret

00000372 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 37e:	08 2f       	mov	r16, r24
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	04 c0       	rjmp	.+8      	; 0x38c <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 38a:	21 96       	adiw	r28, 0x01	; 1
 38c:	c0 17       	cp	r28, r16
 38e:	d1 07       	cpc	r29, r17
 390:	cc f3       	brlt	.-14     	; 0x384 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	c0 e0       	ldi	r28, 0x00	; 0
 3a6:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 3a8:	08 2f       	mov	r16, r24
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 3ae:	84 e1       	ldi	r24, 0x14	; 20
 3b0:	0e 94 b3 00 	call	0x166	; 0x166 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 3b4:	21 96       	adiw	r28, 0x01	; 1
 3b6:	c0 17       	cp	r28, r16
 3b8:	d1 07       	cpc	r29, r17
 3ba:	cc f3       	brlt	.-14     	; 0x3ae <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 3d6:	96 e0       	ldi	r25, 0x06	; 6
 3d8:	89 9f       	mul	r24, r25
 3da:	c0 01       	movw	r24, r0
 3dc:	11 24       	eor	r1, r1
 3de:	24 2f       	mov	r18, r20
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	ac 01       	movw	r20, r24
 3e4:	42 9f       	mul	r20, r18
 3e6:	c0 01       	movw	r24, r0
 3e8:	43 9f       	mul	r20, r19
 3ea:	90 0d       	add	r25, r0
 3ec:	52 9f       	mul	r21, r18
 3ee:	90 0d       	add	r25, r0
 3f0:	11 24       	eor	r1, r1
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	0e 94 42 02 	call	0x484	; 0x484 <__divmodhi4>
 3f8:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3fa:	cb 01       	movw	r24, r22
 3fc:	66 e0       	ldi	r22, 0x06	; 6
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 2e 02 	call	0x45c	; 0x45c <__udivmodhi4>
 404:	e8 2e       	mov	r14, r24
 406:	ff 24       	eor	r15, r15
 408:	00 e0       	ldi	r16, 0x00	; 0
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	12 c0       	rjmp	.+36     	; 0x432 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 40e:	c8 01       	movw	r24, r16
 410:	05 96       	adiw	r24, 0x05	; 5
 412:	c8 17       	cp	r28, r24
 414:	d9 07       	cpc	r29, r25
 416:	10 f0       	brcs	.+4      	; 0x41c <LCDprogressBar+0x56>
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	06 c0       	rjmp	.+12     	; 0x428 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 41c:	c0 17       	cp	r28, r16
 41e:	d1 07       	cpc	r29, r17
 420:	10 f0       	brcs	.+4      	; 0x426 <LCDprogressBar+0x60>
 422:	8e 2d       	mov	r24, r14
 424:	01 c0       	rjmp	.+2      	; 0x428 <LCDprogressBar+0x62>
 426:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 428:	0e 94 92 00 	call	0x124	; 0x124 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 42c:	f3 94       	inc	r15
 42e:	0a 5f       	subi	r16, 0xFA	; 250
 430:	1f 4f       	sbci	r17, 0xFF	; 255
 432:	fd 14       	cp	r15, r13
 434:	60 f3       	brcs	.-40     	; 0x40e <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	08 95       	ret

00000446 <LCDdisplay>:

void LCDdisplay(char a[])
{
	LCDstring(a,strlen(a));
 446:	dc 01       	movw	r26, r24
 448:	0d 90       	ld	r0, X+
 44a:	00 20       	and	r0, r0
 44c:	e9 f7       	brne	.-6      	; 0x448 <LCDdisplay+0x2>
 44e:	11 97       	sbiw	r26, 0x01	; 1
 450:	a8 1b       	sub	r26, r24
 452:	b9 0b       	sbc	r27, r25
 454:	6a 2f       	mov	r22, r26
 456:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCDstring>
}
 45a:	08 95       	ret

0000045c <__udivmodhi4>:
 45c:	aa 1b       	sub	r26, r26
 45e:	bb 1b       	sub	r27, r27
 460:	51 e1       	ldi	r21, 0x11	; 17
 462:	07 c0       	rjmp	.+14     	; 0x472 <__udivmodhi4_ep>

00000464 <__udivmodhi4_loop>:
 464:	aa 1f       	adc	r26, r26
 466:	bb 1f       	adc	r27, r27
 468:	a6 17       	cp	r26, r22
 46a:	b7 07       	cpc	r27, r23
 46c:	10 f0       	brcs	.+4      	; 0x472 <__udivmodhi4_ep>
 46e:	a6 1b       	sub	r26, r22
 470:	b7 0b       	sbc	r27, r23

00000472 <__udivmodhi4_ep>:
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	5a 95       	dec	r21
 478:	a9 f7       	brne	.-22     	; 0x464 <__udivmodhi4_loop>
 47a:	80 95       	com	r24
 47c:	90 95       	com	r25
 47e:	bc 01       	movw	r22, r24
 480:	cd 01       	movw	r24, r26
 482:	08 95       	ret

00000484 <__divmodhi4>:
 484:	97 fb       	bst	r25, 7
 486:	09 2e       	mov	r0, r25
 488:	07 26       	eor	r0, r23
 48a:	0a d0       	rcall	.+20     	; 0x4a0 <__divmodhi4_neg1>
 48c:	77 fd       	sbrc	r23, 7
 48e:	04 d0       	rcall	.+8      	; 0x498 <__divmodhi4_neg2>
 490:	e5 df       	rcall	.-54     	; 0x45c <__udivmodhi4>
 492:	06 d0       	rcall	.+12     	; 0x4a0 <__divmodhi4_neg1>
 494:	00 20       	and	r0, r0
 496:	1a f4       	brpl	.+6      	; 0x49e <__divmodhi4_exit>

00000498 <__divmodhi4_neg2>:
 498:	70 95       	com	r23
 49a:	61 95       	neg	r22
 49c:	7f 4f       	sbci	r23, 0xFF	; 255

0000049e <__divmodhi4_exit>:
 49e:	08 95       	ret

000004a0 <__divmodhi4_neg1>:
 4a0:	f6 f7       	brtc	.-4      	; 0x49e <__divmodhi4_exit>
 4a2:	90 95       	com	r25
 4a4:	81 95       	neg	r24
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
