
password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000e74  00000f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008000a8  008000a8  00000f50  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001f4  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c43  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034b  00000000  00000000  00001dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000979  00000000  00000000  00002112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000296  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000067a  00000000  00000000  00002ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e4 e7       	ldi	r30, 0x74	; 116
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	a8 3a       	cpi	r26, 0xA8	; 168
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	a8 ea       	ldi	r26, 0xA8	; 168
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a0 3c       	cpi	r26, 0xC0	; 192
  c2:	b1 07       	cpc	r27, r17
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 03 02 	call	0x406	; 0x406 <main>
  ca:	0c 94 38 07 	jmp	0xe70	; 0xe70 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <get_key>:



int get_key()
{
	keypad_ddr=1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8a bb       	out	0x1a, r24	; 26
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <get_key+0x6>
	_delay_us(10);
	while(keypad_ddr>0)
	{
		keypad_port=~keypad_ddr;_delay_us(10);
  dc:	2d e0       	ldi	r18, 0x0D	; 13
  de:	11 c0       	rjmp	.+34     	; 0x102 <get_key+0x30>
  e0:	8a b3       	in	r24, 0x1a	; 26
  e2:	80 95       	com	r24
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	82 2f       	mov	r24, r18
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <get_key+0x16>
		if(keypad_pin!=keypad_port) return keypad_pin;
  ec:	99 b3       	in	r25, 0x19	; 25
  ee:	8b b3       	in	r24, 0x1b	; 27
  f0:	98 17       	cp	r25, r24
  f2:	21 f0       	breq	.+8      	; 0xfc <get_key+0x2a>
  f4:	89 b3       	in	r24, 0x19	; 25
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	08 c0       	rjmp	.+16     	; 0x10c <get_key+0x3a>
		keypad_ddr=keypad_ddr<<1;
  fc:	8a b3       	in	r24, 0x1a	; 26
  fe:	88 0f       	add	r24, r24
 100:	8a bb       	out	0x1a, r24	; 26

int get_key()
{
	keypad_ddr=1;
	_delay_us(10);
	while(keypad_ddr>0)
 102:	8a b3       	in	r24, 0x1a	; 26
 104:	88 23       	and	r24, r24
 106:	61 f7       	brne	.-40     	; 0xe0 <get_key+0xe>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
		keypad_port=~keypad_ddr;_delay_us(10);
		if(keypad_pin!=keypad_port) return keypad_pin;
		keypad_ddr=keypad_ddr<<1;
	}
	return 0;
}
 10c:	c9 01       	movw	r24, r18
 10e:	08 95       	ret

00000110 <trigger_lock>:
}


void trigger_lock()
{
	lock_port|=(1<<lock_pin1);
 110:	94 9a       	sbi	0x12, 4	; 18
	lock_port|=(1<<lock_pin2);
 112:	95 9a       	sbi	0x12, 5	; 18
	lock_port&=~(1<<lock_pin1);
 114:	94 98       	cbi	0x12, 4	; 18
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11a:	24 e6       	ldi	r18, 0x64	; 100
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <trigger_lock+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <trigger_lock+0xe>
	_delay_ms(1000);
	lock_port|=(1<<lock_pin1);
 128:	94 9a       	sbi	0x12, 4	; 18
 12a:	80 e5       	ldi	r24, 0x50	; 80
 12c:	93 ec       	ldi	r25, 0xC3	; 195
 12e:	24 e6       	ldi	r18, 0x64	; 100
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <trigger_lock+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <trigger_lock+0x22>
	_delay_ms(5000);
	lock_port&=~(1<<lock_pin2);
 13c:	95 98       	cbi	0x12, 5	; 18
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	97 e2       	ldi	r25, 0x27	; 39
 142:	24 e6       	ldi	r18, 0x64	; 100
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <trigger_lock+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14e:	d9 f7       	brne	.-10     	; 0x146 <trigger_lock+0x36>
	_delay_ms(1000);
	lock_port|=(1<<lock_pin2);
 150:	95 9a       	sbi	0x12, 5	; 18
}
 152:	08 95       	ret

00000154 <trigger_alarm>:

void trigger_alarm()
{
	alarm_port|=(1<<alarm_pin);
 154:	97 9a       	sbi	0x12, 7	; 18
 156:	ff cf       	rjmp	.-2      	; 0x156 <trigger_alarm+0x2>

00000158 <define_key>:
		LCDstring(pass,strlen(pass));
	}
}

void define_key()
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	if(k==0)
 15c:	20 91 bc 00 	lds	r18, 0x00BC
 160:	30 91 bd 00 	lds	r19, 0x00BD
 164:	21 15       	cp	r18, r1
 166:	31 05       	cpc	r19, r1
 168:	21 f4       	brne	.+8      	; 0x172 <define_key+0x1a>
		key_status=0;
 16a:	10 92 ab 00 	sts	0x00AB, r1
 16e:	10 92 aa 00 	sts	0x00AA, r1
	if(key_status==0)
 172:	80 91 aa 00 	lds	r24, 0x00AA
 176:	90 91 ab 00 	lds	r25, 0x00AB
 17a:	89 2b       	or	r24, r25
 17c:	09 f0       	breq	.+2      	; 0x180 <define_key+0x28>
 17e:	40 c1       	rjmp	.+640    	; 0x400 <define_key+0x2a8>
	{
		switch(k)
 180:	2e 3b       	cpi	r18, 0xBE	; 190
 182:	31 05       	cpc	r19, r1
 184:	09 f4       	brne	.+2      	; 0x188 <define_key+0x30>
 186:	96 c0       	rjmp	.+300    	; 0x2b4 <define_key+0x15c>
 188:	2f 3b       	cpi	r18, 0xBF	; 191
 18a:	31 05       	cpc	r19, r1
 18c:	0c f5       	brge	.+66     	; 0x1d0 <define_key+0x78>
 18e:	2e 37       	cpi	r18, 0x7E	; 126
 190:	31 05       	cpc	r19, r1
 192:	09 f4       	brne	.+2      	; 0x196 <define_key+0x3e>
 194:	c1 c0       	rjmp	.+386    	; 0x318 <define_key+0x1c0>
 196:	2f 37       	cpi	r18, 0x7F	; 127
 198:	31 05       	cpc	r19, r1
 19a:	6c f4       	brge	.+26     	; 0x1b6 <define_key+0x5e>
 19c:	2b 37       	cpi	r18, 0x7B	; 123
 19e:	31 05       	cpc	r19, r1
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <define_key+0x4c>
 1a2:	cc c0       	rjmp	.+408    	; 0x33c <define_key+0x1e4>
 1a4:	2d 37       	cpi	r18, 0x7D	; 125
 1a6:	31 05       	cpc	r19, r1
 1a8:	09 f4       	brne	.+2      	; 0x1ac <define_key+0x54>
 1aa:	bf c0       	rjmp	.+382    	; 0x32a <define_key+0x1d2>
 1ac:	27 37       	cpi	r18, 0x77	; 119
 1ae:	31 05       	cpc	r19, r1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <define_key+0x5c>
 1b2:	26 c1       	rjmp	.+588    	; 0x400 <define_key+0x2a8>
 1b4:	d2 c0       	rjmp	.+420    	; 0x35a <define_key+0x202>
 1b6:	2b 3b       	cpi	r18, 0xBB	; 187
 1b8:	31 05       	cpc	r19, r1
 1ba:	09 f4       	brne	.+2      	; 0x1be <define_key+0x66>
 1bc:	8d c0       	rjmp	.+282    	; 0x2d8 <define_key+0x180>
 1be:	2d 3b       	cpi	r18, 0xBD	; 189
 1c0:	31 05       	cpc	r19, r1
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <define_key+0x6e>
 1c4:	80 c0       	rjmp	.+256    	; 0x2c6 <define_key+0x16e>
 1c6:	27 3b       	cpi	r18, 0xB7	; 183
 1c8:	31 05       	cpc	r19, r1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <define_key+0x76>
 1cc:	19 c1       	rjmp	.+562    	; 0x400 <define_key+0x2a8>
 1ce:	8d c0       	rjmp	.+282    	; 0x2ea <define_key+0x192>
 1d0:	2e 3d       	cpi	r18, 0xDE	; 222
 1d2:	31 05       	cpc	r19, r1
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <define_key+0x80>
 1d6:	46 c0       	rjmp	.+140    	; 0x264 <define_key+0x10c>
 1d8:	2f 3d       	cpi	r18, 0xDF	; 223
 1da:	31 05       	cpc	r19, r1
 1dc:	6c f4       	brge	.+26     	; 0x1f8 <define_key+0xa0>
 1de:	2b 3d       	cpi	r18, 0xDB	; 219
 1e0:	31 05       	cpc	r19, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <define_key+0x8e>
 1e4:	51 c0       	rjmp	.+162    	; 0x288 <define_key+0x130>
 1e6:	2d 3d       	cpi	r18, 0xDD	; 221
 1e8:	31 05       	cpc	r19, r1
 1ea:	09 f4       	brne	.+2      	; 0x1ee <define_key+0x96>
 1ec:	44 c0       	rjmp	.+136    	; 0x276 <define_key+0x11e>
 1ee:	27 3d       	cpi	r18, 0xD7	; 215
 1f0:	31 05       	cpc	r19, r1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <define_key+0x9e>
 1f4:	05 c1       	rjmp	.+522    	; 0x400 <define_key+0x2a8>
 1f6:	51 c0       	rjmp	.+162    	; 0x29a <define_key+0x142>
 1f8:	2b 3e       	cpi	r18, 0xEB	; 235
 1fa:	31 05       	cpc	r19, r1
 1fc:	09 f1       	breq	.+66     	; 0x240 <define_key+0xe8>
 1fe:	2c 3e       	cpi	r18, 0xEC	; 236
 200:	31 05       	cpc	r19, r1
 202:	2c f4       	brge	.+10     	; 0x20e <define_key+0xb6>
 204:	27 3e       	cpi	r18, 0xE7	; 231
 206:	31 05       	cpc	r19, r1
 208:	09 f0       	breq	.+2      	; 0x20c <define_key+0xb4>
 20a:	fa c0       	rjmp	.+500    	; 0x400 <define_key+0x2a8>
 20c:	22 c0       	rjmp	.+68     	; 0x252 <define_key+0xfa>
 20e:	2d 3e       	cpi	r18, 0xED	; 237
 210:	31 05       	cpc	r19, r1
 212:	69 f0       	breq	.+26     	; 0x22e <define_key+0xd6>
 214:	2e 3e       	cpi	r18, 0xEE	; 238
 216:	31 05       	cpc	r19, r1
 218:	09 f0       	breq	.+2      	; 0x21c <define_key+0xc4>
 21a:	f2 c0       	rjmp	.+484    	; 0x400 <define_key+0x2a8>
		{
			case 238:
						pass[n]='1';
 21c:	80 91 a8 00 	lds	r24, 0x00A8
 220:	90 91 a9 00 	lds	r25, 0x00A9
 224:	fc 01       	movw	r30, r24
 226:	ef 56       	subi	r30, 0x6F	; 111
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	21 e3       	ldi	r18, 0x31	; 49
 22c:	8f c0       	rjmp	.+286    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 237:
						pass[n]='2';
 22e:	80 91 a8 00 	lds	r24, 0x00A8
 232:	90 91 a9 00 	lds	r25, 0x00A9
 236:	fc 01       	movw	r30, r24
 238:	ef 56       	subi	r30, 0x6F	; 111
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	22 e3       	ldi	r18, 0x32	; 50
 23e:	86 c0       	rjmp	.+268    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 235:
						pass[n]='3';
 240:	80 91 a8 00 	lds	r24, 0x00A8
 244:	90 91 a9 00 	lds	r25, 0x00A9
 248:	fc 01       	movw	r30, r24
 24a:	ef 56       	subi	r30, 0x6F	; 111
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	23 e3       	ldi	r18, 0x33	; 51
 250:	7d c0       	rjmp	.+250    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 231:
						pass[n]=')';
 252:	80 91 a8 00 	lds	r24, 0x00A8
 256:	90 91 a9 00 	lds	r25, 0x00A9
 25a:	fc 01       	movw	r30, r24
 25c:	ef 56       	subi	r30, 0x6F	; 111
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	29 e2       	ldi	r18, 0x29	; 41
 262:	74 c0       	rjmp	.+232    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 222:
						pass[n]='4';
 264:	80 91 a8 00 	lds	r24, 0x00A8
 268:	90 91 a9 00 	lds	r25, 0x00A9
 26c:	fc 01       	movw	r30, r24
 26e:	ef 56       	subi	r30, 0x6F	; 111
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	24 e3       	ldi	r18, 0x34	; 52
 274:	6b c0       	rjmp	.+214    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 221:
						pass[n]='5';
 276:	80 91 a8 00 	lds	r24, 0x00A8
 27a:	90 91 a9 00 	lds	r25, 0x00A9
 27e:	fc 01       	movw	r30, r24
 280:	ef 56       	subi	r30, 0x6F	; 111
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	25 e3       	ldi	r18, 0x35	; 53
 286:	62 c0       	rjmp	.+196    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 219:
						pass[n]='6';
 288:	80 91 a8 00 	lds	r24, 0x00A8
 28c:	90 91 a9 00 	lds	r25, 0x00A9
 290:	fc 01       	movw	r30, r24
 292:	ef 56       	subi	r30, 0x6F	; 111
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	26 e3       	ldi	r18, 0x36	; 54
 298:	59 c0       	rjmp	.+178    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 215:
						n=0;
 29a:	10 92 a9 00 	sts	0x00A9, r1
 29e:	10 92 a8 00 	sts	0x00A8, r1
						LCDclr();
 2a2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclr>
						sprintf(pass,"        ");
 2a6:	81 e9       	ldi	r24, 0x91	; 145
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	60 e6       	ldi	r22, 0x60	; 96
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	0e 94 24 04 	call	0x848	; 0x848 <strcpy>
 2b2:	85 c0       	rjmp	.+266    	; 0x3be <define_key+0x266>
						key_status=1;
						break;
			case 190:
						pass[n]='7';
 2b4:	80 91 a8 00 	lds	r24, 0x00A8
 2b8:	90 91 a9 00 	lds	r25, 0x00A9
 2bc:	fc 01       	movw	r30, r24
 2be:	ef 56       	subi	r30, 0x6F	; 111
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	27 e3       	ldi	r18, 0x37	; 55
 2c4:	43 c0       	rjmp	.+134    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 189:
						pass[n]='8';
 2c6:	80 91 a8 00 	lds	r24, 0x00A8
 2ca:	90 91 a9 00 	lds	r25, 0x00A9
 2ce:	fc 01       	movw	r30, r24
 2d0:	ef 56       	subi	r30, 0x6F	; 111
 2d2:	ff 4f       	sbci	r31, 0xFF	; 255
 2d4:	28 e3       	ldi	r18, 0x38	; 56
 2d6:	3a c0       	rjmp	.+116    	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 187:
						pass[n]='9';
 2d8:	80 91 a8 00 	lds	r24, 0x00A8
 2dc:	90 91 a9 00 	lds	r25, 0x00A9
 2e0:	fc 01       	movw	r30, r24
 2e2:	ef 56       	subi	r30, 0x6F	; 111
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	29 e3       	ldi	r18, 0x39	; 57
 2e8:	31 c0       	rjmp	.+98     	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 183:
						if(n>0)
 2ea:	80 91 a8 00 	lds	r24, 0x00A8
 2ee:	90 91 a9 00 	lds	r25, 0x00A9
 2f2:	18 16       	cp	r1, r24
 2f4:	19 06       	cpc	r1, r25
 2f6:	2c f4       	brge	.+10     	; 0x302 <define_key+0x1aa>
							n--;
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	90 93 a9 00 	sts	0x00A9, r25
 2fe:	80 93 a8 00 	sts	0x00A8, r24
						LCDclr();
 302:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclr>
						pass[n]=' ';
 306:	e0 91 a8 00 	lds	r30, 0x00A8
 30a:	f0 91 a9 00 	lds	r31, 0x00A9
 30e:	ef 56       	subi	r30, 0x6F	; 111
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	80 e2       	ldi	r24, 0x20	; 32
 314:	80 83       	st	Z, r24
 316:	53 c0       	rjmp	.+166    	; 0x3be <define_key+0x266>
						key_status=1;
						break;
			case 126:
						pass[n]='*';
 318:	80 91 a8 00 	lds	r24, 0x00A8
 31c:	90 91 a9 00 	lds	r25, 0x00A9
 320:	fc 01       	movw	r30, r24
 322:	ef 56       	subi	r30, 0x6F	; 111
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	2a e2       	ldi	r18, 0x2A	; 42
 328:	11 c0       	rjmp	.+34     	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 125:
						pass[n]='0';
 32a:	80 91 a8 00 	lds	r24, 0x00A8
 32e:	90 91 a9 00 	lds	r25, 0x00A9
 332:	fc 01       	movw	r30, r24
 334:	ef 56       	subi	r30, 0x6F	; 111
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	20 e3       	ldi	r18, 0x30	; 48
 33a:	08 c0       	rjmp	.+16     	; 0x34c <define_key+0x1f4>
						n++;
						key_status=1;
						break;
			case 123:
						pass[n]='#';
 33c:	80 91 a8 00 	lds	r24, 0x00A8
 340:	90 91 a9 00 	lds	r25, 0x00A9
 344:	fc 01       	movw	r30, r24
 346:	ef 56       	subi	r30, 0x6F	; 111
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	23 e2       	ldi	r18, 0x23	; 35
 34c:	20 83       	st	Z, r18
						n++;
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 a9 00 	sts	0x00A9, r25
 354:	80 93 a8 00 	sts	0x00A8, r24
 358:	32 c0       	rjmp	.+100    	; 0x3be <define_key+0x266>
						key_status=1;
						break;
			case 119:
						n=0;
 35a:	10 92 a9 00 	sts	0x00A9, r1
 35e:	10 92 a8 00 	sts	0x00A8, r1
						if(strncmp(pass,password,5)==0)
 362:	81 e9       	ldi	r24, 0x91	; 145
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	61 ea       	ldi	r22, 0xA1	; 161
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	45 e0       	ldi	r20, 0x05	; 5
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	0e 94 2b 04 	call	0x856	; 0x856 <strncmp>
 372:	cc ea       	ldi	r28, 0xAC	; 172
 374:	d0 e0       	ldi	r29, 0x00	; 0
 376:	00 97       	sbiw	r24, 0x00	; 0
 378:	49 f5       	brne	.+82     	; 0x3cc <define_key+0x274>
						{
							sprintf(pass,"        ");
 37a:	81 e9       	ldi	r24, 0x91	; 145
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	60 e6       	ldi	r22, 0x60	; 96
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	0e 94 24 04 	call	0x848	; 0x848 <strcpy>
							LCDclr();
 386:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclr>
							sprintf(buff," PASSWORD RIGHT");
 38a:	ce 01       	movw	r24, r28
 38c:	69 e6       	ldi	r22, 0x69	; 105
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	0e 94 24 04 	call	0x848	; 0x848 <strcpy>
							LCDGotoXY(0,0);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCDGotoXY>
							LCDstring(buff,strlen(buff));
 3a0:	fe 01       	movw	r30, r28
 3a2:	01 90       	ld	r0, Z+
 3a4:	00 20       	and	r0, r0
 3a6:	e9 f7       	brne	.-6      	; 0x3a2 <define_key+0x24a>
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	ec 1b       	sub	r30, r28
 3ac:	fd 0b       	sbc	r31, r29
 3ae:	ce 01       	movw	r24, r28
 3b0:	bf 01       	movw	r22, r30
 3b2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDstring>
							trigger_lock();
 3b6:	0e 94 88 00 	call	0x110	; 0x110 <trigger_lock>
							LCDclr();
 3ba:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclr>
							sprintf(buff," PASSWORD WRONG");
							LCDGotoXY(0,0);
							LCDstring(buff,strlen(buff));
							trigger_alarm();
						}
						key_status=1;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 ab 00 	sts	0x00AB, r25
 3c6:	80 93 aa 00 	sts	0x00AA, r24
 3ca:	1a c0       	rjmp	.+52     	; 0x400 <define_key+0x2a8>
							LCDclr();
						}
						else
						{

							LCDclr();
 3cc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclr>
							sprintf(buff," PASSWORD WRONG");
 3d0:	ce 01       	movw	r24, r28
 3d2:	69 e7       	ldi	r22, 0x79	; 121
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	0e 94 24 04 	call	0x848	; 0x848 <strcpy>
							LCDGotoXY(0,0);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCDGotoXY>
							LCDstring(buff,strlen(buff));
 3e6:	fe 01       	movw	r30, r28
 3e8:	01 90       	ld	r0, Z+
 3ea:	00 20       	and	r0, r0
 3ec:	e9 f7       	brne	.-6      	; 0x3e8 <define_key+0x290>
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	ec 5a       	subi	r30, 0xAC	; 172
 3f2:	f0 40       	sbci	r31, 0x00	; 0
 3f4:	ce 01       	movw	r24, r28
 3f6:	bf 01       	movw	r22, r30
 3f8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDstring>
	lock_port|=(1<<lock_pin2);
}

void trigger_alarm()
{
	alarm_port|=(1<<alarm_pin);
 3fc:	97 9a       	sbi	0x12, 7	; 18
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <define_key+0x2a6>
						}
						key_status=1;
						break;
		}
	}
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <main>:
}



void main()
{
 406:	cf 92       	push	r12
 408:	df 92       	push	r13
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
	keypad_ddr=0x00;
 416:	1a ba       	out	0x1a, r1	; 26
	keypad_port=0xff;
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	8b bb       	out	0x1b, r24	; 27
	lock_ddr|=(1<<lock_pin1)|(1<<lock_pin2);
 41c:	81 b3       	in	r24, 0x11	; 17
 41e:	80 63       	ori	r24, 0x30	; 48
 420:	81 bb       	out	0x11, r24	; 17
	lock_port|=(1<<lock_pin1)|(1<<lock_pin2);
 422:	82 b3       	in	r24, 0x12	; 18
 424:	80 63       	ori	r24, 0x30	; 48
 426:	82 bb       	out	0x12, r24	; 18

	alarm_ddr|=(1<<alarm_pin);
 428:	8f 9a       	sbi	0x11, 7	; 17
	alarm_port|=(1<<alarm_pin);
 42a:	97 9a       	sbi	0x12, 7	; 18

	LCDinit();
 42c:	0e 94 38 03 	call	0x670	; 0x670 <LCDinit>
	LCDclr();
 430:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclr>



int get_key()
{
	keypad_ddr=1;
 434:	cc 24       	eor	r12, r12
 436:	c3 94       	inc	r12
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 438:	9d e0       	ldi	r25, 0x0D	; 13
 43a:	d9 2e       	mov	r13, r25
	while(1)
	{
		k=get_key();
		define_key();
		//sprintf(buff,"Enter Password");
		sprintf(buff,"%3d %3d",k,key_status);
 43c:	cc ea       	ldi	r28, 0xAC	; 172
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	89 e8       	ldi	r24, 0x89	; 137
 442:	e8 2e       	mov	r14, r24
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	f8 2e       	mov	r15, r24

		LCDGotoXY(0,0);
		LCDstring(buff,strlen(buff));
		LCDGotoXY(0,1);
		//LCDstring("***********",n);
		LCDstring(pass,strlen(pass));
 448:	01 e9       	ldi	r16, 0x91	; 145
 44a:	10 e0       	ldi	r17, 0x00	; 0



int get_key()
{
	keypad_ddr=1;
 44c:	ca ba       	out	0x1a, r12	; 26
 44e:	8d 2d       	mov	r24, r13
 450:	8a 95       	dec	r24
 452:	f1 f7       	brne	.-4      	; 0x450 <main+0x4a>
 454:	10 c0       	rjmp	.+32     	; 0x476 <__stack+0x17>
	_delay_us(10);
	while(keypad_ddr>0)
	{
		keypad_port=~keypad_ddr;_delay_us(10);
 456:	8a b3       	in	r24, 0x1a	; 26
 458:	80 95       	com	r24
 45a:	8b bb       	out	0x1b, r24	; 27
 45c:	8d 2d       	mov	r24, r13
 45e:	8a 95       	dec	r24
 460:	f1 f7       	brne	.-4      	; 0x45e <main+0x58>
		if(keypad_pin!=keypad_port) return keypad_pin;
 462:	99 b3       	in	r25, 0x19	; 25
 464:	8b b3       	in	r24, 0x1b	; 27
 466:	98 17       	cp	r25, r24
 468:	19 f0       	breq	.+6      	; 0x470 <__stack+0x11>
 46a:	89 b3       	in	r24, 0x19	; 25
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	08 c0       	rjmp	.+16     	; 0x480 <__stack+0x21>
		keypad_ddr=keypad_ddr<<1;
 470:	8a b3       	in	r24, 0x1a	; 26
 472:	88 0f       	add	r24, r24
 474:	8a bb       	out	0x1a, r24	; 26

int get_key()
{
	keypad_ddr=1;
	_delay_us(10);
	while(keypad_ddr>0)
 476:	8a b3       	in	r24, 0x1a	; 26
 478:	88 23       	and	r24, r24
 47a:	69 f7       	brne	.-38     	; 0x456 <main+0x50>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0

	LCDinit();
	LCDclr();
	while(1)
	{
		k=get_key();
 480:	90 93 bd 00 	sts	0x00BD, r25
 484:	80 93 bc 00 	sts	0x00BC, r24
		define_key();
 488:	0e 94 ac 00 	call	0x158	; 0x158 <define_key>
		//sprintf(buff,"Enter Password");
		sprintf(buff,"%3d %3d",k,key_status);
 48c:	8d b7       	in	r24, 0x3d	; 61
 48e:	9e b7       	in	r25, 0x3e	; 62
 490:	08 97       	sbiw	r24, 0x08	; 8
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	9e bf       	out	0x3e, r25	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	8d bf       	out	0x3d, r24	; 61
 49c:	ed b7       	in	r30, 0x3d	; 61
 49e:	fe b7       	in	r31, 0x3e	; 62
 4a0:	31 96       	adiw	r30, 0x01	; 1
 4a2:	ad b7       	in	r26, 0x3d	; 61
 4a4:	be b7       	in	r27, 0x3e	; 62
 4a6:	12 96       	adiw	r26, 0x02	; 2
 4a8:	dc 93       	st	X, r29
 4aa:	ce 93       	st	-X, r28
 4ac:	11 97       	sbiw	r26, 0x01	; 1
 4ae:	f3 82       	std	Z+3, r15	; 0x03
 4b0:	e2 82       	std	Z+2, r14	; 0x02
 4b2:	80 91 bc 00 	lds	r24, 0x00BC
 4b6:	90 91 bd 00 	lds	r25, 0x00BD
 4ba:	95 83       	std	Z+5, r25	; 0x05
 4bc:	84 83       	std	Z+4, r24	; 0x04
 4be:	80 91 aa 00 	lds	r24, 0x00AA
 4c2:	90 91 ab 00 	lds	r25, 0x00AB
 4c6:	97 83       	std	Z+7, r25	; 0x07
 4c8:	86 83       	std	Z+6, r24	; 0x06
 4ca:	0e 94 39 04 	call	0x872	; 0x872 <sprintf>

		LCDGotoXY(0,0);
 4ce:	8d b7       	in	r24, 0x3d	; 61
 4d0:	9e b7       	in	r25, 0x3e	; 62
 4d2:	08 96       	adiw	r24, 0x08	; 8
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	9e bf       	out	0x3e, r25	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	8d bf       	out	0x3d, r24	; 61
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCDGotoXY>
		LCDstring(buff,strlen(buff));
 4ea:	fe 01       	movw	r30, r28
 4ec:	01 90       	ld	r0, Z+
 4ee:	00 20       	and	r0, r0
 4f0:	e9 f7       	brne	.-6      	; 0x4ec <__stack+0x8d>
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	ec 5a       	subi	r30, 0xAC	; 172
 4f6:	f0 40       	sbci	r31, 0x00	; 0
 4f8:	ce 01       	movw	r24, r28
 4fa:	bf 01       	movw	r22, r30
 4fc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDstring>
		LCDGotoXY(0,1);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCDGotoXY>
		//LCDstring("***********",n);
		LCDstring(pass,strlen(pass));
 50c:	f8 01       	movw	r30, r16
 50e:	01 90       	ld	r0, Z+
 510:	00 20       	and	r0, r0
 512:	e9 f7       	brne	.-6      	; 0x50e <__stack+0xaf>
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	e1 59       	subi	r30, 0x91	; 145
 518:	f0 40       	sbci	r31, 0x00	; 0
 51a:	81 e9       	ldi	r24, 0x91	; 145
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	bf 01       	movw	r22, r30
 520:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCDstring>
 524:	93 cf       	rjmp	.-218    	; 0x44c <main+0x46>

00000526 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
 526:	28 2f       	mov	r18, r24
 528:	20 7f       	andi	r18, 0xF0	; 240
 52a:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
 52c:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 52e:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 530:	28 ee       	ldi	r18, 0xE8	; 232
 532:	33 e0       	ldi	r19, 0x03	; 3
 534:	f9 01       	movw	r30, r18
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 53a:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 53c:	a8 98       	cbi	0x15, 0	; 21
 53e:	f9 01       	movw	r30, r18
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	44 e0       	ldi	r20, 0x04	; 4
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	4a 95       	dec	r20
 54e:	e1 f7       	brne	.-8      	; 0x548 <LCDsendChar+0x22>
 550:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 552:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 554:	aa 9a       	sbi	0x15, 2	; 21
 556:	c9 01       	movw	r24, r18
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 55c:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 55e:	a8 98       	cbi	0x15, 0	; 21
 560:	c9 01       	movw	r24, r18
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 566:	08 95       	ret

00000568 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 568:	28 2f       	mov	r18, r24
 56a:	20 7f       	andi	r18, 0xF0	; 240
 56c:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 56e:	aa 9a       	sbi	0x15, 2	; 21
 570:	28 ee       	ldi	r18, 0xE8	; 232
 572:	33 e0       	ldi	r19, 0x03	; 3
 574:	f9 01       	movw	r30, r18
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 57a:	aa 98       	cbi	0x15, 2	; 21
 57c:	f9 01       	movw	r30, r18
 57e:	31 97       	sbiw	r30, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	54 e0       	ldi	r21, 0x04	; 4
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	5a 95       	dec	r21
 58c:	e1 f7       	brne	.-8      	; 0x586 <LCDsendCommand+0x1e>
 58e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 590:	aa 9a       	sbi	0x15, 2	; 21
 592:	c9 01       	movw	r24, r18
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 598:	aa 98       	cbi	0x15, 2	; 21
 59a:	c9 01       	movw	r24, r18
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 5a0:	08 95       	ret

000005a2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
}
 5a8:	08 95       	ret

000005aa <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
}
 5b0:	08 95       	ret

000005b2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	49 f0       	breq	.+18     	; 0x5d2 <LCDstring+0x20>
 5c0:	ec 01       	movw	r28, r24
 5c2:	10 e0       	ldi	r17, 0x00	; 0
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 5c6:	89 91       	ld	r24, Y+
 5c8:	0e 94 93 02 	call	0x526	; 0x526 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 5cc:	1f 5f       	subi	r17, 0xFF	; 255
 5ce:	10 17       	cp	r17, r16
 5d0:	d0 f3       	brcs	.-12     	; 0x5c6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret

000005dc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 5dc:	62 30       	cpi	r22, 0x02	; 2
 5de:	31 f0       	breq	.+12     	; 0x5ec <LCDGotoXY+0x10>
 5e0:	63 30       	cpi	r22, 0x03	; 3
 5e2:	31 f0       	breq	.+12     	; 0x5f0 <LCDGotoXY+0x14>
 5e4:	61 30       	cpi	r22, 0x01	; 1
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 5e8:	80 5c       	subi	r24, 0xC0	; 192
 5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 5ec:	8c 5e       	subi	r24, 0xEC	; 236
 5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 5f0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
	
}
 5f8:	08 95       	ret

000005fa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 5fa:	1f 93       	push	r17
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	ec 01       	movw	r28, r24
 602:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 604:	64 2f       	mov	r22, r20
 606:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCDGotoXY>
 60a:	10 e0       	ldi	r17, 0x00	; 0
 60c:	03 c0       	rjmp	.+6      	; 0x614 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 60e:	0e 94 93 02 	call	0x526	; 0x526 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 612:	1f 5f       	subi	r17, 0xFF	; 255
 614:	fe 01       	movw	r30, r28
 616:	e1 0f       	add	r30, r17
 618:	f1 1d       	adc	r31, r1
 61a:	84 91       	lpm	r24, Z+
 61c:	88 23       	and	r24, r24
 61e:	b9 f7       	brne	.-18     	; 0x60e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	08 95       	ret

00000628 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	7c 01       	movw	r14, r24
 636:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 638:	11 0f       	add	r17, r17
 63a:	11 0f       	add	r17, r17
 63c:	11 0f       	add	r17, r17
 63e:	10 64       	ori	r17, 0x40	; 64
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 644:	f7 01       	movw	r30, r14
 646:	ec 0f       	add	r30, r28
 648:	fd 1f       	adc	r31, r29
 64a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 64c:	81 2f       	mov	r24, r17
 64e:	8c 0f       	add	r24, r28
 650:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
		LCDsendChar(pcc);
 654:	80 2f       	mov	r24, r16
 656:	0e 94 93 02 	call	0x526	; 0x526 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 65a:	21 96       	adiw	r28, 0x01	; 1
 65c:	c8 30       	cpi	r28, 0x08	; 8
 65e:	d1 05       	cpc	r29, r1
 660:	89 f7       	brne	.-30     	; 0x644 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	ef 90       	pop	r14
 66e:	08 95       	ret

00000670 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	88 e9       	ldi	r24, 0x98	; 152
 678:	9a e3       	ldi	r25, 0x3A	; 58
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 67e:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 680:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 682:	84 b3       	in	r24, 0x14	; 20
 684:	80 6f       	ori	r24, 0xF0	; 240
 686:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 688:	84 b3       	in	r24, 0x14	; 20
 68a:	87 60       	ori	r24, 0x07	; 7
 68c:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 68e:	80 e3       	ldi	r24, 0x30	; 48
 690:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 692:	aa 9a       	sbi	0x15, 2	; 21
 694:	28 ee       	ldi	r18, 0xE8	; 232
 696:	33 e0       	ldi	r19, 0x03	; 3
 698:	f9 01       	movw	r30, r18
 69a:	31 97       	sbiw	r30, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 69e:	aa 98       	cbi	0x15, 2	; 21
 6a0:	f9 01       	movw	r30, r18
 6a2:	31 97       	sbiw	r30, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 6a6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 6a8:	aa 9a       	sbi	0x15, 2	; 21
 6aa:	c9 01       	movw	r24, r18
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 6b0:	aa 98       	cbi	0x15, 2	; 21
 6b2:	c9 01       	movw	r24, r18
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 6b8:	80 e2       	ldi	r24, 0x20	; 32
 6ba:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 6bc:	aa 9a       	sbi	0x15, 2	; 21
 6be:	c9 01       	movw	r24, r18
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 6c4:	aa 98       	cbi	0x15, 2	; 21
 6c6:	c9 01       	movw	r24, r18
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 6cc:	88 e2       	ldi	r24, 0x28	; 40
 6ce:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 6d2:	8c e0       	ldi	r24, 0x0C	; 12
 6d4:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
 6d8:	c4 e5       	ldi	r28, 0x54	; 84
 6da:	d0 e0       	ldi	r29, 0x00	; 0
 6dc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 6de:	16 2f       	mov	r17, r22
 6e0:	1f 5f       	subi	r17, 0xFF	; 255
 6e2:	ce 01       	movw	r24, r28
 6e4:	0e 94 14 03 	call	0x628	; 0x628 <LCDdefinechar>
 6e8:	28 96       	adiw	r28, 0x08	; 8
 6ea:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 6ec:	18 30       	cpi	r17, 0x08	; 8
 6ee:	b9 f7       	brne	.-18     	; 0x6de <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	08 95       	ret

000006f8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	c0 e0       	ldi	r28, 0x00	; 0
 702:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 704:	08 2f       	mov	r16, r24
 706:	10 e0       	ldi	r17, 0x00	; 0
 708:	04 c0       	rjmp	.+8      	; 0x712 <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 70a:	8e e1       	ldi	r24, 0x1E	; 30
 70c:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 710:	21 96       	adiw	r28, 0x01	; 1
 712:	c0 17       	cp	r28, r16
 714:	d1 07       	cpc	r29, r17
 716:	cc f3       	brlt	.-14     	; 0x70a <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	08 95       	ret

00000722 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	c0 e0       	ldi	r28, 0x00	; 0
 72c:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 72e:	08 2f       	mov	r16, r24
 730:	10 e0       	ldi	r17, 0x00	; 0
 732:	04 c0       	rjmp	.+8      	; 0x73c <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 734:	88 e1       	ldi	r24, 0x18	; 24
 736:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 73a:	21 96       	adiw	r28, 0x01	; 1
 73c:	c0 17       	cp	r28, r16
 73e:	d1 07       	cpc	r29, r17
 740:	cc f3       	brlt	.-14     	; 0x734 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	08 95       	ret

0000074c <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 74c:	8e e0       	ldi	r24, 0x0E	; 14
 74e:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
}
 752:	08 95       	ret

00000754 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 754:	8f e0       	ldi	r24, 0x0F	; 15
 756:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
}
 75a:	08 95       	ret

0000075c <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 75c:	8c e0       	ldi	r24, 0x0C	; 12
 75e:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
}
 762:	08 95       	ret

00000764 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 764:	88 e0       	ldi	r24, 0x08	; 8
 766:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
}
 76a:	08 95       	ret

0000076c <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 76c:	8c e0       	ldi	r24, 0x0C	; 12
 76e:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
}
 772:	08 95       	ret

00000774 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	c0 e0       	ldi	r28, 0x00	; 0
 77e:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 780:	08 2f       	mov	r16, r24
 782:	10 e0       	ldi	r17, 0x00	; 0
 784:	04 c0       	rjmp	.+8      	; 0x78e <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 786:	80 e1       	ldi	r24, 0x10	; 16
 788:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 78c:	21 96       	adiw	r28, 0x01	; 1
 78e:	c0 17       	cp	r28, r16
 790:	d1 07       	cpc	r29, r17
 792:	cc f3       	brlt	.-14     	; 0x786 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	08 95       	ret

0000079e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	c0 e0       	ldi	r28, 0x00	; 0
 7a8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 7aa:	08 2f       	mov	r16, r24
 7ac:	10 e0       	ldi	r17, 0x00	; 0
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 7b0:	84 e1       	ldi	r24, 0x14	; 20
 7b2:	0e 94 b4 02 	call	0x568	; 0x568 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 7b6:	21 96       	adiw	r28, 0x01	; 1
 7b8:	c0 17       	cp	r28, r16
 7ba:	d1 07       	cpc	r29, r17
 7bc:	cc f3       	brlt	.-14     	; 0x7b0 <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	08 95       	ret

000007c8 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 7d8:	96 e0       	ldi	r25, 0x06	; 6
 7da:	89 9f       	mul	r24, r25
 7dc:	c0 01       	movw	r24, r0
 7de:	11 24       	eor	r1, r1
 7e0:	24 2f       	mov	r18, r20
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	ac 01       	movw	r20, r24
 7e6:	42 9f       	mul	r20, r18
 7e8:	c0 01       	movw	r24, r0
 7ea:	43 9f       	mul	r20, r19
 7ec:	90 0d       	add	r25, r0
 7ee:	52 9f       	mul	r21, r18
 7f0:	90 0d       	add	r25, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	0e 94 ee 06 	call	0xddc	; 0xddc <__divmodhi4>
 7fa:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 7fc:	cb 01       	movw	r24, r22
 7fe:	66 e0       	ldi	r22, 0x06	; 6
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__udivmodhi4>
 806:	e8 2e       	mov	r14, r24
 808:	ff 24       	eor	r15, r15
 80a:	00 e0       	ldi	r16, 0x00	; 0
 80c:	10 e0       	ldi	r17, 0x00	; 0
 80e:	12 c0       	rjmp	.+36     	; 0x834 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 810:	c8 01       	movw	r24, r16
 812:	05 96       	adiw	r24, 0x05	; 5
 814:	c8 17       	cp	r28, r24
 816:	d9 07       	cpc	r29, r25
 818:	10 f0       	brcs	.+4      	; 0x81e <LCDprogressBar+0x56>
 81a:	85 e0       	ldi	r24, 0x05	; 5
 81c:	06 c0       	rjmp	.+12     	; 0x82a <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 81e:	c0 17       	cp	r28, r16
 820:	d1 07       	cpc	r29, r17
 822:	10 f0       	brcs	.+4      	; 0x828 <LCDprogressBar+0x60>
 824:	8e 2d       	mov	r24, r14
 826:	01 c0       	rjmp	.+2      	; 0x82a <LCDprogressBar+0x62>
 828:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 82a:	0e 94 93 02 	call	0x526	; 0x526 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 82e:	f3 94       	inc	r15
 830:	0a 5f       	subi	r16, 0xFA	; 250
 832:	1f 4f       	sbci	r17, 0xFF	; 255
 834:	fd 14       	cp	r15, r13
 836:	60 f3       	brcs	.-40     	; 0x810 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	0f 91       	pop	r16
 840:	ff 90       	pop	r15
 842:	ef 90       	pop	r14
 844:	df 90       	pop	r13
 846:	08 95       	ret

00000848 <strcpy>:
 848:	fb 01       	movw	r30, r22
 84a:	dc 01       	movw	r26, r24
 84c:	01 90       	ld	r0, Z+
 84e:	0d 92       	st	X+, r0
 850:	00 20       	and	r0, r0
 852:	e1 f7       	brne	.-8      	; 0x84c <strcpy+0x4>
 854:	08 95       	ret

00000856 <strncmp>:
 856:	fb 01       	movw	r30, r22
 858:	dc 01       	movw	r26, r24
 85a:	41 50       	subi	r20, 0x01	; 1
 85c:	50 40       	sbci	r21, 0x00	; 0
 85e:	30 f0       	brcs	.+12     	; 0x86c <strncmp+0x16>
 860:	8d 91       	ld	r24, X+
 862:	01 90       	ld	r0, Z+
 864:	80 19       	sub	r24, r0
 866:	19 f4       	brne	.+6      	; 0x86e <strncmp+0x18>
 868:	00 20       	and	r0, r0
 86a:	b9 f7       	brne	.-18     	; 0x85a <strncmp+0x4>
 86c:	88 1b       	sub	r24, r24
 86e:	99 0b       	sbc	r25, r25
 870:	08 95       	ret

00000872 <sprintf>:
 872:	ae e0       	ldi	r26, 0x0E	; 14
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	ef e3       	ldi	r30, 0x3F	; 63
 878:	f4 e0       	ldi	r31, 0x04	; 4
 87a:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__prologue_saves__+0x1c>
 87e:	0d 89       	ldd	r16, Y+21	; 0x15
 880:	1e 89       	ldd	r17, Y+22	; 0x16
 882:	86 e0       	ldi	r24, 0x06	; 6
 884:	8c 83       	std	Y+4, r24	; 0x04
 886:	1a 83       	std	Y+2, r17	; 0x02
 888:	09 83       	std	Y+1, r16	; 0x01
 88a:	8f ef       	ldi	r24, 0xFF	; 255
 88c:	9f e7       	ldi	r25, 0x7F	; 127
 88e:	9e 83       	std	Y+6, r25	; 0x06
 890:	8d 83       	std	Y+5, r24	; 0x05
 892:	9e 01       	movw	r18, r28
 894:	27 5e       	subi	r18, 0xE7	; 231
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	ce 01       	movw	r24, r28
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	6f 89       	ldd	r22, Y+23	; 0x17
 89e:	78 8d       	ldd	r23, Y+24	; 0x18
 8a0:	a9 01       	movw	r20, r18
 8a2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <vfprintf>
 8a6:	2f 81       	ldd	r18, Y+7	; 0x07
 8a8:	38 85       	ldd	r19, Y+8	; 0x08
 8aa:	02 0f       	add	r16, r18
 8ac:	13 1f       	adc	r17, r19
 8ae:	f8 01       	movw	r30, r16
 8b0:	10 82       	st	Z, r1
 8b2:	2e 96       	adiw	r28, 0x0e	; 14
 8b4:	e4 e0       	ldi	r30, 0x04	; 4
 8b6:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__epilogue_restores__+0x1c>

000008ba <vfprintf>:
 8ba:	ab e0       	ldi	r26, 0x0B	; 11
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	e3 e6       	ldi	r30, 0x63	; 99
 8c0:	f4 e0       	ldi	r31, 0x04	; 4
 8c2:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__prologue_saves__>
 8c6:	3c 01       	movw	r6, r24
 8c8:	2b 01       	movw	r4, r22
 8ca:	5a 01       	movw	r10, r20
 8cc:	fc 01       	movw	r30, r24
 8ce:	17 82       	std	Z+7, r1	; 0x07
 8d0:	16 82       	std	Z+6, r1	; 0x06
 8d2:	83 81       	ldd	r24, Z+3	; 0x03
 8d4:	81 fd       	sbrc	r24, 1
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <vfprintf+0x24>
 8d8:	6f ef       	ldi	r22, 0xFF	; 255
 8da:	7f ef       	ldi	r23, 0xFF	; 255
 8dc:	c6 c1       	rjmp	.+908    	; 0xc6a <vfprintf+0x3b0>
 8de:	9a e0       	ldi	r25, 0x0A	; 10
 8e0:	89 2e       	mov	r8, r25
 8e2:	1e 01       	movw	r2, r28
 8e4:	08 94       	sec
 8e6:	21 1c       	adc	r2, r1
 8e8:	31 1c       	adc	r3, r1
 8ea:	f3 01       	movw	r30, r6
 8ec:	23 81       	ldd	r18, Z+3	; 0x03
 8ee:	f2 01       	movw	r30, r4
 8f0:	23 fd       	sbrc	r18, 3
 8f2:	85 91       	lpm	r24, Z+
 8f4:	23 ff       	sbrs	r18, 3
 8f6:	81 91       	ld	r24, Z+
 8f8:	2f 01       	movw	r4, r30
 8fa:	88 23       	and	r24, r24
 8fc:	09 f4       	brne	.+2      	; 0x900 <vfprintf+0x46>
 8fe:	b2 c1       	rjmp	.+868    	; 0xc64 <vfprintf+0x3aa>
 900:	85 32       	cpi	r24, 0x25	; 37
 902:	39 f4       	brne	.+14     	; 0x912 <vfprintf+0x58>
 904:	23 fd       	sbrc	r18, 3
 906:	85 91       	lpm	r24, Z+
 908:	23 ff       	sbrs	r18, 3
 90a:	81 91       	ld	r24, Z+
 90c:	2f 01       	movw	r4, r30
 90e:	85 32       	cpi	r24, 0x25	; 37
 910:	29 f4       	brne	.+10     	; 0x91c <vfprintf+0x62>
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	b3 01       	movw	r22, r6
 916:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 91a:	e7 cf       	rjmp	.-50     	; 0x8ea <vfprintf+0x30>
 91c:	98 2f       	mov	r25, r24
 91e:	ff 24       	eor	r15, r15
 920:	ee 24       	eor	r14, r14
 922:	99 24       	eor	r9, r9
 924:	ff e1       	ldi	r31, 0x1F	; 31
 926:	ff 15       	cp	r31, r15
 928:	d0 f0       	brcs	.+52     	; 0x95e <vfprintf+0xa4>
 92a:	9b 32       	cpi	r25, 0x2B	; 43
 92c:	69 f0       	breq	.+26     	; 0x948 <vfprintf+0x8e>
 92e:	9c 32       	cpi	r25, 0x2C	; 44
 930:	28 f4       	brcc	.+10     	; 0x93c <vfprintf+0x82>
 932:	90 32       	cpi	r25, 0x20	; 32
 934:	59 f0       	breq	.+22     	; 0x94c <vfprintf+0x92>
 936:	93 32       	cpi	r25, 0x23	; 35
 938:	91 f4       	brne	.+36     	; 0x95e <vfprintf+0xa4>
 93a:	0e c0       	rjmp	.+28     	; 0x958 <vfprintf+0x9e>
 93c:	9d 32       	cpi	r25, 0x2D	; 45
 93e:	49 f0       	breq	.+18     	; 0x952 <vfprintf+0x98>
 940:	90 33       	cpi	r25, 0x30	; 48
 942:	69 f4       	brne	.+26     	; 0x95e <vfprintf+0xa4>
 944:	41 e0       	ldi	r20, 0x01	; 1
 946:	24 c0       	rjmp	.+72     	; 0x990 <vfprintf+0xd6>
 948:	52 e0       	ldi	r21, 0x02	; 2
 94a:	f5 2a       	or	r15, r21
 94c:	84 e0       	ldi	r24, 0x04	; 4
 94e:	f8 2a       	or	r15, r24
 950:	28 c0       	rjmp	.+80     	; 0x9a2 <vfprintf+0xe8>
 952:	98 e0       	ldi	r25, 0x08	; 8
 954:	f9 2a       	or	r15, r25
 956:	25 c0       	rjmp	.+74     	; 0x9a2 <vfprintf+0xe8>
 958:	e0 e1       	ldi	r30, 0x10	; 16
 95a:	fe 2a       	or	r15, r30
 95c:	22 c0       	rjmp	.+68     	; 0x9a2 <vfprintf+0xe8>
 95e:	f7 fc       	sbrc	r15, 7
 960:	29 c0       	rjmp	.+82     	; 0x9b4 <vfprintf+0xfa>
 962:	89 2f       	mov	r24, r25
 964:	80 53       	subi	r24, 0x30	; 48
 966:	8a 30       	cpi	r24, 0x0A	; 10
 968:	70 f4       	brcc	.+28     	; 0x986 <vfprintf+0xcc>
 96a:	f6 fe       	sbrs	r15, 6
 96c:	05 c0       	rjmp	.+10     	; 0x978 <vfprintf+0xbe>
 96e:	98 9c       	mul	r9, r8
 970:	90 2c       	mov	r9, r0
 972:	11 24       	eor	r1, r1
 974:	98 0e       	add	r9, r24
 976:	15 c0       	rjmp	.+42     	; 0x9a2 <vfprintf+0xe8>
 978:	e8 9c       	mul	r14, r8
 97a:	e0 2c       	mov	r14, r0
 97c:	11 24       	eor	r1, r1
 97e:	e8 0e       	add	r14, r24
 980:	f0 e2       	ldi	r31, 0x20	; 32
 982:	ff 2a       	or	r15, r31
 984:	0e c0       	rjmp	.+28     	; 0x9a2 <vfprintf+0xe8>
 986:	9e 32       	cpi	r25, 0x2E	; 46
 988:	29 f4       	brne	.+10     	; 0x994 <vfprintf+0xda>
 98a:	f6 fc       	sbrc	r15, 6
 98c:	6b c1       	rjmp	.+726    	; 0xc64 <vfprintf+0x3aa>
 98e:	40 e4       	ldi	r20, 0x40	; 64
 990:	f4 2a       	or	r15, r20
 992:	07 c0       	rjmp	.+14     	; 0x9a2 <vfprintf+0xe8>
 994:	9c 36       	cpi	r25, 0x6C	; 108
 996:	19 f4       	brne	.+6      	; 0x99e <vfprintf+0xe4>
 998:	50 e8       	ldi	r21, 0x80	; 128
 99a:	f5 2a       	or	r15, r21
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <vfprintf+0xe8>
 99e:	98 36       	cpi	r25, 0x68	; 104
 9a0:	49 f4       	brne	.+18     	; 0x9b4 <vfprintf+0xfa>
 9a2:	f2 01       	movw	r30, r4
 9a4:	23 fd       	sbrc	r18, 3
 9a6:	95 91       	lpm	r25, Z+
 9a8:	23 ff       	sbrs	r18, 3
 9aa:	91 91       	ld	r25, Z+
 9ac:	2f 01       	movw	r4, r30
 9ae:	99 23       	and	r25, r25
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <vfprintf+0xfa>
 9b2:	b8 cf       	rjmp	.-144    	; 0x924 <vfprintf+0x6a>
 9b4:	89 2f       	mov	r24, r25
 9b6:	85 54       	subi	r24, 0x45	; 69
 9b8:	83 30       	cpi	r24, 0x03	; 3
 9ba:	18 f0       	brcs	.+6      	; 0x9c2 <vfprintf+0x108>
 9bc:	80 52       	subi	r24, 0x20	; 32
 9be:	83 30       	cpi	r24, 0x03	; 3
 9c0:	38 f4       	brcc	.+14     	; 0x9d0 <vfprintf+0x116>
 9c2:	44 e0       	ldi	r20, 0x04	; 4
 9c4:	50 e0       	ldi	r21, 0x00	; 0
 9c6:	a4 0e       	add	r10, r20
 9c8:	b5 1e       	adc	r11, r21
 9ca:	5f e3       	ldi	r21, 0x3F	; 63
 9cc:	59 83       	std	Y+1, r21	; 0x01
 9ce:	0f c0       	rjmp	.+30     	; 0x9ee <vfprintf+0x134>
 9d0:	93 36       	cpi	r25, 0x63	; 99
 9d2:	31 f0       	breq	.+12     	; 0x9e0 <vfprintf+0x126>
 9d4:	93 37       	cpi	r25, 0x73	; 115
 9d6:	79 f0       	breq	.+30     	; 0x9f6 <vfprintf+0x13c>
 9d8:	93 35       	cpi	r25, 0x53	; 83
 9da:	09 f0       	breq	.+2      	; 0x9de <vfprintf+0x124>
 9dc:	56 c0       	rjmp	.+172    	; 0xa8a <vfprintf+0x1d0>
 9de:	20 c0       	rjmp	.+64     	; 0xa20 <vfprintf+0x166>
 9e0:	f5 01       	movw	r30, r10
 9e2:	80 81       	ld	r24, Z
 9e4:	89 83       	std	Y+1, r24	; 0x01
 9e6:	42 e0       	ldi	r20, 0x02	; 2
 9e8:	50 e0       	ldi	r21, 0x00	; 0
 9ea:	a4 0e       	add	r10, r20
 9ec:	b5 1e       	adc	r11, r21
 9ee:	61 01       	movw	r12, r2
 9f0:	01 e0       	ldi	r16, 0x01	; 1
 9f2:	10 e0       	ldi	r17, 0x00	; 0
 9f4:	12 c0       	rjmp	.+36     	; 0xa1a <vfprintf+0x160>
 9f6:	f5 01       	movw	r30, r10
 9f8:	c0 80       	ld	r12, Z
 9fa:	d1 80       	ldd	r13, Z+1	; 0x01
 9fc:	f6 fc       	sbrc	r15, 6
 9fe:	03 c0       	rjmp	.+6      	; 0xa06 <vfprintf+0x14c>
 a00:	6f ef       	ldi	r22, 0xFF	; 255
 a02:	7f ef       	ldi	r23, 0xFF	; 255
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <vfprintf+0x150>
 a06:	69 2d       	mov	r22, r9
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	42 e0       	ldi	r20, 0x02	; 2
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	a4 0e       	add	r10, r20
 a10:	b5 1e       	adc	r11, r21
 a12:	c6 01       	movw	r24, r12
 a14:	0e 94 45 06 	call	0xc8a	; 0xc8a <strnlen>
 a18:	8c 01       	movw	r16, r24
 a1a:	5f e7       	ldi	r21, 0x7F	; 127
 a1c:	f5 22       	and	r15, r21
 a1e:	14 c0       	rjmp	.+40     	; 0xa48 <vfprintf+0x18e>
 a20:	f5 01       	movw	r30, r10
 a22:	c0 80       	ld	r12, Z
 a24:	d1 80       	ldd	r13, Z+1	; 0x01
 a26:	f6 fc       	sbrc	r15, 6
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <vfprintf+0x176>
 a2a:	6f ef       	ldi	r22, 0xFF	; 255
 a2c:	7f ef       	ldi	r23, 0xFF	; 255
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <vfprintf+0x17a>
 a30:	69 2d       	mov	r22, r9
 a32:	70 e0       	ldi	r23, 0x00	; 0
 a34:	42 e0       	ldi	r20, 0x02	; 2
 a36:	50 e0       	ldi	r21, 0x00	; 0
 a38:	a4 0e       	add	r10, r20
 a3a:	b5 1e       	adc	r11, r21
 a3c:	c6 01       	movw	r24, r12
 a3e:	0e 94 3a 06 	call	0xc74	; 0xc74 <strnlen_P>
 a42:	8c 01       	movw	r16, r24
 a44:	50 e8       	ldi	r21, 0x80	; 128
 a46:	f5 2a       	or	r15, r21
 a48:	f3 fe       	sbrs	r15, 3
 a4a:	07 c0       	rjmp	.+14     	; 0xa5a <vfprintf+0x1a0>
 a4c:	1a c0       	rjmp	.+52     	; 0xa82 <vfprintf+0x1c8>
 a4e:	80 e2       	ldi	r24, 0x20	; 32
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	b3 01       	movw	r22, r6
 a54:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 a58:	ea 94       	dec	r14
 a5a:	8e 2d       	mov	r24, r14
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	08 17       	cp	r16, r24
 a60:	19 07       	cpc	r17, r25
 a62:	a8 f3       	brcs	.-22     	; 0xa4e <vfprintf+0x194>
 a64:	0e c0       	rjmp	.+28     	; 0xa82 <vfprintf+0x1c8>
 a66:	f6 01       	movw	r30, r12
 a68:	f7 fc       	sbrc	r15, 7
 a6a:	85 91       	lpm	r24, Z+
 a6c:	f7 fe       	sbrs	r15, 7
 a6e:	81 91       	ld	r24, Z+
 a70:	6f 01       	movw	r12, r30
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	b3 01       	movw	r22, r6
 a76:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 a7a:	e1 10       	cpse	r14, r1
 a7c:	ea 94       	dec	r14
 a7e:	01 50       	subi	r16, 0x01	; 1
 a80:	10 40       	sbci	r17, 0x00	; 0
 a82:	01 15       	cp	r16, r1
 a84:	11 05       	cpc	r17, r1
 a86:	79 f7       	brne	.-34     	; 0xa66 <vfprintf+0x1ac>
 a88:	ea c0       	rjmp	.+468    	; 0xc5e <vfprintf+0x3a4>
 a8a:	94 36       	cpi	r25, 0x64	; 100
 a8c:	11 f0       	breq	.+4      	; 0xa92 <vfprintf+0x1d8>
 a8e:	99 36       	cpi	r25, 0x69	; 105
 a90:	69 f5       	brne	.+90     	; 0xaec <vfprintf+0x232>
 a92:	f7 fe       	sbrs	r15, 7
 a94:	08 c0       	rjmp	.+16     	; 0xaa6 <vfprintf+0x1ec>
 a96:	f5 01       	movw	r30, r10
 a98:	20 81       	ld	r18, Z
 a9a:	31 81       	ldd	r19, Z+1	; 0x01
 a9c:	42 81       	ldd	r20, Z+2	; 0x02
 a9e:	53 81       	ldd	r21, Z+3	; 0x03
 aa0:	84 e0       	ldi	r24, 0x04	; 4
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0a c0       	rjmp	.+20     	; 0xaba <vfprintf+0x200>
 aa6:	f5 01       	movw	r30, r10
 aa8:	80 81       	ld	r24, Z
 aaa:	91 81       	ldd	r25, Z+1	; 0x01
 aac:	9c 01       	movw	r18, r24
 aae:	44 27       	eor	r20, r20
 ab0:	37 fd       	sbrc	r19, 7
 ab2:	40 95       	com	r20
 ab4:	54 2f       	mov	r21, r20
 ab6:	82 e0       	ldi	r24, 0x02	; 2
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	a8 0e       	add	r10, r24
 abc:	b9 1e       	adc	r11, r25
 abe:	9f e6       	ldi	r25, 0x6F	; 111
 ac0:	f9 22       	and	r15, r25
 ac2:	57 ff       	sbrs	r21, 7
 ac4:	09 c0       	rjmp	.+18     	; 0xad8 <vfprintf+0x21e>
 ac6:	50 95       	com	r21
 ac8:	40 95       	com	r20
 aca:	30 95       	com	r19
 acc:	21 95       	neg	r18
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	4f 4f       	sbci	r20, 0xFF	; 255
 ad2:	5f 4f       	sbci	r21, 0xFF	; 255
 ad4:	e0 e8       	ldi	r30, 0x80	; 128
 ad6:	fe 2a       	or	r15, r30
 ad8:	ca 01       	movw	r24, r20
 ada:	b9 01       	movw	r22, r18
 adc:	a1 01       	movw	r20, r2
 ade:	2a e0       	ldi	r18, 0x0A	; 10
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__ultoa_invert>
 ae6:	d8 2e       	mov	r13, r24
 ae8:	d2 18       	sub	r13, r2
 aea:	40 c0       	rjmp	.+128    	; 0xb6c <vfprintf+0x2b2>
 aec:	95 37       	cpi	r25, 0x75	; 117
 aee:	29 f4       	brne	.+10     	; 0xafa <vfprintf+0x240>
 af0:	1f 2d       	mov	r17, r15
 af2:	1f 7e       	andi	r17, 0xEF	; 239
 af4:	2a e0       	ldi	r18, 0x0A	; 10
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	1d c0       	rjmp	.+58     	; 0xb34 <vfprintf+0x27a>
 afa:	1f 2d       	mov	r17, r15
 afc:	19 7f       	andi	r17, 0xF9	; 249
 afe:	9f 36       	cpi	r25, 0x6F	; 111
 b00:	61 f0       	breq	.+24     	; 0xb1a <vfprintf+0x260>
 b02:	90 37       	cpi	r25, 0x70	; 112
 b04:	20 f4       	brcc	.+8      	; 0xb0e <vfprintf+0x254>
 b06:	98 35       	cpi	r25, 0x58	; 88
 b08:	09 f0       	breq	.+2      	; 0xb0c <vfprintf+0x252>
 b0a:	ac c0       	rjmp	.+344    	; 0xc64 <vfprintf+0x3aa>
 b0c:	0f c0       	rjmp	.+30     	; 0xb2c <vfprintf+0x272>
 b0e:	90 37       	cpi	r25, 0x70	; 112
 b10:	39 f0       	breq	.+14     	; 0xb20 <vfprintf+0x266>
 b12:	98 37       	cpi	r25, 0x78	; 120
 b14:	09 f0       	breq	.+2      	; 0xb18 <vfprintf+0x25e>
 b16:	a6 c0       	rjmp	.+332    	; 0xc64 <vfprintf+0x3aa>
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <vfprintf+0x268>
 b1a:	28 e0       	ldi	r18, 0x08	; 8
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	0a c0       	rjmp	.+20     	; 0xb34 <vfprintf+0x27a>
 b20:	10 61       	ori	r17, 0x10	; 16
 b22:	14 fd       	sbrc	r17, 4
 b24:	14 60       	ori	r17, 0x04	; 4
 b26:	20 e1       	ldi	r18, 0x10	; 16
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	04 c0       	rjmp	.+8      	; 0xb34 <vfprintf+0x27a>
 b2c:	14 fd       	sbrc	r17, 4
 b2e:	16 60       	ori	r17, 0x06	; 6
 b30:	20 e1       	ldi	r18, 0x10	; 16
 b32:	32 e0       	ldi	r19, 0x02	; 2
 b34:	17 ff       	sbrs	r17, 7
 b36:	08 c0       	rjmp	.+16     	; 0xb48 <vfprintf+0x28e>
 b38:	f5 01       	movw	r30, r10
 b3a:	60 81       	ld	r22, Z
 b3c:	71 81       	ldd	r23, Z+1	; 0x01
 b3e:	82 81       	ldd	r24, Z+2	; 0x02
 b40:	93 81       	ldd	r25, Z+3	; 0x03
 b42:	44 e0       	ldi	r20, 0x04	; 4
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0x29e>
 b48:	f5 01       	movw	r30, r10
 b4a:	80 81       	ld	r24, Z
 b4c:	91 81       	ldd	r25, Z+1	; 0x01
 b4e:	bc 01       	movw	r22, r24
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	42 e0       	ldi	r20, 0x02	; 2
 b56:	50 e0       	ldi	r21, 0x00	; 0
 b58:	a4 0e       	add	r10, r20
 b5a:	b5 1e       	adc	r11, r21
 b5c:	a1 01       	movw	r20, r2
 b5e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__ultoa_invert>
 b62:	d8 2e       	mov	r13, r24
 b64:	d2 18       	sub	r13, r2
 b66:	8f e7       	ldi	r24, 0x7F	; 127
 b68:	f8 2e       	mov	r15, r24
 b6a:	f1 22       	and	r15, r17
 b6c:	f6 fe       	sbrs	r15, 6
 b6e:	0b c0       	rjmp	.+22     	; 0xb86 <vfprintf+0x2cc>
 b70:	5e ef       	ldi	r21, 0xFE	; 254
 b72:	f5 22       	and	r15, r21
 b74:	d9 14       	cp	r13, r9
 b76:	38 f4       	brcc	.+14     	; 0xb86 <vfprintf+0x2cc>
 b78:	f4 fe       	sbrs	r15, 4
 b7a:	07 c0       	rjmp	.+14     	; 0xb8a <vfprintf+0x2d0>
 b7c:	f2 fc       	sbrc	r15, 2
 b7e:	05 c0       	rjmp	.+10     	; 0xb8a <vfprintf+0x2d0>
 b80:	8f ee       	ldi	r24, 0xEF	; 239
 b82:	f8 22       	and	r15, r24
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <vfprintf+0x2d0>
 b86:	1d 2d       	mov	r17, r13
 b88:	01 c0       	rjmp	.+2      	; 0xb8c <vfprintf+0x2d2>
 b8a:	19 2d       	mov	r17, r9
 b8c:	f4 fe       	sbrs	r15, 4
 b8e:	0d c0       	rjmp	.+26     	; 0xbaa <vfprintf+0x2f0>
 b90:	fe 01       	movw	r30, r28
 b92:	ed 0d       	add	r30, r13
 b94:	f1 1d       	adc	r31, r1
 b96:	80 81       	ld	r24, Z
 b98:	80 33       	cpi	r24, 0x30	; 48
 b9a:	19 f4       	brne	.+6      	; 0xba2 <vfprintf+0x2e8>
 b9c:	99 ee       	ldi	r25, 0xE9	; 233
 b9e:	f9 22       	and	r15, r25
 ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <vfprintf+0x2f8>
 ba2:	1f 5f       	subi	r17, 0xFF	; 255
 ba4:	f2 fe       	sbrs	r15, 2
 ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <vfprintf+0x2f8>
 ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <vfprintf+0x2f6>
 baa:	8f 2d       	mov	r24, r15
 bac:	86 78       	andi	r24, 0x86	; 134
 bae:	09 f0       	breq	.+2      	; 0xbb2 <vfprintf+0x2f8>
 bb0:	1f 5f       	subi	r17, 0xFF	; 255
 bb2:	0f 2d       	mov	r16, r15
 bb4:	f3 fc       	sbrc	r15, 3
 bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <vfprintf+0x326>
 bb8:	f0 fe       	sbrs	r15, 0
 bba:	0f c0       	rjmp	.+30     	; 0xbda <vfprintf+0x320>
 bbc:	1e 15       	cp	r17, r14
 bbe:	10 f0       	brcs	.+4      	; 0xbc4 <vfprintf+0x30a>
 bc0:	9d 2c       	mov	r9, r13
 bc2:	0b c0       	rjmp	.+22     	; 0xbda <vfprintf+0x320>
 bc4:	9d 2c       	mov	r9, r13
 bc6:	9e 0c       	add	r9, r14
 bc8:	91 1a       	sub	r9, r17
 bca:	1e 2d       	mov	r17, r14
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <vfprintf+0x320>
 bce:	80 e2       	ldi	r24, 0x20	; 32
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	b3 01       	movw	r22, r6
 bd4:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 bd8:	1f 5f       	subi	r17, 0xFF	; 255
 bda:	1e 15       	cp	r17, r14
 bdc:	c0 f3       	brcs	.-16     	; 0xbce <vfprintf+0x314>
 bde:	04 c0       	rjmp	.+8      	; 0xbe8 <vfprintf+0x32e>
 be0:	1e 15       	cp	r17, r14
 be2:	10 f4       	brcc	.+4      	; 0xbe8 <vfprintf+0x32e>
 be4:	e1 1a       	sub	r14, r17
 be6:	01 c0       	rjmp	.+2      	; 0xbea <vfprintf+0x330>
 be8:	ee 24       	eor	r14, r14
 bea:	04 ff       	sbrs	r16, 4
 bec:	0f c0       	rjmp	.+30     	; 0xc0c <vfprintf+0x352>
 bee:	80 e3       	ldi	r24, 0x30	; 48
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	b3 01       	movw	r22, r6
 bf4:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 bf8:	02 ff       	sbrs	r16, 2
 bfa:	1d c0       	rjmp	.+58     	; 0xc36 <vfprintf+0x37c>
 bfc:	01 fd       	sbrc	r16, 1
 bfe:	03 c0       	rjmp	.+6      	; 0xc06 <vfprintf+0x34c>
 c00:	88 e7       	ldi	r24, 0x78	; 120
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	0e c0       	rjmp	.+28     	; 0xc22 <vfprintf+0x368>
 c06:	88 e5       	ldi	r24, 0x58	; 88
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0b c0       	rjmp	.+22     	; 0xc22 <vfprintf+0x368>
 c0c:	80 2f       	mov	r24, r16
 c0e:	86 78       	andi	r24, 0x86	; 134
 c10:	91 f0       	breq	.+36     	; 0xc36 <vfprintf+0x37c>
 c12:	01 ff       	sbrs	r16, 1
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <vfprintf+0x360>
 c16:	8b e2       	ldi	r24, 0x2B	; 43
 c18:	01 c0       	rjmp	.+2      	; 0xc1c <vfprintf+0x362>
 c1a:	80 e2       	ldi	r24, 0x20	; 32
 c1c:	f7 fc       	sbrc	r15, 7
 c1e:	8d e2       	ldi	r24, 0x2D	; 45
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	b3 01       	movw	r22, r6
 c24:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 c28:	06 c0       	rjmp	.+12     	; 0xc36 <vfprintf+0x37c>
 c2a:	80 e3       	ldi	r24, 0x30	; 48
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	b3 01       	movw	r22, r6
 c30:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 c34:	9a 94       	dec	r9
 c36:	d9 14       	cp	r13, r9
 c38:	c0 f3       	brcs	.-16     	; 0xc2a <vfprintf+0x370>
 c3a:	da 94       	dec	r13
 c3c:	f1 01       	movw	r30, r2
 c3e:	ed 0d       	add	r30, r13
 c40:	f1 1d       	adc	r31, r1
 c42:	80 81       	ld	r24, Z
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	b3 01       	movw	r22, r6
 c48:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 c4c:	dd 20       	and	r13, r13
 c4e:	a9 f7       	brne	.-22     	; 0xc3a <vfprintf+0x380>
 c50:	06 c0       	rjmp	.+12     	; 0xc5e <vfprintf+0x3a4>
 c52:	80 e2       	ldi	r24, 0x20	; 32
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	b3 01       	movw	r22, r6
 c58:	0e 94 50 06 	call	0xca0	; 0xca0 <fputc>
 c5c:	ea 94       	dec	r14
 c5e:	ee 20       	and	r14, r14
 c60:	c1 f7       	brne	.-16     	; 0xc52 <vfprintf+0x398>
 c62:	43 ce       	rjmp	.-890    	; 0x8ea <vfprintf+0x30>
 c64:	f3 01       	movw	r30, r6
 c66:	66 81       	ldd	r22, Z+6	; 0x06
 c68:	77 81       	ldd	r23, Z+7	; 0x07
 c6a:	cb 01       	movw	r24, r22
 c6c:	2b 96       	adiw	r28, 0x0b	; 11
 c6e:	e2 e1       	ldi	r30, 0x12	; 18
 c70:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__epilogue_restores__>

00000c74 <strnlen_P>:
 c74:	fc 01       	movw	r30, r24
 c76:	05 90       	lpm	r0, Z+
 c78:	61 50       	subi	r22, 0x01	; 1
 c7a:	70 40       	sbci	r23, 0x00	; 0
 c7c:	01 10       	cpse	r0, r1
 c7e:	d8 f7       	brcc	.-10     	; 0xc76 <strnlen_P+0x2>
 c80:	80 95       	com	r24
 c82:	90 95       	com	r25
 c84:	8e 0f       	add	r24, r30
 c86:	9f 1f       	adc	r25, r31
 c88:	08 95       	ret

00000c8a <strnlen>:
 c8a:	fc 01       	movw	r30, r24
 c8c:	61 50       	subi	r22, 0x01	; 1
 c8e:	70 40       	sbci	r23, 0x00	; 0
 c90:	01 90       	ld	r0, Z+
 c92:	01 10       	cpse	r0, r1
 c94:	d8 f7       	brcc	.-10     	; 0xc8c <strnlen+0x2>
 c96:	80 95       	com	r24
 c98:	90 95       	com	r25
 c9a:	8e 0f       	add	r24, r30
 c9c:	9f 1f       	adc	r25, r31
 c9e:	08 95       	ret

00000ca0 <fputc>:
 ca0:	0f 93       	push	r16
 ca2:	1f 93       	push	r17
 ca4:	cf 93       	push	r28
 ca6:	df 93       	push	r29
 ca8:	8c 01       	movw	r16, r24
 caa:	eb 01       	movw	r28, r22
 cac:	8b 81       	ldd	r24, Y+3	; 0x03
 cae:	81 ff       	sbrs	r24, 1
 cb0:	1b c0       	rjmp	.+54     	; 0xce8 <fputc+0x48>
 cb2:	82 ff       	sbrs	r24, 2
 cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <fputc+0x30>
 cb6:	2e 81       	ldd	r18, Y+6	; 0x06
 cb8:	3f 81       	ldd	r19, Y+7	; 0x07
 cba:	8c 81       	ldd	r24, Y+4	; 0x04
 cbc:	9d 81       	ldd	r25, Y+5	; 0x05
 cbe:	28 17       	cp	r18, r24
 cc0:	39 07       	cpc	r19, r25
 cc2:	64 f4       	brge	.+24     	; 0xcdc <fputc+0x3c>
 cc4:	e8 81       	ld	r30, Y
 cc6:	f9 81       	ldd	r31, Y+1	; 0x01
 cc8:	01 93       	st	Z+, r16
 cca:	f9 83       	std	Y+1, r31	; 0x01
 ccc:	e8 83       	st	Y, r30
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <fputc+0x3c>
 cd0:	e8 85       	ldd	r30, Y+8	; 0x08
 cd2:	f9 85       	ldd	r31, Y+9	; 0x09
 cd4:	80 2f       	mov	r24, r16
 cd6:	09 95       	icall
 cd8:	89 2b       	or	r24, r25
 cda:	31 f4       	brne	.+12     	; 0xce8 <fputc+0x48>
 cdc:	8e 81       	ldd	r24, Y+6	; 0x06
 cde:	9f 81       	ldd	r25, Y+7	; 0x07
 ce0:	01 96       	adiw	r24, 0x01	; 1
 ce2:	9f 83       	std	Y+7, r25	; 0x07
 ce4:	8e 83       	std	Y+6, r24	; 0x06
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <fputc+0x4c>
 ce8:	0f ef       	ldi	r16, 0xFF	; 255
 cea:	1f ef       	ldi	r17, 0xFF	; 255
 cec:	c8 01       	movw	r24, r16
 cee:	df 91       	pop	r29
 cf0:	cf 91       	pop	r28
 cf2:	1f 91       	pop	r17
 cf4:	0f 91       	pop	r16
 cf6:	08 95       	ret

00000cf8 <__ultoa_invert>:
 cf8:	fa 01       	movw	r30, r20
 cfa:	aa 27       	eor	r26, r26
 cfc:	28 30       	cpi	r18, 0x08	; 8
 cfe:	51 f1       	breq	.+84     	; 0xd54 <__ultoa_invert+0x5c>
 d00:	20 31       	cpi	r18, 0x10	; 16
 d02:	81 f1       	breq	.+96     	; 0xd64 <__ultoa_invert+0x6c>
 d04:	e8 94       	clt
 d06:	6f 93       	push	r22
 d08:	6e 7f       	andi	r22, 0xFE	; 254
 d0a:	6e 5f       	subi	r22, 0xFE	; 254
 d0c:	7f 4f       	sbci	r23, 0xFF	; 255
 d0e:	8f 4f       	sbci	r24, 0xFF	; 255
 d10:	9f 4f       	sbci	r25, 0xFF	; 255
 d12:	af 4f       	sbci	r26, 0xFF	; 255
 d14:	b1 e0       	ldi	r27, 0x01	; 1
 d16:	3e d0       	rcall	.+124    	; 0xd94 <__ultoa_invert+0x9c>
 d18:	b4 e0       	ldi	r27, 0x04	; 4
 d1a:	3c d0       	rcall	.+120    	; 0xd94 <__ultoa_invert+0x9c>
 d1c:	67 0f       	add	r22, r23
 d1e:	78 1f       	adc	r23, r24
 d20:	89 1f       	adc	r24, r25
 d22:	9a 1f       	adc	r25, r26
 d24:	a1 1d       	adc	r26, r1
 d26:	68 0f       	add	r22, r24
 d28:	79 1f       	adc	r23, r25
 d2a:	8a 1f       	adc	r24, r26
 d2c:	91 1d       	adc	r25, r1
 d2e:	a1 1d       	adc	r26, r1
 d30:	6a 0f       	add	r22, r26
 d32:	71 1d       	adc	r23, r1
 d34:	81 1d       	adc	r24, r1
 d36:	91 1d       	adc	r25, r1
 d38:	a1 1d       	adc	r26, r1
 d3a:	20 d0       	rcall	.+64     	; 0xd7c <__ultoa_invert+0x84>
 d3c:	09 f4       	brne	.+2      	; 0xd40 <__ultoa_invert+0x48>
 d3e:	68 94       	set
 d40:	3f 91       	pop	r19
 d42:	2a e0       	ldi	r18, 0x0A	; 10
 d44:	26 9f       	mul	r18, r22
 d46:	11 24       	eor	r1, r1
 d48:	30 19       	sub	r19, r0
 d4a:	30 5d       	subi	r19, 0xD0	; 208
 d4c:	31 93       	st	Z+, r19
 d4e:	de f6       	brtc	.-74     	; 0xd06 <__ultoa_invert+0xe>
 d50:	cf 01       	movw	r24, r30
 d52:	08 95       	ret
 d54:	46 2f       	mov	r20, r22
 d56:	47 70       	andi	r20, 0x07	; 7
 d58:	40 5d       	subi	r20, 0xD0	; 208
 d5a:	41 93       	st	Z+, r20
 d5c:	b3 e0       	ldi	r27, 0x03	; 3
 d5e:	0f d0       	rcall	.+30     	; 0xd7e <__ultoa_invert+0x86>
 d60:	c9 f7       	brne	.-14     	; 0xd54 <__ultoa_invert+0x5c>
 d62:	f6 cf       	rjmp	.-20     	; 0xd50 <__ultoa_invert+0x58>
 d64:	46 2f       	mov	r20, r22
 d66:	4f 70       	andi	r20, 0x0F	; 15
 d68:	40 5d       	subi	r20, 0xD0	; 208
 d6a:	4a 33       	cpi	r20, 0x3A	; 58
 d6c:	18 f0       	brcs	.+6      	; 0xd74 <__ultoa_invert+0x7c>
 d6e:	49 5d       	subi	r20, 0xD9	; 217
 d70:	31 fd       	sbrc	r19, 1
 d72:	40 52       	subi	r20, 0x20	; 32
 d74:	41 93       	st	Z+, r20
 d76:	02 d0       	rcall	.+4      	; 0xd7c <__ultoa_invert+0x84>
 d78:	a9 f7       	brne	.-22     	; 0xd64 <__ultoa_invert+0x6c>
 d7a:	ea cf       	rjmp	.-44     	; 0xd50 <__ultoa_invert+0x58>
 d7c:	b4 e0       	ldi	r27, 0x04	; 4
 d7e:	a6 95       	lsr	r26
 d80:	97 95       	ror	r25
 d82:	87 95       	ror	r24
 d84:	77 95       	ror	r23
 d86:	67 95       	ror	r22
 d88:	ba 95       	dec	r27
 d8a:	c9 f7       	brne	.-14     	; 0xd7e <__ultoa_invert+0x86>
 d8c:	00 97       	sbiw	r24, 0x00	; 0
 d8e:	61 05       	cpc	r22, r1
 d90:	71 05       	cpc	r23, r1
 d92:	08 95       	ret
 d94:	9b 01       	movw	r18, r22
 d96:	ac 01       	movw	r20, r24
 d98:	0a 2e       	mov	r0, r26
 d9a:	06 94       	lsr	r0
 d9c:	57 95       	ror	r21
 d9e:	47 95       	ror	r20
 da0:	37 95       	ror	r19
 da2:	27 95       	ror	r18
 da4:	ba 95       	dec	r27
 da6:	c9 f7       	brne	.-14     	; 0xd9a <__ultoa_invert+0xa2>
 da8:	62 0f       	add	r22, r18
 daa:	73 1f       	adc	r23, r19
 dac:	84 1f       	adc	r24, r20
 dae:	95 1f       	adc	r25, r21
 db0:	a0 1d       	adc	r26, r0
 db2:	08 95       	ret

00000db4 <__udivmodhi4>:
 db4:	aa 1b       	sub	r26, r26
 db6:	bb 1b       	sub	r27, r27
 db8:	51 e1       	ldi	r21, 0x11	; 17
 dba:	07 c0       	rjmp	.+14     	; 0xdca <__udivmodhi4_ep>

00000dbc <__udivmodhi4_loop>:
 dbc:	aa 1f       	adc	r26, r26
 dbe:	bb 1f       	adc	r27, r27
 dc0:	a6 17       	cp	r26, r22
 dc2:	b7 07       	cpc	r27, r23
 dc4:	10 f0       	brcs	.+4      	; 0xdca <__udivmodhi4_ep>
 dc6:	a6 1b       	sub	r26, r22
 dc8:	b7 0b       	sbc	r27, r23

00000dca <__udivmodhi4_ep>:
 dca:	88 1f       	adc	r24, r24
 dcc:	99 1f       	adc	r25, r25
 dce:	5a 95       	dec	r21
 dd0:	a9 f7       	brne	.-22     	; 0xdbc <__udivmodhi4_loop>
 dd2:	80 95       	com	r24
 dd4:	90 95       	com	r25
 dd6:	bc 01       	movw	r22, r24
 dd8:	cd 01       	movw	r24, r26
 dda:	08 95       	ret

00000ddc <__divmodhi4>:
 ddc:	97 fb       	bst	r25, 7
 dde:	09 2e       	mov	r0, r25
 de0:	07 26       	eor	r0, r23
 de2:	0a d0       	rcall	.+20     	; 0xdf8 <__divmodhi4_neg1>
 de4:	77 fd       	sbrc	r23, 7
 de6:	04 d0       	rcall	.+8      	; 0xdf0 <__divmodhi4_neg2>
 de8:	e5 df       	rcall	.-54     	; 0xdb4 <__udivmodhi4>
 dea:	06 d0       	rcall	.+12     	; 0xdf8 <__divmodhi4_neg1>
 dec:	00 20       	and	r0, r0
 dee:	1a f4       	brpl	.+6      	; 0xdf6 <__divmodhi4_exit>

00000df0 <__divmodhi4_neg2>:
 df0:	70 95       	com	r23
 df2:	61 95       	neg	r22
 df4:	7f 4f       	sbci	r23, 0xFF	; 255

00000df6 <__divmodhi4_exit>:
 df6:	08 95       	ret

00000df8 <__divmodhi4_neg1>:
 df8:	f6 f7       	brtc	.-4      	; 0xdf6 <__divmodhi4_exit>
 dfa:	90 95       	com	r25
 dfc:	81 95       	neg	r24
 dfe:	9f 4f       	sbci	r25, 0xFF	; 255
 e00:	08 95       	ret

00000e02 <__prologue_saves__>:
 e02:	2f 92       	push	r2
 e04:	3f 92       	push	r3
 e06:	4f 92       	push	r4
 e08:	5f 92       	push	r5
 e0a:	6f 92       	push	r6
 e0c:	7f 92       	push	r7
 e0e:	8f 92       	push	r8
 e10:	9f 92       	push	r9
 e12:	af 92       	push	r10
 e14:	bf 92       	push	r11
 e16:	cf 92       	push	r12
 e18:	df 92       	push	r13
 e1a:	ef 92       	push	r14
 e1c:	ff 92       	push	r15
 e1e:	0f 93       	push	r16
 e20:	1f 93       	push	r17
 e22:	cf 93       	push	r28
 e24:	df 93       	push	r29
 e26:	cd b7       	in	r28, 0x3d	; 61
 e28:	de b7       	in	r29, 0x3e	; 62
 e2a:	ca 1b       	sub	r28, r26
 e2c:	db 0b       	sbc	r29, r27
 e2e:	0f b6       	in	r0, 0x3f	; 63
 e30:	f8 94       	cli
 e32:	de bf       	out	0x3e, r29	; 62
 e34:	0f be       	out	0x3f, r0	; 63
 e36:	cd bf       	out	0x3d, r28	; 61
 e38:	09 94       	ijmp

00000e3a <__epilogue_restores__>:
 e3a:	2a 88       	ldd	r2, Y+18	; 0x12
 e3c:	39 88       	ldd	r3, Y+17	; 0x11
 e3e:	48 88       	ldd	r4, Y+16	; 0x10
 e40:	5f 84       	ldd	r5, Y+15	; 0x0f
 e42:	6e 84       	ldd	r6, Y+14	; 0x0e
 e44:	7d 84       	ldd	r7, Y+13	; 0x0d
 e46:	8c 84       	ldd	r8, Y+12	; 0x0c
 e48:	9b 84       	ldd	r9, Y+11	; 0x0b
 e4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4c:	b9 84       	ldd	r11, Y+9	; 0x09
 e4e:	c8 84       	ldd	r12, Y+8	; 0x08
 e50:	df 80       	ldd	r13, Y+7	; 0x07
 e52:	ee 80       	ldd	r14, Y+6	; 0x06
 e54:	fd 80       	ldd	r15, Y+5	; 0x05
 e56:	0c 81       	ldd	r16, Y+4	; 0x04
 e58:	1b 81       	ldd	r17, Y+3	; 0x03
 e5a:	aa 81       	ldd	r26, Y+2	; 0x02
 e5c:	b9 81       	ldd	r27, Y+1	; 0x01
 e5e:	ce 0f       	add	r28, r30
 e60:	d1 1d       	adc	r29, r1
 e62:	0f b6       	in	r0, 0x3f	; 63
 e64:	f8 94       	cli
 e66:	de bf       	out	0x3e, r29	; 62
 e68:	0f be       	out	0x3f, r0	; 63
 e6a:	cd bf       	out	0x3d, r28	; 61
 e6c:	ed 01       	movw	r28, r26
 e6e:	08 95       	ret

00000e70 <_exit>:
 e70:	f8 94       	cli

00000e72 <__stop_program>:
 e72:	ff cf       	rjmp	.-2      	; 0xe72 <__stop_program>
