
spimaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000bba  00000c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800066  00800066  00000c54  2**0
                  ALLOC
  3 .stab         00001620  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d4e  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_10>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <LcdCustomChar>:
  54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d4 e0       	ldi	r29, 0x04	; 4
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	a0 e6       	ldi	r26, 0x60	; 96
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	ea eb       	ldi	r30, 0xBA	; 186
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <.do_copy_data_start>

000000ac <.do_copy_data_loop>:
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0

000000b0 <.do_copy_data_start>:
  b0:	a6 36       	cpi	r26, 0x66	; 102
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <.do_copy_data_loop>

000000b6 <__do_clear_bss>:
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	a6 e6       	ldi	r26, 0x66	; 102
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	ab 36       	cpi	r26, 0x6B	; 107
  c2:	b1 07       	cpc	r27, r17
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
  ca:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
  d2:	28 2f       	mov	r18, r24
  d4:	20 7f       	andi	r18, 0xF0	; 240
  d6:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
  d8:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
  da:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	28 ee       	ldi	r18, 0xE8	; 232
  de:	33 e0       	ldi	r19, 0x03	; 3
  e0:	f9 01       	movw	r30, r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
  e6:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
  e8:	a8 98       	cbi	0x15, 0	; 21
  ea:	f9 01       	movw	r30, r18
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	44 e0       	ldi	r20, 0x04	; 4
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	4a 95       	dec	r20
  fa:	e1 f7       	brne	.-8      	; 0xf4 <LCDsendChar+0x22>
  fc:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
  fe:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 100:	aa 9a       	sbi	0x15, 2	; 21
 102:	c9 01       	movw	r24, r18
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 108:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 10a:	a8 98       	cbi	0x15, 0	; 21
 10c:	c9 01       	movw	r24, r18
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCDsendChar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
}
 112:	08 95       	ret

00000114 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
 114:	28 2f       	mov	r18, r24
 116:	20 7f       	andi	r18, 0xF0	; 240
 118:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 11a:	aa 9a       	sbi	0x15, 2	; 21
 11c:	28 ee       	ldi	r18, 0xE8	; 232
 11e:	33 e0       	ldi	r19, 0x03	; 3
 120:	f9 01       	movw	r30, r18
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 126:	aa 98       	cbi	0x15, 2	; 21
 128:	f9 01       	movw	r30, r18
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	54 e0       	ldi	r21, 0x04	; 4
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	5a 95       	dec	r21
 138:	e1 f7       	brne	.-8      	; 0x132 <LCDsendCommand+0x1e>
 13a:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 13c:	aa 9a       	sbi	0x15, 2	; 21
 13e:	c9 01       	movw	r24, r18
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 144:	aa 98       	cbi	0x15, 2	; 21
 146:	c9 01       	movw	r24, r18
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
 14c:	08 95       	ret

0000014e <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
}
 154:	08 95       	ret

00000156 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
}
 15c:	08 95       	ret

0000015e <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 168:	00 97       	sbiw	r24, 0x00	; 0
 16a:	49 f0       	breq	.+18     	; 0x17e <LCDstring+0x20>
 16c:	ec 01       	movw	r28, r24
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	04 c0       	rjmp	.+8      	; 0x17a <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 172:	89 91       	ld	r24, Y+
 174:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 178:	1f 5f       	subi	r17, 0xFF	; 255
 17a:	10 17       	cp	r17, r16
 17c:	d0 f3       	brcs	.-12     	; 0x172 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 188:	62 30       	cpi	r22, 0x02	; 2
 18a:	31 f0       	breq	.+12     	; 0x198 <LCDGotoXY+0x10>
 18c:	63 30       	cpi	r22, 0x03	; 3
 18e:	31 f0       	breq	.+12     	; 0x19c <LCDGotoXY+0x14>
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	29 f4       	brne	.+10     	; 0x19e <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 194:	80 5c       	subi	r24, 0xC0	; 192
 196:	03 c0       	rjmp	.+6      	; 0x19e <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 198:	8c 5e       	subi	r24, 0xEC	; 236
 19a:	01 c0       	rjmp	.+2      	; 0x19e <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 19c:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
	
}
 1a4:	08 95       	ret

000001a6 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
 1ae:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 1b0:	64 2f       	mov	r22, r20
 1b2:	0e 94 c4 00 	call	0x188	; 0x188 <LCDGotoXY>
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 1ba:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 1be:	1f 5f       	subi	r17, 0xFF	; 255
 1c0:	fe 01       	movw	r30, r28
 1c2:	e1 0f       	add	r30, r17
 1c4:	f1 1d       	adc	r31, r1
 1c6:	84 91       	lpm	r24, Z+
 1c8:	88 23       	and	r24, r24
 1ca:	b9 f7       	brne	.-18     	; 0x1ba <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	7c 01       	movw	r14, r24
 1e2:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1e4:	11 0f       	add	r17, r17
 1e6:	11 0f       	add	r17, r17
 1e8:	11 0f       	add	r17, r17
 1ea:	10 64       	ori	r17, 0x40	; 64
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 1f0:	f7 01       	movw	r30, r14
 1f2:	ec 0f       	add	r30, r28
 1f4:	fd 1f       	adc	r31, r29
 1f6:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 1f8:	81 2f       	mov	r24, r17
 1fa:	8c 0f       	add	r24, r28
 1fc:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
		LCDsendChar(pcc);
 200:	80 2f       	mov	r24, r16
 202:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 206:	21 96       	adiw	r28, 0x01	; 1
 208:	c8 30       	cpi	r28, 0x08	; 8
 20a:	d1 05       	cpc	r29, r1
 20c:	89 f7       	brne	.-30     	; 0x1f0 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	08 95       	ret

0000021c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	88 e9       	ldi	r24, 0x98	; 152
 224:	9a e3       	ldi	r25, 0x3A	; 58
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
 22a:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 22c:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 22e:	84 b3       	in	r24, 0x14	; 20
 230:	80 6f       	ori	r24, 0xF0	; 240
 232:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 234:	84 b3       	in	r24, 0x14	; 20
 236:	87 60       	ori	r24, 0x07	; 7
 238:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 23e:	aa 9a       	sbi	0x15, 2	; 21
 240:	28 ee       	ldi	r18, 0xE8	; 232
 242:	33 e0       	ldi	r19, 0x03	; 3
 244:	f9 01       	movw	r30, r18
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 24a:	aa 98       	cbi	0x15, 2	; 21
 24c:	f9 01       	movw	r30, r18
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 252:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 254:	aa 9a       	sbi	0x15, 2	; 21
 256:	c9 01       	movw	r24, r18
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 25c:	aa 98       	cbi	0x15, 2	; 21
 25e:	c9 01       	movw	r24, r18
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 268:	aa 9a       	sbi	0x15, 2	; 21
 26a:	c9 01       	movw	r24, r18
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCDinit+0x50>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 270:	aa 98       	cbi	0x15, 2	; 21
 272:	c9 01       	movw	r24, r18
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCDinit+0x58>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
 284:	c4 e5       	ldi	r28, 0x54	; 84
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 28a:	16 2f       	mov	r17, r22
 28c:	1f 5f       	subi	r17, 0xFF	; 255
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCDdefinechar>
 294:	28 96       	adiw	r28, 0x08	; 8
 296:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 298:	18 30       	cpi	r17, 0x08	; 8
 29a:	b9 f7       	brne	.-18     	; 0x28a <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 2b0:	08 2f       	mov	r16, r24
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <LCDshiftLeft+0x1a>
	{
		LCDsendCommand(0x1E);
 2b6:	8e e1       	ldi	r24, 0x1E	; 30
 2b8:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{int i;
	for ( i=0;i<n;i++)
 2bc:	21 96       	adiw	r28, 0x01	; 1
 2be:	c0 17       	cp	r28, r16
 2c0:	d1 07       	cpc	r29, r17
 2c2:	cc f3       	brlt	.-14     	; 0x2b6 <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
	}
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	c0 e0       	ldi	r28, 0x00	; 0
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 2da:	08 2f       	mov	r16, r24
 2dc:	10 e0       	ldi	r17, 0x00	; 0
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <LCDshiftRight+0x1a>
	{
		LCDsendCommand(0x18);
 2e0:	88 e1       	ldi	r24, 0x18	; 24
 2e2:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{int i;
	for ( i=0;i<n;i++)
 2e6:	21 96       	adiw	r28, 0x01	; 1
 2e8:	c0 17       	cp	r28, r16
 2ea:	d1 07       	cpc	r29, r17
 2ec:	cc f3       	brlt	.-14     	; 0x2e0 <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
	}
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 2f8:	8e e0       	ldi	r24, 0x0E	; 14
 2fa:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
}
 2fe:	08 95       	ret

00000300 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
}
 306:	08 95       	ret

00000308 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
}
 30e:	08 95       	ret

00000310 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
}
 316:	08 95       	ret

00000318 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 318:	8c e0       	ldi	r24, 0x0C	; 12
 31a:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
}
 31e:	08 95       	ret

00000320 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i=0;i<n;i++)
 32c:	08 2f       	mov	r16, r24
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	04 c0       	rjmp	.+8      	; 0x33a <LCDcursorLeft+0x1a>
	{
		LCDsendCommand(0x10);
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for ( i=0;i<n;i++)
 338:	21 96       	adiw	r28, 0x01	; 1
 33a:	c0 17       	cp	r28, r16
 33c:	d1 07       	cpc	r29, r17
 33e:	cc f3       	brlt	.-14     	; 0x332 <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
	}
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0;i<n;i++)
 356:	08 2f       	mov	r16, r24
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	04 c0       	rjmp	.+8      	; 0x364 <LCDcursorRight+0x1a>
	{
		LCDsendCommand(0x14);
 35c:	84 e1       	ldi	r24, 0x14	; 20
 35e:	0e 94 8a 00 	call	0x114	; 0x114 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{int i;
	for (i=0;i<n;i++)
 362:	21 96       	adiw	r28, 0x01	; 1
 364:	c0 17       	cp	r28, r16
 366:	d1 07       	cpc	r29, r17
 368:	cc f3       	brlt	.-14     	; 0x35c <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
	}
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 384:	96 e0       	ldi	r25, 0x06	; 6
 386:	89 9f       	mul	r24, r25
 388:	c0 01       	movw	r24, r0
 38a:	11 24       	eor	r1, r1
 38c:	24 2f       	mov	r18, r20
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	ac 01       	movw	r20, r24
 392:	42 9f       	mul	r20, r18
 394:	c0 01       	movw	r24, r0
 396:	43 9f       	mul	r20, r19
 398:	90 0d       	add	r25, r0
 39a:	52 9f       	mul	r21, r18
 39c:	90 0d       	add	r25, r0
 39e:	11 24       	eor	r1, r1
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	0e 94 91 05 	call	0xb22	; 0xb22 <__divmodhi4>
 3a6:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3a8:	cb 01       	movw	r24, r22
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	0e 94 7d 05 	call	0xafa	; 0xafa <__udivmodhi4>
 3b2:	e8 2e       	mov	r14, r24
 3b4:	ff 24       	eor	r15, r15
 3b6:	00 e0       	ldi	r16, 0x00	; 0
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	12 c0       	rjmp	.+36     	; 0x3e0 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 3bc:	c8 01       	movw	r24, r16
 3be:	05 96       	adiw	r24, 0x05	; 5
 3c0:	c8 17       	cp	r28, r24
 3c2:	d9 07       	cpc	r29, r25
 3c4:	10 f0       	brcs	.+4      	; 0x3ca <LCDprogressBar+0x56>
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 3ca:	c0 17       	cp	r28, r16
 3cc:	d1 07       	cpc	r29, r17
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <LCDprogressBar+0x60>
 3d0:	8e 2d       	mov	r24, r14
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <LCDprogressBar+0x62>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
 3d6:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 3da:	f3 94       	inc	r15
 3dc:	0a 5f       	subi	r16, 0xFA	; 250
 3de:	1f 4f       	sbci	r17, 0xFF	; 255
 3e0:	fd 14       	cp	r15, r13
 3e2:	60 f3       	brcs	.-40     	; 0x3bc <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	df 90       	pop	r13
 3f2:	08 95       	ret

000003f4 <set_spi_master>:
#include<avr/io.h>

int spiint=0;
void set_spi_master()
{
	DDRB|=(1<<5);// set mosi pin
 3f4:	bd 9a       	sbi	0x17, 5	; 23
	DDRB|=(1<<7);// set sck pin
 3f6:	bf 9a       	sbi	0x17, 7	; 23
	DDRB|=(1<<4);///set ss pin
 3f8:	bc 9a       	sbi	0x17, 4	; 23
	DDRB&=~(1<<6);// set miso pin
 3fa:	be 98       	cbi	0x17, 6	; 23
	SPCR|=(1<<MSTR);
 3fc:	6c 9a       	sbi	0x0d, 4	; 13
	SPCR|=(1<<SPE);
 3fe:	6e 9a       	sbi	0x0d, 6	; 13
}
 400:	08 95       	ret

00000402 <set_spi_slave>:

void set_spi_slave()
{
	DDRB&=~(1<<5);// set mosi pin
 402:	bd 98       	cbi	0x17, 5	; 23
	DDRB&=~(1<<7);// set sck pin
 404:	bf 98       	cbi	0x17, 7	; 23
	DDRB&=~(1<<4);// set ss pin
 406:	bc 98       	cbi	0x17, 4	; 23
	DDRB|=(1<<6);// set miso pin
 408:	be 9a       	sbi	0x17, 6	; 23
	SPCR&=~(1<<MSTR);
 40a:	6c 98       	cbi	0x0d, 4	; 13
	SPCR|=(1<<SPE);
 40c:	6e 9a       	sbi	0x0d, 6	; 13
}
 40e:	08 95       	ret

00000410 <sendchar_spi>:


unsigned char sendchar_spi(unsigned char data)
{
 410:	28 2f       	mov	r18, r24
	if(spiint)
 412:	80 91 66 00 	lds	r24, 0x0066
 416:	90 91 67 00 	lds	r25, 0x0067
 41a:	89 2b       	or	r24, r25
 41c:	19 f0       	breq	.+6      	; 0x424 <sendchar_spi+0x14>
	{
		SPDR=data;
 41e:	2f b9       	out	0x0f, r18	; 15
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret
		return 0;
	}
	else
	{
		SPDR=data;
 424:	2f b9       	out	0x0f, r18	; 15
		while ((SPSR & (1<<7))==0);//SPIF
 426:	77 9b       	sbis	0x0e, 7	; 14
 428:	fe cf       	rjmp	.-4      	; 0x426 <sendchar_spi+0x16>
		return SPDR;
 42a:	8f b1       	in	r24, 0x0f	; 15
	}

}
 42c:	08 95       	ret

0000042e <set_spi_prescalar>:
void set_spi_prescalar(int pre)
{
	int ii,jj;
	ii=pre&0b00000011;
	SPCR&=0b11111100;
 42e:	2d b1       	in	r18, 0x0d	; 13
 430:	2c 7f       	andi	r18, 0xFC	; 252
 432:	2d b9       	out	0x0d, r18	; 13
	SPCR|=ii;
 434:	4d b1       	in	r20, 0x0d	; 13
 436:	9c 01       	movw	r18, r24
 438:	23 70       	andi	r18, 0x03	; 3
 43a:	30 70       	andi	r19, 0x00	; 0
 43c:	42 2b       	or	r20, r18
 43e:	4d b9       	out	0x0d, r20	; 13
	jj=pre&0b00000100;
 440:	84 70       	andi	r24, 0x04	; 4
 442:	90 70       	andi	r25, 0x00	; 0
	jj=jj>>2;
	SPSR&=0b11111110;
 444:	70 98       	cbi	0x0e, 0	; 14
	SPSR|=jj;
 446:	2e b1       	in	r18, 0x0e	; 14
 448:	95 95       	asr	r25
 44a:	87 95       	ror	r24
 44c:	95 95       	asr	r25
 44e:	87 95       	ror	r24
 450:	28 2b       	or	r18, r24
 452:	2e b9       	out	0x0e, r18	; 14
}
 454:	08 95       	ret

00000456 <enable_spiint>:

void enable_spiint()
{
	SPCR|=(1<<SPIE);
 456:	6f 9a       	sbi	0x0d, 7	; 13
	spiint=1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 67 00 	sts	0x0067, r25
 460:	80 93 66 00 	sts	0x0066, r24
}
 464:	08 95       	ret

00000466 <Disable_spiint>:

void Disable_spiint()
{
	SPCR&=~(1<<SPIE);
 466:	6f 98       	cbi	0x0d, 7	; 13
	spiint=0;
 468:	10 92 67 00 	sts	0x0067, r1
 46c:	10 92 66 00 	sts	0x0066, r1
}
 470:	08 95       	ret

00000472 <set_spi_lsbfirst>:

void set_spi_lsbfirst()
{
	SPCR|=(1<<DORD);
 472:	6d 9a       	sbi	0x0d, 5	; 13
}
 474:	08 95       	ret

00000476 <set_spi_msbfirst>:

void set_spi_msbfirst()
{
	SPCR&=~(1<<DORD);
 476:	6d 98       	cbi	0x0d, 5	; 13
}
 478:	08 95       	ret

0000047a <set_spi_clkpolarity>:

void set_spi_clkpolarity(int cpol)
{
	cpol=cpol%2;
	SPCR&=~(1<<CPOL);
 47a:	6b 98       	cbi	0x0d, 3	; 13
	SPCR|=(cpol<<CPOL);
 47c:	2d b1       	in	r18, 0x0d	; 13
 47e:	62 e0       	ldi	r22, 0x02	; 2
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	0e 94 91 05 	call	0xb22	; 0xb22 <__divmodhi4>
 486:	43 e0       	ldi	r20, 0x03	; 3
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	4a 95       	dec	r20
 48e:	e1 f7       	brne	.-8      	; 0x488 <set_spi_clkpolarity+0xe>
 490:	28 2b       	or	r18, r24
 492:	2d b9       	out	0x0d, r18	; 13
}
 494:	08 95       	ret

00000496 <set_spi_clkphase>:

void set_spi_clkphase(int cpha)
{
	cpha=cpha%2;
	SPCR=~(1<<CPHA);
 496:	2b ef       	ldi	r18, 0xFB	; 251
 498:	2d b9       	out	0x0d, r18	; 13
	SPCR|=(cpha<<CPHA);
 49a:	2d b1       	in	r18, 0x0d	; 13
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	0e 94 91 05 	call	0xb22	; 0xb22 <__divmodhi4>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	28 2b       	or	r18, r24
 4ae:	2d b9       	out	0x0d, r18	; 13
}
 4b0:	08 95       	ret

000004b2 <__vector_10>:
#include<avr/interrupt.h>

int i=0;
char d;
ISR (SPI_STC_vect)
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
	i++;
 4c0:	80 91 68 00 	lds	r24, 0x0068
 4c4:	90 91 69 00 	lds	r25, 0x0069
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	90 93 69 00 	sts	0x0069, r25
 4ce:	80 93 68 00 	sts	0x0068, r24
	d=SPDR;
 4d2:	8f b1       	in	r24, 0x0f	; 15
 4d4:	80 93 6a 00 	sts	0x006A, r24
}
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <main>:
void main()
{
 4e6:	cf 92       	push	r12
 4e8:	df 92       	push	r13
 4ea:	ef 92       	push	r14
 4ec:	ff 92       	push	r15
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	df 93       	push	r29
 4f4:	cf 93       	push	r28
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
 4fa:	60 97       	sbiw	r28, 0x10	; 16
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
	char buff[16];
	LCDinit();
 506:	0e 94 0e 01 	call	0x21c	; 0x21c <LCDinit>
	LCDclr();
 50a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCDclr>
	set_spi_master();
 50e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <set_spi_master>
	enable_spiint();
 512:	0e 94 2b 02 	call	0x456	; 0x456 <enable_spiint>
	sei();
 516:	78 94       	sei
	while(1)
	{
		sendchar_spi('D');
		LCDGotoXY(0,0);
		LCDsendChar(d);
		sprintf(buff,"i=%3d",i);
 518:	8e 01       	movw	r16, r28
 51a:	0f 5f       	subi	r16, 0xFF	; 255
 51c:	1f 4f       	sbci	r17, 0xFF	; 255
 51e:	90 e6       	ldi	r25, 0x60	; 96
 520:	c9 2e       	mov	r12, r25
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	d9 2e       	mov	r13, r25
 526:	84 e6       	ldi	r24, 0x64	; 100
 528:	e8 2e       	mov	r14, r24
 52a:	f1 2c       	mov	r15, r1
	set_spi_master();
	enable_spiint();
	sei();
	while(1)
	{
		sendchar_spi('D');
 52c:	84 e4       	ldi	r24, 0x44	; 68
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 08 02 	call	0x410	; 0x410 <sendchar_spi>
		LCDGotoXY(0,0);
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	0e 94 c4 00 	call	0x188	; 0x188 <LCDGotoXY>
		LCDsendChar(d);
 540:	80 91 6a 00 	lds	r24, 0x006A
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDsendChar>
		sprintf(buff,"i=%3d",i);
 54a:	00 d0       	rcall	.+0      	; 0x54c <main+0x66>
 54c:	00 d0       	rcall	.+0      	; 0x54e <main+0x68>
 54e:	00 d0       	rcall	.+0      	; 0x550 <main+0x6a>
 550:	ed b7       	in	r30, 0x3d	; 61
 552:	fe b7       	in	r31, 0x3e	; 62
 554:	31 96       	adiw	r30, 0x01	; 1
 556:	ad b7       	in	r26, 0x3d	; 61
 558:	be b7       	in	r27, 0x3e	; 62
 55a:	12 96       	adiw	r26, 0x02	; 2
 55c:	1c 93       	st	X, r17
 55e:	0e 93       	st	-X, r16
 560:	11 97       	sbiw	r26, 0x01	; 1
 562:	d3 82       	std	Z+3, r13	; 0x03
 564:	c2 82       	std	Z+2, r12	; 0x02
 566:	80 91 68 00 	lds	r24, 0x0068
 56a:	90 91 69 00 	lds	r25, 0x0069
 56e:	95 83       	std	Z+5, r25	; 0x05
 570:	84 83       	std	Z+4, r24	; 0x04
 572:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <sprintf>

		LCDGotoXY(0,1);
 576:	8d b7       	in	r24, 0x3d	; 61
 578:	9e b7       	in	r25, 0x3e	; 62
 57a:	06 96       	adiw	r24, 0x06	; 6
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	f8 94       	cli
 580:	9e bf       	out	0x3e, r25	; 62
 582:	0f be       	out	0x3f, r0	; 63
 584:	8d bf       	out	0x3d, r24	; 61
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	0e 94 c4 00 	call	0x188	; 0x188 <LCDGotoXY>
		LCDstring(buff,strlen(buff));
 592:	f8 01       	movw	r30, r16
 594:	01 90       	ld	r0, Z+
 596:	00 20       	and	r0, r0
 598:	e9 f7       	brne	.-6      	; 0x594 <main+0xae>
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	e0 1b       	sub	r30, r16
 59e:	f1 0b       	sbc	r31, r17
 5a0:	c8 01       	movw	r24, r16
 5a2:	bf 01       	movw	r22, r30
 5a4:	0e 94 af 00 	call	0x15e	; 0x15e <LCDstring>
 5a8:	80 e1       	ldi	r24, 0x10	; 16
 5aa:	97 e2       	ldi	r25, 0x27	; 39
 5ac:	f7 01       	movw	r30, r14
 5ae:	31 97       	sbiw	r30, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <main+0xc8>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b4:	d9 f7       	brne	.-10     	; 0x5ac <main+0xc6>
 5b6:	ba cf       	rjmp	.-140    	; 0x52c <main+0x46>

000005b8 <sprintf>:
 5b8:	ae e0       	ldi	r26, 0x0E	; 14
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 ee       	ldi	r30, 0xE2	; 226
 5be:	f2 e0       	ldi	r31, 0x02	; 2
 5c0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__prologue_saves__+0x1c>
 5c4:	0d 89       	ldd	r16, Y+21	; 0x15
 5c6:	1e 89       	ldd	r17, Y+22	; 0x16
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	8c 83       	std	Y+4, r24	; 0x04
 5cc:	1a 83       	std	Y+2, r17	; 0x02
 5ce:	09 83       	std	Y+1, r16	; 0x01
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	9f e7       	ldi	r25, 0x7F	; 127
 5d4:	9e 83       	std	Y+6, r25	; 0x06
 5d6:	8d 83       	std	Y+5, r24	; 0x05
 5d8:	9e 01       	movw	r18, r28
 5da:	27 5e       	subi	r18, 0xE7	; 231
 5dc:	3f 4f       	sbci	r19, 0xFF	; 255
 5de:	ce 01       	movw	r24, r28
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	6f 89       	ldd	r22, Y+23	; 0x17
 5e4:	78 8d       	ldd	r23, Y+24	; 0x18
 5e6:	a9 01       	movw	r20, r18
 5e8:	0e 94 00 03 	call	0x600	; 0x600 <vfprintf>
 5ec:	2f 81       	ldd	r18, Y+7	; 0x07
 5ee:	38 85       	ldd	r19, Y+8	; 0x08
 5f0:	02 0f       	add	r16, r18
 5f2:	13 1f       	adc	r17, r19
 5f4:	f8 01       	movw	r30, r16
 5f6:	10 82       	st	Z, r1
 5f8:	2e 96       	adiw	r28, 0x0e	; 14
 5fa:	e4 e0       	ldi	r30, 0x04	; 4
 5fc:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__epilogue_restores__+0x1c>

00000600 <vfprintf>:
 600:	ab e0       	ldi	r26, 0x0B	; 11
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e6 e0       	ldi	r30, 0x06	; 6
 606:	f3 e0       	ldi	r31, 0x03	; 3
 608:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__prologue_saves__>
 60c:	3c 01       	movw	r6, r24
 60e:	2b 01       	movw	r4, r22
 610:	5a 01       	movw	r10, r20
 612:	fc 01       	movw	r30, r24
 614:	17 82       	std	Z+7, r1	; 0x07
 616:	16 82       	std	Z+6, r1	; 0x06
 618:	83 81       	ldd	r24, Z+3	; 0x03
 61a:	81 fd       	sbrc	r24, 1
 61c:	03 c0       	rjmp	.+6      	; 0x624 <vfprintf+0x24>
 61e:	6f ef       	ldi	r22, 0xFF	; 255
 620:	7f ef       	ldi	r23, 0xFF	; 255
 622:	c6 c1       	rjmp	.+908    	; 0x9b0 <vfprintf+0x3b0>
 624:	9a e0       	ldi	r25, 0x0A	; 10
 626:	89 2e       	mov	r8, r25
 628:	1e 01       	movw	r2, r28
 62a:	08 94       	sec
 62c:	21 1c       	adc	r2, r1
 62e:	31 1c       	adc	r3, r1
 630:	f3 01       	movw	r30, r6
 632:	23 81       	ldd	r18, Z+3	; 0x03
 634:	f2 01       	movw	r30, r4
 636:	23 fd       	sbrc	r18, 3
 638:	85 91       	lpm	r24, Z+
 63a:	23 ff       	sbrs	r18, 3
 63c:	81 91       	ld	r24, Z+
 63e:	2f 01       	movw	r4, r30
 640:	88 23       	and	r24, r24
 642:	09 f4       	brne	.+2      	; 0x646 <vfprintf+0x46>
 644:	b2 c1       	rjmp	.+868    	; 0x9aa <vfprintf+0x3aa>
 646:	85 32       	cpi	r24, 0x25	; 37
 648:	39 f4       	brne	.+14     	; 0x658 <vfprintf+0x58>
 64a:	23 fd       	sbrc	r18, 3
 64c:	85 91       	lpm	r24, Z+
 64e:	23 ff       	sbrs	r18, 3
 650:	81 91       	ld	r24, Z+
 652:	2f 01       	movw	r4, r30
 654:	85 32       	cpi	r24, 0x25	; 37
 656:	29 f4       	brne	.+10     	; 0x662 <vfprintf+0x62>
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	b3 01       	movw	r22, r6
 65c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 660:	e7 cf       	rjmp	.-50     	; 0x630 <vfprintf+0x30>
 662:	98 2f       	mov	r25, r24
 664:	ff 24       	eor	r15, r15
 666:	ee 24       	eor	r14, r14
 668:	99 24       	eor	r9, r9
 66a:	ff e1       	ldi	r31, 0x1F	; 31
 66c:	ff 15       	cp	r31, r15
 66e:	d0 f0       	brcs	.+52     	; 0x6a4 <vfprintf+0xa4>
 670:	9b 32       	cpi	r25, 0x2B	; 43
 672:	69 f0       	breq	.+26     	; 0x68e <vfprintf+0x8e>
 674:	9c 32       	cpi	r25, 0x2C	; 44
 676:	28 f4       	brcc	.+10     	; 0x682 <vfprintf+0x82>
 678:	90 32       	cpi	r25, 0x20	; 32
 67a:	59 f0       	breq	.+22     	; 0x692 <vfprintf+0x92>
 67c:	93 32       	cpi	r25, 0x23	; 35
 67e:	91 f4       	brne	.+36     	; 0x6a4 <vfprintf+0xa4>
 680:	0e c0       	rjmp	.+28     	; 0x69e <vfprintf+0x9e>
 682:	9d 32       	cpi	r25, 0x2D	; 45
 684:	49 f0       	breq	.+18     	; 0x698 <vfprintf+0x98>
 686:	90 33       	cpi	r25, 0x30	; 48
 688:	69 f4       	brne	.+26     	; 0x6a4 <vfprintf+0xa4>
 68a:	41 e0       	ldi	r20, 0x01	; 1
 68c:	24 c0       	rjmp	.+72     	; 0x6d6 <vfprintf+0xd6>
 68e:	52 e0       	ldi	r21, 0x02	; 2
 690:	f5 2a       	or	r15, r21
 692:	84 e0       	ldi	r24, 0x04	; 4
 694:	f8 2a       	or	r15, r24
 696:	28 c0       	rjmp	.+80     	; 0x6e8 <vfprintf+0xe8>
 698:	98 e0       	ldi	r25, 0x08	; 8
 69a:	f9 2a       	or	r15, r25
 69c:	25 c0       	rjmp	.+74     	; 0x6e8 <vfprintf+0xe8>
 69e:	e0 e1       	ldi	r30, 0x10	; 16
 6a0:	fe 2a       	or	r15, r30
 6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <vfprintf+0xe8>
 6a4:	f7 fc       	sbrc	r15, 7
 6a6:	29 c0       	rjmp	.+82     	; 0x6fa <vfprintf+0xfa>
 6a8:	89 2f       	mov	r24, r25
 6aa:	80 53       	subi	r24, 0x30	; 48
 6ac:	8a 30       	cpi	r24, 0x0A	; 10
 6ae:	70 f4       	brcc	.+28     	; 0x6cc <vfprintf+0xcc>
 6b0:	f6 fe       	sbrs	r15, 6
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <vfprintf+0xbe>
 6b4:	98 9c       	mul	r9, r8
 6b6:	90 2c       	mov	r9, r0
 6b8:	11 24       	eor	r1, r1
 6ba:	98 0e       	add	r9, r24
 6bc:	15 c0       	rjmp	.+42     	; 0x6e8 <vfprintf+0xe8>
 6be:	e8 9c       	mul	r14, r8
 6c0:	e0 2c       	mov	r14, r0
 6c2:	11 24       	eor	r1, r1
 6c4:	e8 0e       	add	r14, r24
 6c6:	f0 e2       	ldi	r31, 0x20	; 32
 6c8:	ff 2a       	or	r15, r31
 6ca:	0e c0       	rjmp	.+28     	; 0x6e8 <vfprintf+0xe8>
 6cc:	9e 32       	cpi	r25, 0x2E	; 46
 6ce:	29 f4       	brne	.+10     	; 0x6da <vfprintf+0xda>
 6d0:	f6 fc       	sbrc	r15, 6
 6d2:	6b c1       	rjmp	.+726    	; 0x9aa <vfprintf+0x3aa>
 6d4:	40 e4       	ldi	r20, 0x40	; 64
 6d6:	f4 2a       	or	r15, r20
 6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <vfprintf+0xe8>
 6da:	9c 36       	cpi	r25, 0x6C	; 108
 6dc:	19 f4       	brne	.+6      	; 0x6e4 <vfprintf+0xe4>
 6de:	50 e8       	ldi	r21, 0x80	; 128
 6e0:	f5 2a       	or	r15, r21
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <vfprintf+0xe8>
 6e4:	98 36       	cpi	r25, 0x68	; 104
 6e6:	49 f4       	brne	.+18     	; 0x6fa <vfprintf+0xfa>
 6e8:	f2 01       	movw	r30, r4
 6ea:	23 fd       	sbrc	r18, 3
 6ec:	95 91       	lpm	r25, Z+
 6ee:	23 ff       	sbrs	r18, 3
 6f0:	91 91       	ld	r25, Z+
 6f2:	2f 01       	movw	r4, r30
 6f4:	99 23       	and	r25, r25
 6f6:	09 f0       	breq	.+2      	; 0x6fa <vfprintf+0xfa>
 6f8:	b8 cf       	rjmp	.-144    	; 0x66a <vfprintf+0x6a>
 6fa:	89 2f       	mov	r24, r25
 6fc:	85 54       	subi	r24, 0x45	; 69
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	18 f0       	brcs	.+6      	; 0x708 <vfprintf+0x108>
 702:	80 52       	subi	r24, 0x20	; 32
 704:	83 30       	cpi	r24, 0x03	; 3
 706:	38 f4       	brcc	.+14     	; 0x716 <vfprintf+0x116>
 708:	44 e0       	ldi	r20, 0x04	; 4
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	a4 0e       	add	r10, r20
 70e:	b5 1e       	adc	r11, r21
 710:	5f e3       	ldi	r21, 0x3F	; 63
 712:	59 83       	std	Y+1, r21	; 0x01
 714:	0f c0       	rjmp	.+30     	; 0x734 <vfprintf+0x134>
 716:	93 36       	cpi	r25, 0x63	; 99
 718:	31 f0       	breq	.+12     	; 0x726 <vfprintf+0x126>
 71a:	93 37       	cpi	r25, 0x73	; 115
 71c:	79 f0       	breq	.+30     	; 0x73c <vfprintf+0x13c>
 71e:	93 35       	cpi	r25, 0x53	; 83
 720:	09 f0       	breq	.+2      	; 0x724 <vfprintf+0x124>
 722:	56 c0       	rjmp	.+172    	; 0x7d0 <vfprintf+0x1d0>
 724:	20 c0       	rjmp	.+64     	; 0x766 <vfprintf+0x166>
 726:	f5 01       	movw	r30, r10
 728:	80 81       	ld	r24, Z
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	42 e0       	ldi	r20, 0x02	; 2
 72e:	50 e0       	ldi	r21, 0x00	; 0
 730:	a4 0e       	add	r10, r20
 732:	b5 1e       	adc	r11, r21
 734:	61 01       	movw	r12, r2
 736:	01 e0       	ldi	r16, 0x01	; 1
 738:	10 e0       	ldi	r17, 0x00	; 0
 73a:	12 c0       	rjmp	.+36     	; 0x760 <vfprintf+0x160>
 73c:	f5 01       	movw	r30, r10
 73e:	c0 80       	ld	r12, Z
 740:	d1 80       	ldd	r13, Z+1	; 0x01
 742:	f6 fc       	sbrc	r15, 6
 744:	03 c0       	rjmp	.+6      	; 0x74c <vfprintf+0x14c>
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	7f ef       	ldi	r23, 0xFF	; 255
 74a:	02 c0       	rjmp	.+4      	; 0x750 <vfprintf+0x150>
 74c:	69 2d       	mov	r22, r9
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	42 e0       	ldi	r20, 0x02	; 2
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	a4 0e       	add	r10, r20
 756:	b5 1e       	adc	r11, r21
 758:	c6 01       	movw	r24, r12
 75a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <strnlen>
 75e:	8c 01       	movw	r16, r24
 760:	5f e7       	ldi	r21, 0x7F	; 127
 762:	f5 22       	and	r15, r21
 764:	14 c0       	rjmp	.+40     	; 0x78e <vfprintf+0x18e>
 766:	f5 01       	movw	r30, r10
 768:	c0 80       	ld	r12, Z
 76a:	d1 80       	ldd	r13, Z+1	; 0x01
 76c:	f6 fc       	sbrc	r15, 6
 76e:	03 c0       	rjmp	.+6      	; 0x776 <vfprintf+0x176>
 770:	6f ef       	ldi	r22, 0xFF	; 255
 772:	7f ef       	ldi	r23, 0xFF	; 255
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x17a>
 776:	69 2d       	mov	r22, r9
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	42 e0       	ldi	r20, 0x02	; 2
 77c:	50 e0       	ldi	r21, 0x00	; 0
 77e:	a4 0e       	add	r10, r20
 780:	b5 1e       	adc	r11, r21
 782:	c6 01       	movw	r24, r12
 784:	0e 94 dd 04 	call	0x9ba	; 0x9ba <strnlen_P>
 788:	8c 01       	movw	r16, r24
 78a:	50 e8       	ldi	r21, 0x80	; 128
 78c:	f5 2a       	or	r15, r21
 78e:	f3 fe       	sbrs	r15, 3
 790:	07 c0       	rjmp	.+14     	; 0x7a0 <vfprintf+0x1a0>
 792:	1a c0       	rjmp	.+52     	; 0x7c8 <vfprintf+0x1c8>
 794:	80 e2       	ldi	r24, 0x20	; 32
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	b3 01       	movw	r22, r6
 79a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 79e:	ea 94       	dec	r14
 7a0:	8e 2d       	mov	r24, r14
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	08 17       	cp	r16, r24
 7a6:	19 07       	cpc	r17, r25
 7a8:	a8 f3       	brcs	.-22     	; 0x794 <vfprintf+0x194>
 7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <vfprintf+0x1c8>
 7ac:	f6 01       	movw	r30, r12
 7ae:	f7 fc       	sbrc	r15, 7
 7b0:	85 91       	lpm	r24, Z+
 7b2:	f7 fe       	sbrs	r15, 7
 7b4:	81 91       	ld	r24, Z+
 7b6:	6f 01       	movw	r12, r30
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	b3 01       	movw	r22, r6
 7bc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 7c0:	e1 10       	cpse	r14, r1
 7c2:	ea 94       	dec	r14
 7c4:	01 50       	subi	r16, 0x01	; 1
 7c6:	10 40       	sbci	r17, 0x00	; 0
 7c8:	01 15       	cp	r16, r1
 7ca:	11 05       	cpc	r17, r1
 7cc:	79 f7       	brne	.-34     	; 0x7ac <vfprintf+0x1ac>
 7ce:	ea c0       	rjmp	.+468    	; 0x9a4 <vfprintf+0x3a4>
 7d0:	94 36       	cpi	r25, 0x64	; 100
 7d2:	11 f0       	breq	.+4      	; 0x7d8 <vfprintf+0x1d8>
 7d4:	99 36       	cpi	r25, 0x69	; 105
 7d6:	69 f5       	brne	.+90     	; 0x832 <vfprintf+0x232>
 7d8:	f7 fe       	sbrs	r15, 7
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <vfprintf+0x1ec>
 7dc:	f5 01       	movw	r30, r10
 7de:	20 81       	ld	r18, Z
 7e0:	31 81       	ldd	r19, Z+1	; 0x01
 7e2:	42 81       	ldd	r20, Z+2	; 0x02
 7e4:	53 81       	ldd	r21, Z+3	; 0x03
 7e6:	84 e0       	ldi	r24, 0x04	; 4
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0a c0       	rjmp	.+20     	; 0x800 <vfprintf+0x200>
 7ec:	f5 01       	movw	r30, r10
 7ee:	80 81       	ld	r24, Z
 7f0:	91 81       	ldd	r25, Z+1	; 0x01
 7f2:	9c 01       	movw	r18, r24
 7f4:	44 27       	eor	r20, r20
 7f6:	37 fd       	sbrc	r19, 7
 7f8:	40 95       	com	r20
 7fa:	54 2f       	mov	r21, r20
 7fc:	82 e0       	ldi	r24, 0x02	; 2
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	a8 0e       	add	r10, r24
 802:	b9 1e       	adc	r11, r25
 804:	9f e6       	ldi	r25, 0x6F	; 111
 806:	f9 22       	and	r15, r25
 808:	57 ff       	sbrs	r21, 7
 80a:	09 c0       	rjmp	.+18     	; 0x81e <vfprintf+0x21e>
 80c:	50 95       	com	r21
 80e:	40 95       	com	r20
 810:	30 95       	com	r19
 812:	21 95       	neg	r18
 814:	3f 4f       	sbci	r19, 0xFF	; 255
 816:	4f 4f       	sbci	r20, 0xFF	; 255
 818:	5f 4f       	sbci	r21, 0xFF	; 255
 81a:	e0 e8       	ldi	r30, 0x80	; 128
 81c:	fe 2a       	or	r15, r30
 81e:	ca 01       	movw	r24, r20
 820:	b9 01       	movw	r22, r18
 822:	a1 01       	movw	r20, r2
 824:	2a e0       	ldi	r18, 0x0A	; 10
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__ultoa_invert>
 82c:	d8 2e       	mov	r13, r24
 82e:	d2 18       	sub	r13, r2
 830:	40 c0       	rjmp	.+128    	; 0x8b2 <vfprintf+0x2b2>
 832:	95 37       	cpi	r25, 0x75	; 117
 834:	29 f4       	brne	.+10     	; 0x840 <vfprintf+0x240>
 836:	1f 2d       	mov	r17, r15
 838:	1f 7e       	andi	r17, 0xEF	; 239
 83a:	2a e0       	ldi	r18, 0x0A	; 10
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	1d c0       	rjmp	.+58     	; 0x87a <vfprintf+0x27a>
 840:	1f 2d       	mov	r17, r15
 842:	19 7f       	andi	r17, 0xF9	; 249
 844:	9f 36       	cpi	r25, 0x6F	; 111
 846:	61 f0       	breq	.+24     	; 0x860 <vfprintf+0x260>
 848:	90 37       	cpi	r25, 0x70	; 112
 84a:	20 f4       	brcc	.+8      	; 0x854 <vfprintf+0x254>
 84c:	98 35       	cpi	r25, 0x58	; 88
 84e:	09 f0       	breq	.+2      	; 0x852 <vfprintf+0x252>
 850:	ac c0       	rjmp	.+344    	; 0x9aa <vfprintf+0x3aa>
 852:	0f c0       	rjmp	.+30     	; 0x872 <vfprintf+0x272>
 854:	90 37       	cpi	r25, 0x70	; 112
 856:	39 f0       	breq	.+14     	; 0x866 <vfprintf+0x266>
 858:	98 37       	cpi	r25, 0x78	; 120
 85a:	09 f0       	breq	.+2      	; 0x85e <vfprintf+0x25e>
 85c:	a6 c0       	rjmp	.+332    	; 0x9aa <vfprintf+0x3aa>
 85e:	04 c0       	rjmp	.+8      	; 0x868 <vfprintf+0x268>
 860:	28 e0       	ldi	r18, 0x08	; 8
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	0a c0       	rjmp	.+20     	; 0x87a <vfprintf+0x27a>
 866:	10 61       	ori	r17, 0x10	; 16
 868:	14 fd       	sbrc	r17, 4
 86a:	14 60       	ori	r17, 0x04	; 4
 86c:	20 e1       	ldi	r18, 0x10	; 16
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	04 c0       	rjmp	.+8      	; 0x87a <vfprintf+0x27a>
 872:	14 fd       	sbrc	r17, 4
 874:	16 60       	ori	r17, 0x06	; 6
 876:	20 e1       	ldi	r18, 0x10	; 16
 878:	32 e0       	ldi	r19, 0x02	; 2
 87a:	17 ff       	sbrs	r17, 7
 87c:	08 c0       	rjmp	.+16     	; 0x88e <vfprintf+0x28e>
 87e:	f5 01       	movw	r30, r10
 880:	60 81       	ld	r22, Z
 882:	71 81       	ldd	r23, Z+1	; 0x01
 884:	82 81       	ldd	r24, Z+2	; 0x02
 886:	93 81       	ldd	r25, Z+3	; 0x03
 888:	44 e0       	ldi	r20, 0x04	; 4
 88a:	50 e0       	ldi	r21, 0x00	; 0
 88c:	08 c0       	rjmp	.+16     	; 0x89e <vfprintf+0x29e>
 88e:	f5 01       	movw	r30, r10
 890:	80 81       	ld	r24, Z
 892:	91 81       	ldd	r25, Z+1	; 0x01
 894:	bc 01       	movw	r22, r24
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	42 e0       	ldi	r20, 0x02	; 2
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	a4 0e       	add	r10, r20
 8a0:	b5 1e       	adc	r11, r21
 8a2:	a1 01       	movw	r20, r2
 8a4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__ultoa_invert>
 8a8:	d8 2e       	mov	r13, r24
 8aa:	d2 18       	sub	r13, r2
 8ac:	8f e7       	ldi	r24, 0x7F	; 127
 8ae:	f8 2e       	mov	r15, r24
 8b0:	f1 22       	and	r15, r17
 8b2:	f6 fe       	sbrs	r15, 6
 8b4:	0b c0       	rjmp	.+22     	; 0x8cc <vfprintf+0x2cc>
 8b6:	5e ef       	ldi	r21, 0xFE	; 254
 8b8:	f5 22       	and	r15, r21
 8ba:	d9 14       	cp	r13, r9
 8bc:	38 f4       	brcc	.+14     	; 0x8cc <vfprintf+0x2cc>
 8be:	f4 fe       	sbrs	r15, 4
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <vfprintf+0x2d0>
 8c2:	f2 fc       	sbrc	r15, 2
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <vfprintf+0x2d0>
 8c6:	8f ee       	ldi	r24, 0xEF	; 239
 8c8:	f8 22       	and	r15, r24
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vfprintf+0x2d0>
 8cc:	1d 2d       	mov	r17, r13
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <vfprintf+0x2d2>
 8d0:	19 2d       	mov	r17, r9
 8d2:	f4 fe       	sbrs	r15, 4
 8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <vfprintf+0x2f0>
 8d6:	fe 01       	movw	r30, r28
 8d8:	ed 0d       	add	r30, r13
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	19 f4       	brne	.+6      	; 0x8e8 <vfprintf+0x2e8>
 8e2:	99 ee       	ldi	r25, 0xE9	; 233
 8e4:	f9 22       	and	r15, r25
 8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <vfprintf+0x2f8>
 8e8:	1f 5f       	subi	r17, 0xFF	; 255
 8ea:	f2 fe       	sbrs	r15, 2
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <vfprintf+0x2f8>
 8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <vfprintf+0x2f6>
 8f0:	8f 2d       	mov	r24, r15
 8f2:	86 78       	andi	r24, 0x86	; 134
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <vfprintf+0x2f8>
 8f6:	1f 5f       	subi	r17, 0xFF	; 255
 8f8:	0f 2d       	mov	r16, r15
 8fa:	f3 fc       	sbrc	r15, 3
 8fc:	14 c0       	rjmp	.+40     	; 0x926 <vfprintf+0x326>
 8fe:	f0 fe       	sbrs	r15, 0
 900:	0f c0       	rjmp	.+30     	; 0x920 <vfprintf+0x320>
 902:	1e 15       	cp	r17, r14
 904:	10 f0       	brcs	.+4      	; 0x90a <vfprintf+0x30a>
 906:	9d 2c       	mov	r9, r13
 908:	0b c0       	rjmp	.+22     	; 0x920 <vfprintf+0x320>
 90a:	9d 2c       	mov	r9, r13
 90c:	9e 0c       	add	r9, r14
 90e:	91 1a       	sub	r9, r17
 910:	1e 2d       	mov	r17, r14
 912:	06 c0       	rjmp	.+12     	; 0x920 <vfprintf+0x320>
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	b3 01       	movw	r22, r6
 91a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 91e:	1f 5f       	subi	r17, 0xFF	; 255
 920:	1e 15       	cp	r17, r14
 922:	c0 f3       	brcs	.-16     	; 0x914 <vfprintf+0x314>
 924:	04 c0       	rjmp	.+8      	; 0x92e <vfprintf+0x32e>
 926:	1e 15       	cp	r17, r14
 928:	10 f4       	brcc	.+4      	; 0x92e <vfprintf+0x32e>
 92a:	e1 1a       	sub	r14, r17
 92c:	01 c0       	rjmp	.+2      	; 0x930 <vfprintf+0x330>
 92e:	ee 24       	eor	r14, r14
 930:	04 ff       	sbrs	r16, 4
 932:	0f c0       	rjmp	.+30     	; 0x952 <vfprintf+0x352>
 934:	80 e3       	ldi	r24, 0x30	; 48
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	b3 01       	movw	r22, r6
 93a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 93e:	02 ff       	sbrs	r16, 2
 940:	1d c0       	rjmp	.+58     	; 0x97c <vfprintf+0x37c>
 942:	01 fd       	sbrc	r16, 1
 944:	03 c0       	rjmp	.+6      	; 0x94c <vfprintf+0x34c>
 946:	88 e7       	ldi	r24, 0x78	; 120
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e c0       	rjmp	.+28     	; 0x968 <vfprintf+0x368>
 94c:	88 e5       	ldi	r24, 0x58	; 88
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0b c0       	rjmp	.+22     	; 0x968 <vfprintf+0x368>
 952:	80 2f       	mov	r24, r16
 954:	86 78       	andi	r24, 0x86	; 134
 956:	91 f0       	breq	.+36     	; 0x97c <vfprintf+0x37c>
 958:	01 ff       	sbrs	r16, 1
 95a:	02 c0       	rjmp	.+4      	; 0x960 <vfprintf+0x360>
 95c:	8b e2       	ldi	r24, 0x2B	; 43
 95e:	01 c0       	rjmp	.+2      	; 0x962 <vfprintf+0x362>
 960:	80 e2       	ldi	r24, 0x20	; 32
 962:	f7 fc       	sbrc	r15, 7
 964:	8d e2       	ldi	r24, 0x2D	; 45
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	b3 01       	movw	r22, r6
 96a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 96e:	06 c0       	rjmp	.+12     	; 0x97c <vfprintf+0x37c>
 970:	80 e3       	ldi	r24, 0x30	; 48
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	b3 01       	movw	r22, r6
 976:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 97a:	9a 94       	dec	r9
 97c:	d9 14       	cp	r13, r9
 97e:	c0 f3       	brcs	.-16     	; 0x970 <vfprintf+0x370>
 980:	da 94       	dec	r13
 982:	f1 01       	movw	r30, r2
 984:	ed 0d       	add	r30, r13
 986:	f1 1d       	adc	r31, r1
 988:	80 81       	ld	r24, Z
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	b3 01       	movw	r22, r6
 98e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 992:	dd 20       	and	r13, r13
 994:	a9 f7       	brne	.-22     	; 0x980 <vfprintf+0x380>
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <vfprintf+0x3a4>
 998:	80 e2       	ldi	r24, 0x20	; 32
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	b3 01       	movw	r22, r6
 99e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 9a2:	ea 94       	dec	r14
 9a4:	ee 20       	and	r14, r14
 9a6:	c1 f7       	brne	.-16     	; 0x998 <vfprintf+0x398>
 9a8:	43 ce       	rjmp	.-890    	; 0x630 <vfprintf+0x30>
 9aa:	f3 01       	movw	r30, r6
 9ac:	66 81       	ldd	r22, Z+6	; 0x06
 9ae:	77 81       	ldd	r23, Z+7	; 0x07
 9b0:	cb 01       	movw	r24, r22
 9b2:	2b 96       	adiw	r28, 0x0b	; 11
 9b4:	e2 e1       	ldi	r30, 0x12	; 18
 9b6:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__epilogue_restores__>

000009ba <strnlen_P>:
 9ba:	fc 01       	movw	r30, r24
 9bc:	05 90       	lpm	r0, Z+
 9be:	61 50       	subi	r22, 0x01	; 1
 9c0:	70 40       	sbci	r23, 0x00	; 0
 9c2:	01 10       	cpse	r0, r1
 9c4:	d8 f7       	brcc	.-10     	; 0x9bc <strnlen_P+0x2>
 9c6:	80 95       	com	r24
 9c8:	90 95       	com	r25
 9ca:	8e 0f       	add	r24, r30
 9cc:	9f 1f       	adc	r25, r31
 9ce:	08 95       	ret

000009d0 <strnlen>:
 9d0:	fc 01       	movw	r30, r24
 9d2:	61 50       	subi	r22, 0x01	; 1
 9d4:	70 40       	sbci	r23, 0x00	; 0
 9d6:	01 90       	ld	r0, Z+
 9d8:	01 10       	cpse	r0, r1
 9da:	d8 f7       	brcc	.-10     	; 0x9d2 <strnlen+0x2>
 9dc:	80 95       	com	r24
 9de:	90 95       	com	r25
 9e0:	8e 0f       	add	r24, r30
 9e2:	9f 1f       	adc	r25, r31
 9e4:	08 95       	ret

000009e6 <fputc>:
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	8c 01       	movw	r16, r24
 9f0:	eb 01       	movw	r28, r22
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	81 ff       	sbrs	r24, 1
 9f6:	1b c0       	rjmp	.+54     	; 0xa2e <fputc+0x48>
 9f8:	82 ff       	sbrs	r24, 2
 9fa:	0d c0       	rjmp	.+26     	; 0xa16 <fputc+0x30>
 9fc:	2e 81       	ldd	r18, Y+6	; 0x06
 9fe:	3f 81       	ldd	r19, Y+7	; 0x07
 a00:	8c 81       	ldd	r24, Y+4	; 0x04
 a02:	9d 81       	ldd	r25, Y+5	; 0x05
 a04:	28 17       	cp	r18, r24
 a06:	39 07       	cpc	r19, r25
 a08:	64 f4       	brge	.+24     	; 0xa22 <fputc+0x3c>
 a0a:	e8 81       	ld	r30, Y
 a0c:	f9 81       	ldd	r31, Y+1	; 0x01
 a0e:	01 93       	st	Z+, r16
 a10:	f9 83       	std	Y+1, r31	; 0x01
 a12:	e8 83       	st	Y, r30
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <fputc+0x3c>
 a16:	e8 85       	ldd	r30, Y+8	; 0x08
 a18:	f9 85       	ldd	r31, Y+9	; 0x09
 a1a:	80 2f       	mov	r24, r16
 a1c:	09 95       	icall
 a1e:	89 2b       	or	r24, r25
 a20:	31 f4       	brne	.+12     	; 0xa2e <fputc+0x48>
 a22:	8e 81       	ldd	r24, Y+6	; 0x06
 a24:	9f 81       	ldd	r25, Y+7	; 0x07
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	9f 83       	std	Y+7, r25	; 0x07
 a2a:	8e 83       	std	Y+6, r24	; 0x06
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <fputc+0x4c>
 a2e:	0f ef       	ldi	r16, 0xFF	; 255
 a30:	1f ef       	ldi	r17, 0xFF	; 255
 a32:	c8 01       	movw	r24, r16
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	08 95       	ret

00000a3e <__ultoa_invert>:
 a3e:	fa 01       	movw	r30, r20
 a40:	aa 27       	eor	r26, r26
 a42:	28 30       	cpi	r18, 0x08	; 8
 a44:	51 f1       	breq	.+84     	; 0xa9a <__ultoa_invert+0x5c>
 a46:	20 31       	cpi	r18, 0x10	; 16
 a48:	81 f1       	breq	.+96     	; 0xaaa <__ultoa_invert+0x6c>
 a4a:	e8 94       	clt
 a4c:	6f 93       	push	r22
 a4e:	6e 7f       	andi	r22, 0xFE	; 254
 a50:	6e 5f       	subi	r22, 0xFE	; 254
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	af 4f       	sbci	r26, 0xFF	; 255
 a5a:	b1 e0       	ldi	r27, 0x01	; 1
 a5c:	3e d0       	rcall	.+124    	; 0xada <__ultoa_invert+0x9c>
 a5e:	b4 e0       	ldi	r27, 0x04	; 4
 a60:	3c d0       	rcall	.+120    	; 0xada <__ultoa_invert+0x9c>
 a62:	67 0f       	add	r22, r23
 a64:	78 1f       	adc	r23, r24
 a66:	89 1f       	adc	r24, r25
 a68:	9a 1f       	adc	r25, r26
 a6a:	a1 1d       	adc	r26, r1
 a6c:	68 0f       	add	r22, r24
 a6e:	79 1f       	adc	r23, r25
 a70:	8a 1f       	adc	r24, r26
 a72:	91 1d       	adc	r25, r1
 a74:	a1 1d       	adc	r26, r1
 a76:	6a 0f       	add	r22, r26
 a78:	71 1d       	adc	r23, r1
 a7a:	81 1d       	adc	r24, r1
 a7c:	91 1d       	adc	r25, r1
 a7e:	a1 1d       	adc	r26, r1
 a80:	20 d0       	rcall	.+64     	; 0xac2 <__ultoa_invert+0x84>
 a82:	09 f4       	brne	.+2      	; 0xa86 <__ultoa_invert+0x48>
 a84:	68 94       	set
 a86:	3f 91       	pop	r19
 a88:	2a e0       	ldi	r18, 0x0A	; 10
 a8a:	26 9f       	mul	r18, r22
 a8c:	11 24       	eor	r1, r1
 a8e:	30 19       	sub	r19, r0
 a90:	30 5d       	subi	r19, 0xD0	; 208
 a92:	31 93       	st	Z+, r19
 a94:	de f6       	brtc	.-74     	; 0xa4c <__ultoa_invert+0xe>
 a96:	cf 01       	movw	r24, r30
 a98:	08 95       	ret
 a9a:	46 2f       	mov	r20, r22
 a9c:	47 70       	andi	r20, 0x07	; 7
 a9e:	40 5d       	subi	r20, 0xD0	; 208
 aa0:	41 93       	st	Z+, r20
 aa2:	b3 e0       	ldi	r27, 0x03	; 3
 aa4:	0f d0       	rcall	.+30     	; 0xac4 <__ultoa_invert+0x86>
 aa6:	c9 f7       	brne	.-14     	; 0xa9a <__ultoa_invert+0x5c>
 aa8:	f6 cf       	rjmp	.-20     	; 0xa96 <__ultoa_invert+0x58>
 aaa:	46 2f       	mov	r20, r22
 aac:	4f 70       	andi	r20, 0x0F	; 15
 aae:	40 5d       	subi	r20, 0xD0	; 208
 ab0:	4a 33       	cpi	r20, 0x3A	; 58
 ab2:	18 f0       	brcs	.+6      	; 0xaba <__ultoa_invert+0x7c>
 ab4:	49 5d       	subi	r20, 0xD9	; 217
 ab6:	31 fd       	sbrc	r19, 1
 ab8:	40 52       	subi	r20, 0x20	; 32
 aba:	41 93       	st	Z+, r20
 abc:	02 d0       	rcall	.+4      	; 0xac2 <__ultoa_invert+0x84>
 abe:	a9 f7       	brne	.-22     	; 0xaaa <__ultoa_invert+0x6c>
 ac0:	ea cf       	rjmp	.-44     	; 0xa96 <__ultoa_invert+0x58>
 ac2:	b4 e0       	ldi	r27, 0x04	; 4
 ac4:	a6 95       	lsr	r26
 ac6:	97 95       	ror	r25
 ac8:	87 95       	ror	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	ba 95       	dec	r27
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__ultoa_invert+0x86>
 ad2:	00 97       	sbiw	r24, 0x00	; 0
 ad4:	61 05       	cpc	r22, r1
 ad6:	71 05       	cpc	r23, r1
 ad8:	08 95       	ret
 ada:	9b 01       	movw	r18, r22
 adc:	ac 01       	movw	r20, r24
 ade:	0a 2e       	mov	r0, r26
 ae0:	06 94       	lsr	r0
 ae2:	57 95       	ror	r21
 ae4:	47 95       	ror	r20
 ae6:	37 95       	ror	r19
 ae8:	27 95       	ror	r18
 aea:	ba 95       	dec	r27
 aec:	c9 f7       	brne	.-14     	; 0xae0 <__ultoa_invert+0xa2>
 aee:	62 0f       	add	r22, r18
 af0:	73 1f       	adc	r23, r19
 af2:	84 1f       	adc	r24, r20
 af4:	95 1f       	adc	r25, r21
 af6:	a0 1d       	adc	r26, r0
 af8:	08 95       	ret

00000afa <__udivmodhi4>:
 afa:	aa 1b       	sub	r26, r26
 afc:	bb 1b       	sub	r27, r27
 afe:	51 e1       	ldi	r21, 0x11	; 17
 b00:	07 c0       	rjmp	.+14     	; 0xb10 <__udivmodhi4_ep>

00000b02 <__udivmodhi4_loop>:
 b02:	aa 1f       	adc	r26, r26
 b04:	bb 1f       	adc	r27, r27
 b06:	a6 17       	cp	r26, r22
 b08:	b7 07       	cpc	r27, r23
 b0a:	10 f0       	brcs	.+4      	; 0xb10 <__udivmodhi4_ep>
 b0c:	a6 1b       	sub	r26, r22
 b0e:	b7 0b       	sbc	r27, r23

00000b10 <__udivmodhi4_ep>:
 b10:	88 1f       	adc	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	5a 95       	dec	r21
 b16:	a9 f7       	brne	.-22     	; 0xb02 <__udivmodhi4_loop>
 b18:	80 95       	com	r24
 b1a:	90 95       	com	r25
 b1c:	bc 01       	movw	r22, r24
 b1e:	cd 01       	movw	r24, r26
 b20:	08 95       	ret

00000b22 <__divmodhi4>:
 b22:	97 fb       	bst	r25, 7
 b24:	09 2e       	mov	r0, r25
 b26:	07 26       	eor	r0, r23
 b28:	0a d0       	rcall	.+20     	; 0xb3e <__divmodhi4_neg1>
 b2a:	77 fd       	sbrc	r23, 7
 b2c:	04 d0       	rcall	.+8      	; 0xb36 <__divmodhi4_neg2>
 b2e:	e5 df       	rcall	.-54     	; 0xafa <__udivmodhi4>
 b30:	06 d0       	rcall	.+12     	; 0xb3e <__divmodhi4_neg1>
 b32:	00 20       	and	r0, r0
 b34:	1a f4       	brpl	.+6      	; 0xb3c <__divmodhi4_exit>

00000b36 <__divmodhi4_neg2>:
 b36:	70 95       	com	r23
 b38:	61 95       	neg	r22
 b3a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b3c <__divmodhi4_exit>:
 b3c:	08 95       	ret

00000b3e <__divmodhi4_neg1>:
 b3e:	f6 f7       	brtc	.-4      	; 0xb3c <__divmodhi4_exit>
 b40:	90 95       	com	r25
 b42:	81 95       	neg	r24
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__prologue_saves__>:
 b48:	2f 92       	push	r2
 b4a:	3f 92       	push	r3
 b4c:	4f 92       	push	r4
 b4e:	5f 92       	push	r5
 b50:	6f 92       	push	r6
 b52:	7f 92       	push	r7
 b54:	8f 92       	push	r8
 b56:	9f 92       	push	r9
 b58:	af 92       	push	r10
 b5a:	bf 92       	push	r11
 b5c:	cf 92       	push	r12
 b5e:	df 92       	push	r13
 b60:	ef 92       	push	r14
 b62:	ff 92       	push	r15
 b64:	0f 93       	push	r16
 b66:	1f 93       	push	r17
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
 b70:	ca 1b       	sub	r28, r26
 b72:	db 0b       	sbc	r29, r27
 b74:	0f b6       	in	r0, 0x3f	; 63
 b76:	f8 94       	cli
 b78:	de bf       	out	0x3e, r29	; 62
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	cd bf       	out	0x3d, r28	; 61
 b7e:	09 94       	ijmp

00000b80 <__epilogue_restores__>:
 b80:	2a 88       	ldd	r2, Y+18	; 0x12
 b82:	39 88       	ldd	r3, Y+17	; 0x11
 b84:	48 88       	ldd	r4, Y+16	; 0x10
 b86:	5f 84       	ldd	r5, Y+15	; 0x0f
 b88:	6e 84       	ldd	r6, Y+14	; 0x0e
 b8a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b8c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b8e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b90:	aa 84       	ldd	r10, Y+10	; 0x0a
 b92:	b9 84       	ldd	r11, Y+9	; 0x09
 b94:	c8 84       	ldd	r12, Y+8	; 0x08
 b96:	df 80       	ldd	r13, Y+7	; 0x07
 b98:	ee 80       	ldd	r14, Y+6	; 0x06
 b9a:	fd 80       	ldd	r15, Y+5	; 0x05
 b9c:	0c 81       	ldd	r16, Y+4	; 0x04
 b9e:	1b 81       	ldd	r17, Y+3	; 0x03
 ba0:	aa 81       	ldd	r26, Y+2	; 0x02
 ba2:	b9 81       	ldd	r27, Y+1	; 0x01
 ba4:	ce 0f       	add	r28, r30
 ba6:	d1 1d       	adc	r29, r1
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	f8 94       	cli
 bac:	de bf       	out	0x3e, r29	; 62
 bae:	0f be       	out	0x3f, r0	; 63
 bb0:	cd bf       	out	0x3d, r28	; 61
 bb2:	ed 01       	movw	r28, r26
 bb4:	08 95       	ret

00000bb6 <_exit>:
 bb6:	f8 94       	cli

00000bb8 <__stop_program>:
 bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <__stop_program>
